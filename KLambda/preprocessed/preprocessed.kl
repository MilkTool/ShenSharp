(defun shen.shen () (do (shen.credits) (shen.loop)))
(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (pr (error-to-string E) (stoutput)))) (shen.loop)))))
(defun shen.credits () (do (shen.prhush "
Shen, copyright (C) 2010-2015 Mark Tarver
" (stoutput)) (do (shen.prhush (cn "www.shenlanguage.org, " (shen.app (value *version*) "
" shen.a)) (stoutput)) (do (shen.prhush (cn "running under " (shen.app (value *language*) (cn ", implementation: " (shen.app (value *implementation*) "" shen.a)) shen.a)) (stoutput)) (shen.prhush (cn "
port " (shen.app (value *port*) (cn " ported by " (shen.app (value *porters*) "
" shen.a)) shen.a)) (stoutput))))))
(defun shen.initialise_environment () (shen.multiple-set (cons shen.*call* (cons 0 (cons shen.*infs* (cons 0 (cons shen.*process-counter* (cons 0 (cons shen.*catch* (cons 0 ()))))))))))
(defun shen.multiple-set (V15590) (cond ((= () V15590) ()) ((and (cons? V15590) (cons? (tl V15590))) (do (set (hd V15590) (hd (tl V15590))) (shen.multiple-set (tl (tl V15590))))) (true (shen.f_error shen.multiple-set))))
(defun destroy (V15592) (declare V15592 symbol))
(defun shen.read-evaluate-print () (let Lineread (shen.toplineread) (let History (value shen.*history*) (let NewLineread (shen.retrieve-from-history-if-needed Lineread History) (let NewHistory (shen.update_history NewLineread History) (let Parsed (fst NewLineread) (shen.toplevel Parsed)))))))
(defun shen.retrieve-from-history-if-needed (V15604 V15605) (cond ((and (tuple? V15604) (and (cons? (snd V15604)) (element? (hd (snd V15604)) (cons (shen.space) (cons (shen.newline) ()))))) (shen.retrieve-from-history-if-needed (@p (fst V15604) (tl (snd V15604))) V15605)) ((and (tuple? V15604) (and (cons? (snd V15604)) (and (cons? (tl (snd V15604))) (and (= () (tl (tl (snd V15604)))) (and (cons? V15605) (and (= (hd (snd V15604)) (shen.exclamation)) (= (hd (tl (snd V15604))) (shen.exclamation)))))))) (let PastPrint (shen.prbytes (snd (hd V15605))) (hd V15605))) ((and (tuple? V15604) (and (cons? (snd V15604)) (= (hd (snd V15604)) (shen.exclamation)))) (let Key? (shen.make-key (tl (snd V15604)) V15605) (let Find (head (shen.find-past-inputs Key? V15605)) (let PastPrint (shen.prbytes (snd Find)) Find)))) ((and (tuple? V15604) (and (cons? (snd V15604)) (and (= () (tl (snd V15604))) (= (hd (snd V15604)) (shen.percent))))) (do (shen.print-past-inputs (lambda X true) (reverse V15605) 0) (abort))) ((and (tuple? V15604) (and (cons? (snd V15604)) (= (hd (snd V15604)) (shen.percent)))) (let Key? (shen.make-key (tl (snd V15604)) V15605) (let Pastprint (shen.print-past-inputs Key? (reverse V15605) 0) (abort)))) (true V15604)))
(defun shen.percent () 37)
(defun shen.exclamation () 33)
(defun shen.prbytes (V15607) (do (map (lambda Byte (pr (n->string Byte) (stoutput))) V15607) (nl 1)))
(defun shen.update_history (V15610 V15611) (set shen.*history* (cons V15610 V15611)))
(defun shen.toplineread () (shen.toplineread_loop (read-byte (stinput)) ()))
(defun shen.toplineread_loop (V15615 V15616) (cond ((= V15615 (shen.hat)) (simple-error "line read aborted")) ((element? V15615 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V15616 (lambda E shen.nextline)) (let It (shen.record-it V15616) (if (or (= Line shen.nextline) (empty? Line)) (shen.toplineread_loop (read-byte (stinput)) (append V15616 (cons V15615 ()))) (@p Line V15616))))) (true (shen.toplineread_loop (read-byte (stinput)) (append V15616 (cons V15615 ()))))))
(defun shen.hat () 94)
(defun shen.newline () 10)
(defun shen.carriage-return () 13)
(defun tc (V15622) (cond ((= + V15622) (set shen.*tc* true)) ((= - V15622) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))
(defun shen.prompt () (if (value shen.*tc*) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))
(defun shen.toplevel (V15624) (shen.toplevel_evaluate V15624 (value shen.*tc*)))
(defun shen.find-past-inputs (V15627 V15628) (let F (shen.find V15627 V15628) (if (empty? F) (simple-error "input not found
") F)))
(defun shen.make-key (V15631 V15632) (let Atom (hd (compile (lambda X (shen.<st_input> X)) V15631 (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
"))))) (if (integer? Atom) (lambda X (= X (nth (+ Atom 1) (reverse V15632)))) (lambda X (shen.prefix? V15631 (shen.trim-gubbins (snd X)))))))
(defun shen.trim-gubbins (V15634) (cond ((and (cons? V15634) (= (hd V15634) (shen.space))) (shen.trim-gubbins (tl V15634))) ((and (cons? V15634) (= (hd V15634) (shen.newline))) (shen.trim-gubbins (tl V15634))) ((and (cons? V15634) (= (hd V15634) (shen.carriage-return))) (shen.trim-gubbins (tl V15634))) ((and (cons? V15634) (= (hd V15634) (shen.tab))) (shen.trim-gubbins (tl V15634))) ((and (cons? V15634) (= (hd V15634) (shen.left-round))) (shen.trim-gubbins (tl V15634))) (true V15634)))
(defun shen.space () 32)
(defun shen.tab () 9)
(defun shen.left-round () 40)
(defun shen.find (V15643 V15644) (cond ((= () V15644) ()) ((and (cons? V15644) (V15643 (hd V15644))) (cons (hd V15644) (shen.find V15643 (tl V15644)))) ((cons? V15644) (shen.find V15643 (tl V15644))) (true (shen.f_error shen.find))))
(defun shen.prefix? (V15658 V15659) (cond ((= () V15658) true) ((and (cons? V15658) (and (cons? V15659) (= (hd V15659) (hd V15658)))) (shen.prefix? (tl V15658) (tl V15659))) (true false)))
(defun shen.print-past-inputs (V15671 V15672 V15673) (cond ((= () V15672) _) ((and (cons? V15672) (not (V15671 (hd V15672)))) (shen.print-past-inputs V15671 (tl V15672) (+ V15673 1))) ((and (cons? V15672) (tuple? (hd V15672))) (do (shen.prhush (shen.app V15673 ". " shen.a) (stoutput)) (do (shen.prbytes (snd (hd V15672))) (shen.print-past-inputs V15671 (tl V15672) (+ V15673 1))))) (true (shen.f_error shen.print-past-inputs))))
(defun shen.toplevel_evaluate (V15676 V15677) (cond ((and (cons? V15676) (and (cons? (tl V15676)) (and (= : (hd (tl V15676))) (and (cons? (tl (tl V15676))) (and (= () (tl (tl (tl V15676)))) (= true V15677)))))) (shen.typecheck-and-evaluate (hd V15676) (hd (tl (tl V15676))))) ((and (cons? V15676) (cons? (tl V15676))) (do (shen.toplevel_evaluate (cons (hd V15676) ()) V15677) (do (nl 1) (shen.toplevel_evaluate (tl V15676) V15677)))) ((and (cons? V15676) (and (= () (tl V15676)) (= true V15677))) (shen.typecheck-and-evaluate (hd V15676) (gensym A))) ((and (cons? V15676) (and (= () (tl V15676)) (= false V15677))) (let Eval (shen.eval-without-macros (hd V15676)) (print Eval))) (true (shen.f_error shen.toplevel_evaluate))))
(defun shen.typecheck-and-evaluate (V15680 V15681) (let Typecheck (shen.typecheck V15680 V15681) (if (= Typecheck false) (simple-error "type error
") (let Eval (shen.eval-without-macros V15680) (let Type (shen.pretty-type Typecheck) (shen.prhush (shen.app Eval (cn " : " (shen.app Type "" shen.r)) shen.s) (stoutput)))))))
(defun shen.pretty-type (V15683) (shen.mult_subst (value shen.*alphabet*) (shen.extract-pvars V15683) V15683))
(defun shen.extract-pvars (V15689) (cond ((shen.pvar? V15689) (cons V15689 ())) ((cons? V15689) (union (shen.extract-pvars (hd V15689)) (shen.extract-pvars (tl V15689)))) (true ())))
(defun shen.mult_subst (V15697 V15698 V15699) (cond ((= () V15697) V15699) ((= () V15698) V15699) ((and (cons? V15697) (cons? V15698)) (shen.mult_subst (tl V15697) (tl V15698) (subst (hd V15697) (hd V15698) V15699))) (true (shen.f_error shen.mult_subst))))
(defun shen.shen->kl (V13104 V13105) (compile (lambda X (shen.<define> X)) (cons V13104 V13105) (lambda X (shen.shen-syntax-error V13104 X))))
(defun shen.shen-syntax-error (V13112 V13113) (cond ((cons? V13113) (simple-error (cn "syntax error in " (shen.app V13112 (cn " here:

 " (shen.app (shen.next-50 50 (hd V13113)) "
" shen.a)) shen.a)))) (true (simple-error (cn "syntax error in " (shen.app V13112 "
" shen.a))))))
(defun shen.<define> (V13115) (let YaccParse (let Parse_shen.<name> (shen.<name> V13115) (if (not (= (fail) Parse_shen.<name>)) (let Parse_shen.<signature> (shen.<signature> Parse_shen.<name>) (if (not (= (fail) Parse_shen.<signature>)) (let Parse_shen.<rules> (shen.<rules> Parse_shen.<signature>) (if (not (= (fail) Parse_shen.<rules>)) (shen.pair (hd Parse_shen.<rules>) (shen.compile_to_machine_code (shen.hdtl Parse_shen.<name>) (shen.hdtl Parse_shen.<rules>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<name> (shen.<name> V13115) (if (not (= (fail) Parse_shen.<name>)) (let Parse_shen.<rules> (shen.<rules> Parse_shen.<name>) (if (not (= (fail) Parse_shen.<rules>)) (shen.pair (hd Parse_shen.<rules>) (shen.compile_to_machine_code (shen.hdtl Parse_shen.<name>) (shen.hdtl Parse_shen.<rules>))) (fail))) (fail))) YaccParse)))
(defun shen.<name> (V13117) (if (cons? (hd V13117)) (let Parse_X (hd (hd V13117)) (shen.pair (hd (shen.pair (tl (hd V13117)) (shen.hdtl V13117))) (if (and (symbol? Parse_X) (not (shen.sysfunc? Parse_X))) Parse_X (simple-error (shen.app Parse_X " is not a legitimate function name.
" shen.a))))) (fail)))
(defun shen.sysfunc? (V13119) (element? V13119 (get (intern "shen") shen.external-symbols (value *property-vector*))))
(defun shen.<signature> (V13121) (if (and (cons? (hd V13121)) (= { (hd (hd V13121)))) (let Parse_shen.<signature-help> (shen.<signature-help> (shen.pair (tl (hd V13121)) (shen.hdtl V13121))) (if (not (= (fail) Parse_shen.<signature-help>)) (if (and (cons? (hd Parse_shen.<signature-help>)) (= } (hd (hd Parse_shen.<signature-help>)))) (shen.pair (hd (shen.pair (tl (hd Parse_shen.<signature-help>)) (shen.hdtl Parse_shen.<signature-help>))) (shen.demodulate (shen.curry-type (shen.hdtl Parse_shen.<signature-help>)))) (fail)) (fail))) (fail)))
(defun shen.curry-type (V13123) (cond ((and (cons? V13123) (and (cons? (tl V13123)) (and (= --> (hd (tl V13123))) (and (cons? (tl (tl V13123))) (and (cons? (tl (tl (tl V13123)))) (= --> (hd (tl (tl (tl V13123)))))))))) (shen.curry-type (cons (hd V13123) (cons --> (cons (tl (tl V13123)) ()))))) ((and (cons? V13123) (and (cons? (tl V13123)) (and (= * (hd (tl V13123))) (and (cons? (tl (tl V13123))) (and (cons? (tl (tl (tl V13123)))) (= * (hd (tl (tl (tl V13123)))))))))) (shen.curry-type (cons (hd V13123) (cons * (cons (tl (tl V13123)) ()))))) ((cons? V13123) (map (lambda Z (shen.curry-type Z)) V13123)) (true V13123)))
(defun shen.<signature-help> (V13125) (let YaccParse (if (cons? (hd V13125)) (let Parse_X (hd (hd V13125)) (let Parse_shen.<signature-help> (shen.<signature-help> (shen.pair (tl (hd V13125)) (shen.hdtl V13125))) (if (not (= (fail) Parse_shen.<signature-help>)) (if (not (element? Parse_X (cons { (cons } ())))) (shen.pair (hd Parse_shen.<signature-help>) (cons Parse_X (shen.hdtl Parse_shen.<signature-help>))) (fail)) (fail)))) (fail)) (if (= YaccParse (fail)) (let Parse_<e> (<e> V13125) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))
(defun shen.<rules> (V13127) (let YaccParse (let Parse_shen.<rule> (shen.<rule> V13127) (if (not (= (fail) Parse_shen.<rule>)) (let Parse_shen.<rules> (shen.<rules> Parse_shen.<rule>) (if (not (= (fail) Parse_shen.<rules>)) (shen.pair (hd Parse_shen.<rules>) (cons (shen.linearise (shen.hdtl Parse_shen.<rule>)) (shen.hdtl Parse_shen.<rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<rule> (shen.<rule> V13127) (if (not (= (fail) Parse_shen.<rule>)) (shen.pair (hd Parse_shen.<rule>) (cons (shen.linearise (shen.hdtl Parse_shen.<rule>)) ())) (fail))) YaccParse)))
(defun shen.<rule> (V13129) (let YaccParse (let Parse_shen.<patterns> (shen.<patterns> V13129) (if (not (= (fail) Parse_shen.<patterns>)) (if (and (cons? (hd Parse_shen.<patterns>)) (= -> (hd (hd Parse_shen.<patterns>)))) (let Parse_shen.<action> (shen.<action> (shen.pair (tl (hd Parse_shen.<patterns>)) (shen.hdtl Parse_shen.<patterns>))) (if (not (= (fail) Parse_shen.<action>)) (if (and (cons? (hd Parse_shen.<action>)) (= where (hd (hd Parse_shen.<action>)))) (let Parse_shen.<guard> (shen.<guard> (shen.pair (tl (hd Parse_shen.<action>)) (shen.hdtl Parse_shen.<action>))) (if (not (= (fail) Parse_shen.<guard>)) (shen.pair (hd Parse_shen.<guard>) (cons (shen.hdtl Parse_shen.<patterns>) (cons (cons where (cons (shen.hdtl Parse_shen.<guard>) (cons (shen.hdtl Parse_shen.<action>) ()))) ()))) (fail))) (fail)) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<patterns> (shen.<patterns> V13129) (if (not (= (fail) Parse_shen.<patterns>)) (if (and (cons? (hd Parse_shen.<patterns>)) (= -> (hd (hd Parse_shen.<patterns>)))) (let Parse_shen.<action> (shen.<action> (shen.pair (tl (hd Parse_shen.<patterns>)) (shen.hdtl Parse_shen.<patterns>))) (if (not (= (fail) Parse_shen.<action>)) (shen.pair (hd Parse_shen.<action>) (cons (shen.hdtl Parse_shen.<patterns>) (cons (shen.hdtl Parse_shen.<action>) ()))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<patterns> (shen.<patterns> V13129) (if (not (= (fail) Parse_shen.<patterns>)) (if (and (cons? (hd Parse_shen.<patterns>)) (= <- (hd (hd Parse_shen.<patterns>)))) (let Parse_shen.<action> (shen.<action> (shen.pair (tl (hd Parse_shen.<patterns>)) (shen.hdtl Parse_shen.<patterns>))) (if (not (= (fail) Parse_shen.<action>)) (if (and (cons? (hd Parse_shen.<action>)) (= where (hd (hd Parse_shen.<action>)))) (let Parse_shen.<guard> (shen.<guard> (shen.pair (tl (hd Parse_shen.<action>)) (shen.hdtl Parse_shen.<action>))) (if (not (= (fail) Parse_shen.<guard>)) (shen.pair (hd Parse_shen.<guard>) (cons (shen.hdtl Parse_shen.<patterns>) (cons (cons where (cons (shen.hdtl Parse_shen.<guard>) (cons (cons shen.choicepoint! (cons (shen.hdtl Parse_shen.<action>) ())) ()))) ()))) (fail))) (fail)) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<patterns> (shen.<patterns> V13129) (if (not (= (fail) Parse_shen.<patterns>)) (if (and (cons? (hd Parse_shen.<patterns>)) (= <- (hd (hd Parse_shen.<patterns>)))) (let Parse_shen.<action> (shen.<action> (shen.pair (tl (hd Parse_shen.<patterns>)) (shen.hdtl Parse_shen.<patterns>))) (if (not (= (fail) Parse_shen.<action>)) (shen.pair (hd Parse_shen.<action>) (cons (shen.hdtl Parse_shen.<patterns>) (cons (cons shen.choicepoint! (cons (shen.hdtl Parse_shen.<action>) ())) ()))) (fail))) (fail)) (fail))) YaccParse)) YaccParse)) YaccParse)))
(defun shen.fail_if (V13132 V13133) (if (V13132 V13133) (fail) V13133))
(defun shen.succeeds? (V13139) (cond ((= V13139 (fail)) false) (true true)))
(defun shen.<patterns> (V13141) (let YaccParse (let Parse_shen.<pattern> (shen.<pattern> V13141) (if (not (= (fail) Parse_shen.<pattern>)) (let Parse_shen.<patterns> (shen.<patterns> Parse_shen.<pattern>) (if (not (= (fail) Parse_shen.<patterns>)) (shen.pair (hd Parse_shen.<patterns>) (cons (shen.hdtl Parse_shen.<pattern>) (shen.hdtl Parse_shen.<patterns>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V13141) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))
(defun shen.<pattern> (V13148) (let YaccParse (if (and (cons? (hd V13148)) (cons? (hd (hd V13148)))) (if (and (cons? (hd (shen.pair (hd (hd V13148)) (hd (tl V13148))))) (= @p (hd (hd (shen.pair (hd (hd V13148)) (hd (tl V13148))))))) (let Parse_shen.<pattern1> (shen.<pattern1> (shen.pair (tl (hd (shen.pair (hd (hd V13148)) (hd (tl V13148))))) (shen.hdtl (shen.pair (hd (hd V13148)) (hd (tl V13148)))))) (if (not (= (fail) Parse_shen.<pattern1>)) (let Parse_shen.<pattern2> (shen.<pattern2> Parse_shen.<pattern1>) (if (not (= (fail) Parse_shen.<pattern2>)) (shen.pair (hd (shen.pair (tl (hd V13148)) (hd (tl V13148)))) (cons @p (cons (shen.hdtl Parse_shen.<pattern1>) (cons (shen.hdtl Parse_shen.<pattern2>) ())))) (fail))) (fail))) (fail)) (fail)) (if (= YaccParse (fail)) (let YaccParse (if (and (cons? (hd V13148)) (cons? (hd (hd V13148)))) (if (and (cons? (hd (shen.pair (hd (hd V13148)) (hd (tl V13148))))) (= cons (hd (hd (shen.pair (hd (hd V13148)) (hd (tl V13148))))))) (let Parse_shen.<pattern1> (shen.<pattern1> (shen.pair (tl (hd (shen.pair (hd (hd V13148)) (hd (tl V13148))))) (shen.hdtl (shen.pair (hd (hd V13148)) (hd (tl V13148)))))) (if (not (= (fail) Parse_shen.<pattern1>)) (let Parse_shen.<pattern2> (shen.<pattern2> Parse_shen.<pattern1>) (if (not (= (fail) Parse_shen.<pattern2>)) (shen.pair (hd (shen.pair (tl (hd V13148)) (hd (tl V13148)))) (cons cons (cons (shen.hdtl Parse_shen.<pattern1>) (cons (shen.hdtl Parse_shen.<pattern2>) ())))) (fail))) (fail))) (fail)) (fail)) (if (= YaccParse (fail)) (let YaccParse (if (and (cons? (hd V13148)) (cons? (hd (hd V13148)))) (if (and (cons? (hd (shen.pair (hd (hd V13148)) (hd (tl V13148))))) (= @v (hd (hd (shen.pair (hd (hd V13148)) (hd (tl V13148))))))) (let Parse_shen.<pattern1> (shen.<pattern1> (shen.pair (tl (hd (shen.pair (hd (hd V13148)) (hd (tl V13148))))) (shen.hdtl (shen.pair (hd (hd V13148)) (hd (tl V13148)))))) (if (not (= (fail) Parse_shen.<pattern1>)) (let Parse_shen.<pattern2> (shen.<pattern2> Parse_shen.<pattern1>) (if (not (= (fail) Parse_shen.<pattern2>)) (shen.pair (hd (shen.pair (tl (hd V13148)) (hd (tl V13148)))) (cons @v (cons (shen.hdtl Parse_shen.<pattern1>) (cons (shen.hdtl Parse_shen.<pattern2>) ())))) (fail))) (fail))) (fail)) (fail)) (if (= YaccParse (fail)) (let YaccParse (if (and (cons? (hd V13148)) (cons? (hd (hd V13148)))) (if (and (cons? (hd (shen.pair (hd (hd V13148)) (hd (tl V13148))))) (= @s (hd (hd (shen.pair (hd (hd V13148)) (hd (tl V13148))))))) (let Parse_shen.<pattern1> (shen.<pattern1> (shen.pair (tl (hd (shen.pair (hd (hd V13148)) (hd (tl V13148))))) (shen.hdtl (shen.pair (hd (hd V13148)) (hd (tl V13148)))))) (if (not (= (fail) Parse_shen.<pattern1>)) (let Parse_shen.<pattern2> (shen.<pattern2> Parse_shen.<pattern1>) (if (not (= (fail) Parse_shen.<pattern2>)) (shen.pair (hd (shen.pair (tl (hd V13148)) (hd (tl V13148)))) (cons @s (cons (shen.hdtl Parse_shen.<pattern1>) (cons (shen.hdtl Parse_shen.<pattern2>) ())))) (fail))) (fail))) (fail)) (fail)) (if (= YaccParse (fail)) (let YaccParse (if (and (cons? (hd V13148)) (cons? (hd (hd V13148)))) (if (and (cons? (hd (shen.pair (hd (hd V13148)) (hd (tl V13148))))) (= vector (hd (hd (shen.pair (hd (hd V13148)) (hd (tl V13148))))))) (if (and (cons? (hd (shen.pair (tl (hd (shen.pair (hd (hd V13148)) (hd (tl V13148))))) (shen.hdtl (shen.pair (hd (hd V13148)) (hd (tl V13148))))))) (= 0 (hd (hd (shen.pair (tl (hd (shen.pair (hd (hd V13148)) (hd (tl V13148))))) (shen.hdtl (shen.pair (hd (hd V13148)) (hd (tl V13148))))))))) (shen.pair (hd (shen.pair (tl (hd V13148)) (hd (tl V13148)))) (cons vector (cons 0 ()))) (fail)) (fail)) (fail)) (if (= YaccParse (fail)) (let YaccParse (if (cons? (hd V13148)) (let Parse_X (hd (hd V13148)) (if (cons? Parse_X) (shen.pair (hd (shen.pair (tl (hd V13148)) (shen.hdtl V13148))) (shen.constructor-error Parse_X)) (fail))) (fail)) (if (= YaccParse (fail)) (let Parse_shen.<simple_pattern> (shen.<simple_pattern> V13148) (if (not (= (fail) Parse_shen.<simple_pattern>)) (shen.pair (hd Parse_shen.<simple_pattern>) (shen.hdtl Parse_shen.<simple_pattern>)) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))
(defun shen.constructor-error (V13150) (simple-error (shen.app V13150 " is not a legitimate constructor
" shen.a)))
(defun shen.<simple_pattern> (V13152) (let YaccParse (if (cons? (hd V13152)) (let Parse_X (hd (hd V13152)) (if (= Parse_X _) (shen.pair (hd (shen.pair (tl (hd V13152)) (shen.hdtl V13152))) (gensym Parse_Y)) (fail))) (fail)) (if (= YaccParse (fail)) (if (cons? (hd V13152)) (let Parse_X (hd (hd V13152)) (if (not (element? Parse_X (cons -> (cons <- ())))) (shen.pair (hd (shen.pair (tl (hd V13152)) (shen.hdtl V13152))) Parse_X) (fail))) (fail)) YaccParse)))
(defun shen.<pattern1> (V13154) (let Parse_shen.<pattern> (shen.<pattern> V13154) (if (not (= (fail) Parse_shen.<pattern>)) (shen.pair (hd Parse_shen.<pattern>) (shen.hdtl Parse_shen.<pattern>)) (fail))))
(defun shen.<pattern2> (V13156) (let Parse_shen.<pattern> (shen.<pattern> V13156) (if (not (= (fail) Parse_shen.<pattern>)) (shen.pair (hd Parse_shen.<pattern>) (shen.hdtl Parse_shen.<pattern>)) (fail))))
(defun shen.<action> (V13158) (if (cons? (hd V13158)) (let Parse_X (hd (hd V13158)) (shen.pair (hd (shen.pair (tl (hd V13158)) (shen.hdtl V13158))) Parse_X)) (fail)))
(defun shen.<guard> (V13160) (if (cons? (hd V13160)) (let Parse_X (hd (hd V13160)) (shen.pair (hd (shen.pair (tl (hd V13160)) (shen.hdtl V13160))) Parse_X)) (fail)))
(defun shen.compile_to_machine_code (V13163 V13164) (let Lambda+ (shen.compile_to_lambda+ V13163 V13164) (let KL (shen.compile_to_kl V13163 Lambda+) (let Record (shen.record-source V13163 KL) KL))))
(defun shen.record-source (V13169 V13170) (cond ((value shen.*installing-kl*) shen.skip) (true (put V13169 shen.source V13170 (value *property-vector*)))))
(defun shen.compile_to_lambda+ (V13173 V13174) (let Arity (shen.aritycheck V13173 V13174) (let UpDateSymbolTable (shen.update-symbol-table V13173 Arity) (let Free (map (lambda Rule (shen.free_variable_check V13173 Rule)) V13174) (let Variables (shen.parameters Arity) (let Strip (map (lambda X (shen.strip-protect X)) V13174) (let Abstractions (map (lambda X (shen.abstract_rule X)) Strip) (let Applications (map (lambda X (shen.application_build Variables X)) Abstractions) (cons Variables (cons Applications ()))))))))))
(defun shen.update-symbol-table (V13177 V13178) (set shen.*symbol-table* (shen.update-symbol-table-h V13177 V13178 (value shen.*symbol-table*) ())))
(defun shen.update-symbol-table-h (V13186 V13187 V13188 V13189) (cond ((= () V13188) (let NewEntry (cons V13186 (eval-kl (shen.lambda-form V13186 V13187))) (cons NewEntry V13189))) ((and (cons? V13188) (and (cons? (hd V13188)) (= (hd (hd V13188)) V13186))) (let ChangedEntry (cons (hd (hd V13188)) (eval-kl (shen.lambda-form (hd (hd V13188)) V13187))) (append (tl V13188) (cons ChangedEntry V13189)))) ((cons? V13188) (shen.update-symbol-table-h V13186 V13187 (tl V13188) (cons (hd V13188) V13189))) (true (shen.f_error shen.update-symbol-table-h))))
(defun shen.free_variable_check (V13192 V13193) (cond ((and (cons? V13193) (and (cons? (tl V13193)) (= () (tl (tl V13193))))) (let Bound (shen.extract_vars (hd V13193)) (let Free (shen.extract_free_vars Bound (hd (tl V13193))) (shen.free_variable_warnings V13192 Free)))) (true (shen.f_error shen.free_variable_check))))
(defun shen.extract_vars (V13195) (cond ((variable? V13195) (cons V13195 ())) ((cons? V13195) (union (shen.extract_vars (hd V13195)) (shen.extract_vars (tl V13195)))) (true ())))
(defun shen.extract_free_vars (V13207 V13208) (cond ((and (cons? V13208) (and (cons? (tl V13208)) (and (= () (tl (tl V13208))) (= (hd V13208) protect)))) ()) ((and (variable? V13208) (not (element? V13208 V13207))) (cons V13208 ())) ((and (cons? V13208) (and (= lambda (hd V13208)) (and (cons? (tl V13208)) (and (cons? (tl (tl V13208))) (= () (tl (tl (tl V13208)))))))) (shen.extract_free_vars (cons (hd (tl V13208)) V13207) (hd (tl (tl V13208))))) ((and (cons? V13208) (and (= let (hd V13208)) (and (cons? (tl V13208)) (and (cons? (tl (tl V13208))) (and (cons? (tl (tl (tl V13208)))) (= () (tl (tl (tl (tl V13208)))))))))) (union (shen.extract_free_vars V13207 (hd (tl (tl V13208)))) (shen.extract_free_vars (cons (hd (tl V13208)) V13207) (hd (tl (tl (tl V13208))))))) ((cons? V13208) (union (shen.extract_free_vars V13207 (hd V13208)) (shen.extract_free_vars V13207 (tl V13208)))) (true ())))
(defun shen.free_variable_warnings (V13213 V13214) (cond ((= () V13214) _) (true (simple-error (cn "error: the following variables are free in " (shen.app V13213 (cn ": " (shen.app (shen.list_variables V13214) "" shen.a)) shen.a))))))
(defun shen.list_variables (V13216) (cond ((and (cons? V13216) (= () (tl V13216))) (cn (str (hd V13216)) ".")) ((cons? V13216) (cn (str (hd V13216)) (cn ", " (shen.list_variables (tl V13216))))) (true (shen.f_error shen.list_variables))))
(defun shen.strip-protect (V13218) (cond ((and (cons? V13218) (and (cons? (tl V13218)) (and (= () (tl (tl V13218))) (= (hd V13218) protect)))) (shen.strip-protect (hd (tl V13218)))) ((cons? V13218) (map (lambda Z (shen.strip-protect Z)) V13218)) (true V13218)))
(defun shen.linearise (V13220) (cond ((and (cons? V13220) (and (cons? (tl V13220)) (= () (tl (tl V13220))))) (shen.linearise_help (shen.flatten (hd V13220)) (hd V13220) (hd (tl V13220)))) (true (shen.f_error shen.linearise))))
(defun shen.flatten (V13222) (cond ((= () V13222) ()) ((cons? V13222) (append (shen.flatten (hd V13222)) (shen.flatten (tl V13222)))) (true (cons V13222 ()))))
(defun shen.linearise_help (V13226 V13227 V13228) (cond ((= () V13226) (cons V13227 (cons V13228 ()))) ((cons? V13226) (if (and (variable? (hd V13226)) (element? (hd V13226) (tl V13226))) (let Var (gensym (hd V13226)) (let NewAction (cons where (cons (cons = (cons (hd V13226) (cons Var ()))) (cons V13228 ()))) (let NewPatts (shen.linearise_X (hd V13226) Var V13227) (shen.linearise_help (tl V13226) NewPatts NewAction)))) (shen.linearise_help (tl V13226) V13227 V13228))) (true (shen.f_error shen.linearise_help))))
(defun shen.linearise_X (V13241 V13242 V13243) (cond ((= V13243 V13241) V13242) ((cons? V13243) (let L (shen.linearise_X V13241 V13242 (hd V13243)) (if (= L (hd V13243)) (cons (hd V13243) (shen.linearise_X V13241 V13242 (tl V13243))) (cons L (tl V13243))))) (true V13243)))
(defun shen.aritycheck (V13246 V13247) (cond ((and (cons? V13247) (and (cons? (hd V13247)) (and (cons? (tl (hd V13247))) (and (= () (tl (tl (hd V13247)))) (= () (tl V13247)))))) (do (shen.aritycheck-action (hd (tl (hd V13247)))) (shen.aritycheck-name V13246 (arity V13246) (length (hd (hd V13247)))))) ((and (cons? V13247) (and (cons? (hd V13247)) (and (cons? (tl (hd V13247))) (and (= () (tl (tl (hd V13247)))) (and (cons? (tl V13247)) (and (cons? (hd (tl V13247))) (and (cons? (tl (hd (tl V13247)))) (= () (tl (tl (hd (tl V13247)))))))))))) (if (= (length (hd (hd V13247))) (length (hd (hd (tl V13247))))) (do (shen.aritycheck-action (hd (tl (hd V13247)))) (shen.aritycheck V13246 (tl V13247))) (simple-error (cn "arity error in " (shen.app V13246 "
" shen.a))))) (true (shen.f_error shen.aritycheck))))
(defun shen.aritycheck-name (V13260 V13261 V13262) (cond ((= -1 V13261) V13262) ((= V13262 V13261) V13262) (true (do (shen.prhush (cn "
warning: changing the arity of " (shen.app V13260 " can cause errors.
" shen.a)) (stoutput)) V13262))))
(defun shen.aritycheck-action (V13268) (cond ((cons? V13268) (do (shen.aah (hd V13268) (tl V13268)) (map (lambda Y (shen.aritycheck-action Y)) V13268))) (true shen.skip)))
(defun shen.aah (V13271 V13272) (let Arity (arity V13271) (let Len (length V13272) (if (and (> Arity -1) (> Len Arity)) (shen.prhush (cn "warning: " (shen.app V13271 (cn " might not like " (shen.app Len (cn " argument" (shen.app (if (> Len 1) "s" "") ".
" shen.a)) shen.a)) shen.a)) (stoutput)) shen.skip))))
(defun shen.abstract_rule (V13274) (cond ((and (cons? V13274) (and (cons? (tl V13274)) (= () (tl (tl V13274))))) (shen.abstraction_build (hd V13274) (hd (tl V13274)))) (true (shen.f_error shen.abstract_rule))))
(defun shen.abstraction_build (V13277 V13278) (cond ((= () V13277) V13278) ((cons? V13277) (cons /. (cons (hd V13277) (cons (shen.abstraction_build (tl V13277) V13278) ())))) (true (shen.f_error shen.abstraction_build))))
(defun shen.parameters (V13280) (cond ((= 0 V13280) ()) (true (cons (gensym V) (shen.parameters (- V13280 1))))))
(defun shen.application_build (V13283 V13284) (cond ((= () V13283) V13284) ((cons? V13283) (shen.application_build (tl V13283) (cons V13284 (cons (hd V13283) ())))) (true (shen.f_error shen.application_build))))
(defun shen.compile_to_kl (V13287 V13288) (cond ((and (cons? V13288) (and (cons? (tl V13288)) (= () (tl (tl V13288))))) (let Arity (shen.store-arity V13287 (length (hd V13288))) (let Reduce (map (lambda X (shen.reduce X)) (hd (tl V13288))) (let CondExpression (shen.cond-expression V13287 (hd V13288) Reduce) (let TypeTable (if (value shen.*optimise*) (shen.typextable (shen.get-type V13287) (hd V13288)) shen.skip) (let TypedCondExpression (if (value shen.*optimise*) (shen.assign-types (hd V13288) TypeTable CondExpression) CondExpression) (let KL (cons defun (cons V13287 (cons (hd V13288) (cons TypedCondExpression ())))) KL))))))) (true (shen.f_error shen.compile_to_kl))))
(defun shen.get-type (V13294) (cond ((cons? V13294) shen.skip) (true (let FType (assoc V13294 (value shen.*signedfuncs*)) (if (empty? FType) shen.skip (tl FType))))))
(defun shen.typextable (V13305 V13306) (cond ((and (cons? V13305) (and (cons? (tl V13305)) (and (= --> (hd (tl V13305))) (and (cons? (tl (tl V13305))) (and (= () (tl (tl (tl V13305)))) (cons? V13306)))))) (if (variable? (hd V13305)) (shen.typextable (hd (tl (tl V13305))) (tl V13306)) (cons (cons (hd V13306) (hd V13305)) (shen.typextable (hd (tl (tl V13305))) (tl V13306))))) (true ())))
(defun shen.assign-types (V13310 V13311 V13312) (cond ((and (cons? V13312) (and (= let (hd V13312)) (and (cons? (tl V13312)) (and (cons? (tl (tl V13312))) (and (cons? (tl (tl (tl V13312)))) (= () (tl (tl (tl (tl V13312)))))))))) (cons let (cons (hd (tl V13312)) (cons (shen.assign-types V13310 V13311 (hd (tl (tl V13312)))) (cons (shen.assign-types (cons (hd (tl V13312)) V13310) V13311 (hd (tl (tl (tl V13312))))) ()))))) ((and (cons? V13312) (and (= lambda (hd V13312)) (and (cons? (tl V13312)) (and (cons? (tl (tl V13312))) (= () (tl (tl (tl V13312)))))))) (cons lambda (cons (hd (tl V13312)) (cons (shen.assign-types (cons (hd (tl V13312)) V13310) V13311 (hd (tl (tl V13312)))) ())))) ((and (cons? V13312) (= cond (hd V13312))) (cons cond (map (lambda Y (cons (shen.assign-types V13310 V13311 (hd Y)) (cons (shen.assign-types V13310 V13311 (hd (tl Y))) ()))) (tl V13312)))) ((cons? V13312) (let NewTable (shen.typextable (shen.get-type (hd V13312)) (tl V13312)) (cons (hd V13312) (map (lambda Y (shen.assign-types V13310 (append V13311 NewTable) Y)) (tl V13312))))) (true (let AtomType (assoc V13312 V13311) (if (cons? AtomType) (cons type (cons V13312 (cons (tl AtomType) ()))) (if (element? V13312 V13310) V13312 (shen.atom-type V13312)))))))
(defun shen.atom-type (V13314) (if (string? V13314) (cons type (cons V13314 (cons string ()))) (if (number? V13314) (cons type (cons V13314 (cons number ()))) (if (boolean? V13314) (cons type (cons V13314 (cons boolean ()))) (if (symbol? V13314) (cons type (cons V13314 (cons symbol ()))) V13314)))))
(defun shen.store-arity (V13319 V13320) (cond ((value shen.*installing-kl*) shen.skip) (true (put V13319 arity V13320 (value *property-vector*)))))
(defun shen.reduce (V13322) (do (set shen.*teststack* ()) (let Result (shen.reduce_help V13322) (cons (cons : (cons shen.tests (reverse (value shen.*teststack*)))) (cons Result ())))))
(defun shen.reduce_help (V13324) (cond ((and (cons? V13324) (and (cons? (hd V13324)) (and (= /. (hd (hd V13324))) (and (cons? (tl (hd V13324))) (and (cons? (hd (tl (hd V13324)))) (and (= cons (hd (hd (tl (hd V13324))))) (and (cons? (tl (hd (tl (hd V13324))))) (and (cons? (tl (tl (hd (tl (hd V13324)))))) (and (= () (tl (tl (tl (hd (tl (hd V13324))))))) (and (cons? (tl (tl (hd V13324)))) (and (= () (tl (tl (tl (hd V13324))))) (and (cons? (tl V13324)) (= () (tl (tl V13324))))))))))))))) (do (shen.add_test (cons cons? (tl V13324))) (let Abstraction (cons /. (cons (hd (tl (hd (tl (hd V13324))))) (cons (cons /. (cons (hd (tl (tl (hd (tl (hd V13324)))))) (cons (shen.ebr (hd (tl V13324)) (hd (tl (hd V13324))) (hd (tl (tl (hd V13324))))) ()))) ()))) (let Application (cons (cons Abstraction (cons (cons hd (tl V13324)) ())) (cons (cons tl (tl V13324)) ())) (shen.reduce_help Application))))) ((and (cons? V13324) (and (cons? (hd V13324)) (and (= /. (hd (hd V13324))) (and (cons? (tl (hd V13324))) (and (cons? (hd (tl (hd V13324)))) (and (= @p (hd (hd (tl (hd V13324))))) (and (cons? (tl (hd (tl (hd V13324))))) (and (cons? (tl (tl (hd (tl (hd V13324)))))) (and (= () (tl (tl (tl (hd (tl (hd V13324))))))) (and (cons? (tl (tl (hd V13324)))) (and (= () (tl (tl (tl (hd V13324))))) (and (cons? (tl V13324)) (= () (tl (tl V13324))))))))))))))) (do (shen.add_test (cons tuple? (tl V13324))) (let Abstraction (cons /. (cons (hd (tl (hd (tl (hd V13324))))) (cons (cons /. (cons (hd (tl (tl (hd (tl (hd V13324)))))) (cons (shen.ebr (hd (tl V13324)) (hd (tl (hd V13324))) (hd (tl (tl (hd V13324))))) ()))) ()))) (let Application (cons (cons Abstraction (cons (cons fst (tl V13324)) ())) (cons (cons snd (tl V13324)) ())) (shen.reduce_help Application))))) ((and (cons? V13324) (and (cons? (hd V13324)) (and (= /. (hd (hd V13324))) (and (cons? (tl (hd V13324))) (and (cons? (hd (tl (hd V13324)))) (and (= @v (hd (hd (tl (hd V13324))))) (and (cons? (tl (hd (tl (hd V13324))))) (and (cons? (tl (tl (hd (tl (hd V13324)))))) (and (= () (tl (tl (tl (hd (tl (hd V13324))))))) (and (cons? (tl (tl (hd V13324)))) (and (= () (tl (tl (tl (hd V13324))))) (and (cons? (tl V13324)) (= () (tl (tl V13324))))))))))))))) (do (shen.add_test (cons shen.+vector? (tl V13324))) (let Abstraction (cons /. (cons (hd (tl (hd (tl (hd V13324))))) (cons (cons /. (cons (hd (tl (tl (hd (tl (hd V13324)))))) (cons (shen.ebr (hd (tl V13324)) (hd (tl (hd V13324))) (hd (tl (tl (hd V13324))))) ()))) ()))) (let Application (cons (cons Abstraction (cons (cons hdv (tl V13324)) ())) (cons (cons tlv (tl V13324)) ())) (shen.reduce_help Application))))) ((and (cons? V13324) (and (cons? (hd V13324)) (and (= /. (hd (hd V13324))) (and (cons? (tl (hd V13324))) (and (cons? (hd (tl (hd V13324)))) (and (= @s (hd (hd (tl (hd V13324))))) (and (cons? (tl (hd (tl (hd V13324))))) (and (cons? (tl (tl (hd (tl (hd V13324)))))) (and (= () (tl (tl (tl (hd (tl (hd V13324))))))) (and (cons? (tl (tl (hd V13324)))) (and (= () (tl (tl (tl (hd V13324))))) (and (cons? (tl V13324)) (= () (tl (tl V13324))))))))))))))) (do (shen.add_test (cons shen.+string? (tl V13324))) (let Abstraction (cons /. (cons (hd (tl (hd (tl (hd V13324))))) (cons (cons /. (cons (hd (tl (tl (hd (tl (hd V13324)))))) (cons (shen.ebr (hd (tl V13324)) (hd (tl (hd V13324))) (hd (tl (tl (hd V13324))))) ()))) ()))) (let Application (cons (cons Abstraction (cons (cons pos (cons (hd (tl V13324)) (cons 0 ()))) ())) (cons (cons tlstr (tl V13324)) ())) (shen.reduce_help Application))))) ((and (cons? V13324) (and (cons? (hd V13324)) (and (= /. (hd (hd V13324))) (and (cons? (tl (hd V13324))) (and (cons? (tl (tl (hd V13324)))) (and (= () (tl (tl (tl (hd V13324))))) (and (cons? (tl V13324)) (and (= () (tl (tl V13324))) (not (variable? (hd (tl (hd V13324))))))))))))) (do (shen.add_test (cons = (cons (hd (tl (hd V13324))) (tl V13324)))) (shen.reduce_help (hd (tl (tl (hd V13324))))))) ((and (cons? V13324) (and (cons? (hd V13324)) (and (= /. (hd (hd V13324))) (and (cons? (tl (hd V13324))) (and (cons? (tl (tl (hd V13324)))) (and (= () (tl (tl (tl (hd V13324))))) (and (cons? (tl V13324)) (= () (tl (tl V13324)))))))))) (shen.reduce_help (shen.ebr (hd (tl V13324)) (hd (tl (hd V13324))) (hd (tl (tl (hd V13324))))))) ((and (cons? V13324) (and (= where (hd V13324)) (and (cons? (tl V13324)) (and (cons? (tl (tl V13324))) (= () (tl (tl (tl V13324)))))))) (do (shen.add_test (hd (tl V13324))) (shen.reduce_help (hd (tl (tl V13324)))))) ((and (cons? V13324) (and (cons? (tl V13324)) (= () (tl (tl V13324))))) (let Z (shen.reduce_help (hd V13324)) (if (= (hd V13324) Z) V13324 (shen.reduce_help (cons Z (tl V13324)))))) (true V13324)))
(defun shen.+string? (V13326) (cond ((= "" V13326) false) (true (string? V13326))))
(defun shen.+vector (V13328) (cond ((= V13328 (vector 0)) false) (true (vector? V13328))))
(defun shen.ebr (V13342 V13343 V13344) (cond ((= V13344 V13343) V13342) ((and (cons? V13344) (and (= /. (hd V13344)) (and (cons? (tl V13344)) (and (cons? (tl (tl V13344))) (and (= () (tl (tl (tl V13344)))) (> (occurrences V13343 (hd (tl V13344))) 0)))))) V13344) ((and (cons? V13344) (and (= lambda (hd V13344)) (and (cons? (tl V13344)) (and (cons? (tl (tl V13344))) (and (= () (tl (tl (tl V13344)))) (> (occurrences V13343 (hd (tl V13344))) 0)))))) V13344) ((and (cons? V13344) (and (= let (hd V13344)) (and (cons? (tl V13344)) (and (cons? (tl (tl V13344))) (and (cons? (tl (tl (tl V13344)))) (and (= () (tl (tl (tl (tl V13344))))) (= (hd (tl V13344)) V13343))))))) (cons let (cons (hd (tl V13344)) (cons (shen.ebr V13342 (hd (tl V13344)) (hd (tl (tl V13344)))) (tl (tl (tl V13344))))))) ((cons? V13344) (cons (shen.ebr V13342 V13343 (hd V13344)) (shen.ebr V13342 V13343 (tl V13344)))) (true V13344)))
(defun shen.add_test (V13346) (set shen.*teststack* (cons V13346 (value shen.*teststack*))))
(defun shen.cond-expression (V13350 V13351 V13352) (let Err (shen.err-condition V13350) (let Cases (shen.case-form V13352 Err) (let EncodeChoices (shen.encode-choices Cases V13350) (shen.cond-form EncodeChoices)))))
(defun shen.cond-form (V13356) (cond ((and (cons? V13356) (and (cons? (hd V13356)) (and (= true (hd (hd V13356))) (and (cons? (tl (hd V13356))) (= () (tl (tl (hd V13356)))))))) (hd (tl (hd V13356)))) (true (cons cond V13356))))
(defun shen.encode-choices (V13361 V13362) (cond ((= () V13361) ()) ((and (cons? V13361) (and (cons? (hd V13361)) (and (= true (hd (hd V13361))) (and (cons? (tl (hd V13361))) (and (cons? (hd (tl (hd V13361)))) (and (= shen.choicepoint! (hd (hd (tl (hd V13361))))) (and (cons? (tl (hd (tl (hd V13361))))) (and (= () (tl (tl (hd (tl (hd V13361)))))) (and (= () (tl (tl (hd V13361)))) (= () (tl V13361))))))))))) (cons (cons true (cons (cons let (cons Result (cons (hd (tl (hd (tl (hd V13361))))) (cons (cons if (cons (cons = (cons Result (cons (cons fail ()) ()))) (cons (if (value shen.*installing-kl*) (cons shen.sys-error (cons V13362 ())) (cons shen.f_error (cons V13362 ()))) (cons Result ())))) ())))) ())) ())) ((and (cons? V13361) (and (cons? (hd V13361)) (and (= true (hd (hd V13361))) (and (cons? (tl (hd V13361))) (and (cons? (hd (tl (hd V13361)))) (and (= shen.choicepoint! (hd (hd (tl (hd V13361))))) (and (cons? (tl (hd (tl (hd V13361))))) (and (= () (tl (tl (hd (tl (hd V13361)))))) (= () (tl (tl (hd V13361)))))))))))) (cons (cons true (cons (cons let (cons Result (cons (hd (tl (hd (tl (hd V13361))))) (cons (cons if (cons (cons = (cons Result (cons (cons fail ()) ()))) (cons (shen.cond-form (shen.encode-choices (tl V13361) V13362)) (cons Result ())))) ())))) ())) ())) ((and (cons? V13361) (and (cons? (hd V13361)) (and (cons? (tl (hd V13361))) (and (cons? (hd (tl (hd V13361)))) (and (= shen.choicepoint! (hd (hd (tl (hd V13361))))) (and (cons? (tl (hd (tl (hd V13361))))) (and (= () (tl (tl (hd (tl (hd V13361)))))) (= () (tl (tl (hd V13361))))))))))) (cons (cons true (cons (cons let (cons Freeze (cons (cons freeze (cons (shen.cond-form (shen.encode-choices (tl V13361) V13362)) ())) (cons (cons if (cons (hd (hd V13361)) (cons (cons let (cons Result (cons (hd (tl (hd (tl (hd V13361))))) (cons (cons if (cons (cons = (cons Result (cons (cons fail ()) ()))) (cons (cons thaw (cons Freeze ())) (cons Result ())))) ())))) (cons (cons thaw (cons Freeze ())) ())))) ())))) ())) ())) ((and (cons? V13361) (and (cons? (hd V13361)) (and (cons? (tl (hd V13361))) (= () (tl (tl (hd V13361))))))) (cons (hd V13361) (shen.encode-choices (tl V13361) V13362))) (true (shen.f_error shen.encode-choices))))
(defun shen.case-form (V13369 V13370) (cond ((= () V13369) (cons V13370 ())) ((and (cons? V13369) (and (cons? (hd V13369)) (and (cons? (hd (hd V13369))) (and (= : (hd (hd (hd V13369)))) (and (cons? (tl (hd (hd V13369)))) (and (= shen.tests (hd (tl (hd (hd V13369))))) (and (= () (tl (tl (hd (hd V13369))))) (and (cons? (tl (hd V13369))) (and (cons? (hd (tl (hd V13369)))) (and (= shen.choicepoint! (hd (hd (tl (hd V13369))))) (and (cons? (tl (hd (tl (hd V13369))))) (and (= () (tl (tl (hd (tl (hd V13369)))))) (= () (tl (tl (hd V13369)))))))))))))))) (cons (cons true (tl (hd V13369))) (shen.case-form (tl V13369) V13370))) ((and (cons? V13369) (and (cons? (hd V13369)) (and (cons? (hd (hd V13369))) (and (= : (hd (hd (hd V13369)))) (and (cons? (tl (hd (hd V13369)))) (and (= shen.tests (hd (tl (hd (hd V13369))))) (and (= () (tl (tl (hd (hd V13369))))) (and (cons? (tl (hd V13369))) (= () (tl (tl (hd V13369)))))))))))) (cons (cons true (tl (hd V13369))) ())) ((and (cons? V13369) (and (cons? (hd V13369)) (and (cons? (hd (hd V13369))) (and (= : (hd (hd (hd V13369)))) (and (cons? (tl (hd (hd V13369)))) (and (= shen.tests (hd (tl (hd (hd V13369))))) (and (cons? (tl (hd V13369))) (= () (tl (tl (hd V13369))))))))))) (cons (cons (shen.embed-and (tl (tl (hd (hd V13369))))) (tl (hd V13369))) (shen.case-form (tl V13369) V13370))) (true (shen.f_error shen.case-form))))
(defun shen.embed-and (V13372) (cond ((and (cons? V13372) (= () (tl V13372))) (hd V13372)) ((cons? V13372) (cons and (cons (hd V13372) (cons (shen.embed-and (tl V13372)) ())))) (true (shen.f_error shen.embed-and))))
(defun shen.err-condition (V13374) (cons true (cons (cons shen.f_error (cons V13374 ())) ())))
(defun shen.sys-error (V13376) (simple-error (cn "system function " (shen.app V13376 ": unexpected argument
" shen.a))))
(defun thaw (V14536) (V14536))
(defun eval (V14538) (let Macroexpand (shen.walk (lambda Y (macroexpand Y)) V14538) (if (shen.packaged? Macroexpand) (map (lambda Z (shen.eval-without-macros Z)) (shen.package-contents Macroexpand)) (shen.eval-without-macros Macroexpand))))
(defun shen.eval-without-macros (V14540) (eval-kl (shen.elim-def (shen.proc-input+ V14540))))
(defun shen.proc-input+ (V14542) (cond ((and (cons? V14542) (and (= input+ (hd V14542)) (and (cons? (tl V14542)) (and (cons? (tl (tl V14542))) (= () (tl (tl (tl V14542)))))))) (cons input+ (cons (shen.rcons_form (hd (tl V14542))) (tl (tl V14542))))) ((and (cons? V14542) (and (= shen.read+ (hd V14542)) (and (cons? (tl V14542)) (and (cons? (tl (tl V14542))) (= () (tl (tl (tl V14542)))))))) (cons shen.read+ (cons (shen.rcons_form (hd (tl V14542))) (tl (tl V14542))))) ((cons? V14542) (map (lambda Z (shen.proc-input+ Z)) V14542)) (true V14542)))
(defun shen.elim-def (V14544) (cond ((and (cons? V14544) (and (= define (hd V14544)) (cons? (tl V14544)))) (shen.shen->kl (hd (tl V14544)) (tl (tl V14544)))) ((and (cons? V14544) (and (= defmacro (hd V14544)) (cons? (tl V14544)))) (let Default (cons X (cons -> (cons X ()))) (let Def (shen.elim-def (cons define (cons (hd (tl V14544)) (append (tl (tl V14544)) Default)))) (let MacroAdd (shen.add-macro (hd (tl V14544))) Def)))) ((and (cons? V14544) (and (= defcc (hd V14544)) (cons? (tl V14544)))) (shen.elim-def (shen.yacc V14544))) ((cons? V14544) (map (lambda Z (shen.elim-def Z)) V14544)) (true V14544)))
(defun shen.add-macro (V14546) (let MacroReg (value shen.*macroreg*) (let NewMacroReg (set shen.*macroreg* (adjoin V14546 (value shen.*macroreg*))) (if (= MacroReg NewMacroReg) shen.skip (set *macros* (cons (function V14546) (value *macros*)))))))
(defun shen.packaged? (V14554) (cond ((and (cons? V14554) (and (= package (hd V14554)) (and (cons? (tl V14554)) (cons? (tl (tl V14554)))))) true) (true false)))
(defun external (V14556) (trap-error (get V14556 shen.external-symbols (value *property-vector*)) (lambda E (simple-error (cn "package " (shen.app V14556 " has not been used.
" shen.a))))))
(defun internal (V14558) (trap-error (get V14558 shen.internal-symbols (value *property-vector*)) (lambda E (simple-error (cn "package " (shen.app V14558 " has not been used.
" shen.a))))))
(defun shen.package-contents (V14562) (cond ((and (cons? V14562) (and (= package (hd V14562)) (and (cons? (tl V14562)) (and (= null (hd (tl V14562))) (cons? (tl (tl V14562))))))) (tl (tl (tl V14562)))) ((and (cons? V14562) (and (= package (hd V14562)) (and (cons? (tl V14562)) (cons? (tl (tl V14562)))))) (shen.packageh (hd (tl V14562)) (hd (tl (tl V14562))) (tl (tl (tl V14562))))) (true (shen.f_error shen.package-contents))))
(defun shen.walk (V14565 V14566) (cond ((cons? V14566) (V14565 (map (lambda Z (shen.walk V14565 Z)) V14566))) (true (V14565 V14566))))
(defun compile (V14570 V14571 V14572) (let O (V14570 (cons V14571 (cons () ()))) (if (or (= (fail) O) (not (empty? (hd O)))) (V14572 O) (shen.hdtl O))))
(defun fail-if (V14575 V14576) (if (V14575 V14576) (fail) V14576))
(defun @s (V14579 V14580) (cn V14579 V14580))
(defun tc? () (value shen.*tc*))
(defun ps (V14582) (trap-error (get V14582 shen.source (value *property-vector*)) (lambda E (simple-error (shen.app V14582 " not found.
" shen.a)))))
(defun stinput () (value *stinput*))
(defun shen.+vector? (V14584) (and (absvector? V14584) (> (<-address V14584 0) 0)))
(defun vector (V14586) (let Vector (absvector (+ V14586 1)) (let ZeroStamp (address-> Vector 0 V14586) (let Standard (if (= V14586 0) ZeroStamp (shen.fillvector ZeroStamp 1 V14586 (fail))) Standard))))
(defun shen.fillvector (V14592 V14593 V14594 V14595) (cond ((= V14594 V14593) (address-> V14592 V14594 V14595)) (true (shen.fillvector (address-> V14592 V14593 V14595) (+ 1 V14593) V14594 V14595))))
(defun vector? (V14597) (and (absvector? V14597) (trap-error (>= (<-address V14597 0) 0) (lambda E false))))
(defun vector-> (V14601 V14602 V14603) (if (= V14602 0) (simple-error "cannot access 0th element of a vector
") (address-> V14601 V14602 V14603)))
(defun <-vector (V14606 V14607) (if (= V14607 0) (simple-error "cannot access 0th element of a vector
") (let VectorElement (<-address V14606 V14607) (if (= VectorElement (fail)) (simple-error "vector element not found
") VectorElement))))
(defun shen.posint? (V14609) (and (integer? V14609) (>= V14609 0)))
(defun limit (V14611) (<-address V14611 0))
(defun symbol? (V14613) (cond ((or (boolean? V14613) (or (number? V14613) (string? V14613))) false) (true (trap-error (let String (str V14613) (shen.analyse-symbol? String)) (lambda E false)))))
(defun shen.analyse-symbol? (V14615) (cond ((shen.+string? V14615) (and (shen.alpha? (pos V14615 0)) (shen.alphanums? (tlstr V14615)))) (true (shen.f_error shen.analyse-symbol?))))
(defun shen.alpha? (V14617) (element? V14617 (cons "A" (cons "B" (cons "C" (cons "D" (cons "E" (cons "F" (cons "G" (cons "H" (cons "I" (cons "J" (cons "K" (cons "L" (cons "M" (cons "N" (cons "O" (cons "P" (cons "Q" (cons "R" (cons "S" (cons "T" (cons "U" (cons "V" (cons "W" (cons "X" (cons "Y" (cons "Z" (cons "a" (cons "b" (cons "c" (cons "d" (cons "e" (cons "f" (cons "g" (cons "h" (cons "i" (cons "j" (cons "k" (cons "l" (cons "m" (cons "n" (cons "o" (cons "p" (cons "q" (cons "r" (cons "s" (cons "t" (cons "u" (cons "v" (cons "w" (cons "x" (cons "y" (cons "z" (cons "=" (cons "*" (cons "/" (cons "+" (cons "-" (cons "_" (cons "?" (cons "$" (cons "!" (cons "@" (cons "~" (cons ">" (cons "<" (cons "&" (cons "%" (cons "{" (cons "}" (cons ":" (cons ";" (cons "`" (cons "#" (cons "'" (cons "." ())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(defun shen.alphanums? (V14619) (cond ((= "" V14619) true) ((shen.+string? V14619) (and (shen.alphanum? (pos V14619 0)) (shen.alphanums? (tlstr V14619)))) (true (shen.f_error shen.alphanums?))))
(defun shen.alphanum? (V14621) (or (shen.alpha? V14621) (shen.digit? V14621)))
(defun shen.digit? (V14623) (element? V14623 (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))
(defun variable? (V14625) (cond ((or (boolean? V14625) (or (number? V14625) (string? V14625))) false) (true (trap-error (let String (str V14625) (shen.analyse-variable? String)) (lambda E false)))))
(defun shen.analyse-variable? (V14627) (cond ((shen.+string? V14627) (and (shen.uppercase? (pos V14627 0)) (shen.alphanums? (tlstr V14627)))) (true (shen.f_error shen.analyse-variable?))))
(defun shen.uppercase? (V14629) (element? V14629 (cons "A" (cons "B" (cons "C" (cons "D" (cons "E" (cons "F" (cons "G" (cons "H" (cons "I" (cons "J" (cons "K" (cons "L" (cons "M" (cons "N" (cons "O" (cons "P" (cons "Q" (cons "R" (cons "S" (cons "T" (cons "U" (cons "V" (cons "W" (cons "X" (cons "Y" (cons "Z" ()))))))))))))))))))))))))))))
(defun gensym (V14631) (concat V14631 (set shen.*gensym* (+ 1 (value shen.*gensym*)))))
(defun concat (V14634 V14635) (intern (cn (str V14634) (str V14635))))
(defun @p (V14638 V14639) (let Vector (absvector 3) (let Tag (address-> Vector 0 shen.tuple) (let Fst (address-> Vector 1 V14638) (let Snd (address-> Vector 2 V14639) Vector)))))
(defun fst (V14641) (<-address V14641 1))
(defun snd (V14643) (<-address V14643 2))
(defun tuple? (V14645) (trap-error (and (absvector? V14645) (= shen.tuple (<-address V14645 0))) (lambda E false)))
(defun append (V14648 V14649) (cond ((= () V14648) V14649) ((cons? V14648) (cons (hd V14648) (append (tl V14648) V14649))) (true (shen.f_error append))))
(defun @v (V14652 V14653) (let Limit (limit V14653) (let NewVector (vector (+ Limit 1)) (let X+NewVector (vector-> NewVector 1 V14652) (if (= Limit 0) X+NewVector (shen.@v-help V14653 1 Limit X+NewVector))))))
(defun shen.@v-help (V14659 V14660 V14661 V14662) (cond ((= V14661 V14660) (shen.copyfromvector V14659 V14662 V14661 (+ V14661 1))) (true (shen.@v-help V14659 (+ V14660 1) V14661 (shen.copyfromvector V14659 V14662 V14660 (+ V14660 1))))))
(defun shen.copyfromvector (V14667 V14668 V14669 V14670) (trap-error (vector-> V14668 V14670 (<-vector V14667 V14669)) (lambda E V14668)))
(defun hdv (V14672) (trap-error (<-vector V14672 1) (lambda E (simple-error (cn "hdv needs a non-empty vector as an argument; not " (shen.app V14672 "
" shen.s))))))
(defun tlv (V14674) (let Limit (limit V14674) (if (= Limit 0) (simple-error "cannot take the tail of the empty vector
") (if (= Limit 1) (vector 0) (let NewVector (vector (- Limit 1)) (shen.tlv-help V14674 2 Limit (vector (- Limit 1))))))))
(defun shen.tlv-help (V14680 V14681 V14682 V14683) (cond ((= V14682 V14681) (shen.copyfromvector V14680 V14683 V14682 (- V14682 1))) (true (shen.tlv-help V14680 (+ V14681 1) V14682 (shen.copyfromvector V14680 V14683 V14681 (- V14681 1))))))
(defun assoc (V14695 V14696) (cond ((= () V14696) ()) ((and (cons? V14696) (and (cons? (hd V14696)) (= (hd (hd V14696)) V14695))) (hd V14696)) ((cons? V14696) (assoc V14695 (tl V14696))) (true (shen.f_error assoc))))
(defun boolean? (V14702) (cond ((= true V14702) true) ((= false V14702) true) (true false)))
(defun nl (V14704) (cond ((= 0 V14704) 0) (true (do (shen.prhush "
" (stoutput)) (nl (- V14704 1))))))
(defun difference (V14709 V14710) (cond ((= () V14709) ()) ((cons? V14709) (if (element? (hd V14709) V14710) (difference (tl V14709) V14710) (cons (hd V14709) (difference (tl V14709) V14710)))) (true (shen.f_error difference))))
(defun do (V14713 V14714) V14714)
(defun element? (V14726 V14727) (cond ((= () V14727) false) ((and (cons? V14727) (= (hd V14727) V14726)) true) ((cons? V14727) (element? V14726 (tl V14727))) (true (shen.f_error element?))))
(defun empty? (V14733) (cond ((= () V14733) true) (true false)))
(defun fix (V14736 V14737) (shen.fix-help V14736 V14737 (V14736 V14737)))
(defun shen.fix-help (V14748 V14749 V14750) (cond ((= V14750 V14749) V14750) (true (shen.fix-help V14748 V14750 (V14748 V14750)))))
(defun put (V14755 V14756 V14757 V14758) (let N (hash V14755 (limit V14758)) (let Entry (trap-error (<-vector V14758 N) (lambda E ())) (let Change (vector-> V14758 N (shen.change-pointer-value V14755 V14756 V14757 Entry)) V14757))))
(defun unput (V14762 V14763 V14764) (let N (hash V14762 (limit V14764)) (let Entry (trap-error (<-vector V14764 N) (lambda E ())) (let Change (vector-> V14764 N (shen.remove-pointer V14762 V14763 Entry)) V14762))))
(defun shen.remove-pointer (V14772 V14773 V14774) (cond ((= () V14774) ()) ((and (cons? V14774) (and (cons? (hd V14774)) (and (cons? (hd (hd V14774))) (and (cons? (tl (hd (hd V14774)))) (and (= () (tl (tl (hd (hd V14774))))) (and (= (hd (tl (hd (hd V14774)))) V14773) (= (hd (hd (hd V14774))) V14772))))))) (tl V14774)) ((cons? V14774) (cons (hd V14774) (shen.remove-pointer V14772 V14773 (tl V14774)))) (true (shen.f_error shen.remove-pointer))))
(defun shen.change-pointer-value (V14783 V14784 V14785 V14786) (cond ((= () V14786) (cons (cons (cons V14783 (cons V14784 ())) V14785) ())) ((and (cons? V14786) (and (cons? (hd V14786)) (and (cons? (hd (hd V14786))) (and (cons? (tl (hd (hd V14786)))) (and (= () (tl (tl (hd (hd V14786))))) (and (= (hd (tl (hd (hd V14786)))) V14784) (= (hd (hd (hd V14786))) V14783))))))) (cons (cons (hd (hd V14786)) V14785) (tl V14786))) ((cons? V14786) (cons (hd V14786) (shen.change-pointer-value V14783 V14784 V14785 (tl V14786)))) (true (shen.f_error shen.change-pointer-value))))
(defun get (V14790 V14791 V14792) (let N (hash V14790 (limit V14792)) (let Entry (trap-error (<-vector V14792 N) (lambda E (simple-error "pointer not found
"))) (let Result (assoc (cons V14790 (cons V14791 ())) Entry) (if (empty? Result) (simple-error "value not found
") (tl Result))))))
(defun hash (V14795 V14796) (let Hash (shen.mod (sum (map (lambda X (string->n X)) (explode V14795))) V14796) (if (= 0 Hash) 1 Hash)))
(defun shen.mod (V14799 V14800) (shen.modh V14799 (shen.multiples V14799 (cons V14800 ()))))
(defun shen.multiples (V14803 V14804) (cond ((and (cons? V14804) (> (hd V14804) V14803)) (tl V14804)) ((cons? V14804) (shen.multiples V14803 (cons (* 2 (hd V14804)) V14804))) (true (shen.f_error shen.multiples))))
(defun shen.modh (V14809 V14810) (cond ((= 0 V14809) 0) ((= () V14810) V14809) ((and (cons? V14810) (> (hd V14810) V14809)) (if (empty? (tl V14810)) V14809 (shen.modh V14809 (tl V14810)))) ((cons? V14810) (shen.modh (- V14809 (hd V14810)) V14810)) (true (shen.f_error shen.modh))))
(defun sum (V14812) (cond ((= () V14812) 0) ((cons? V14812) (+ (hd V14812) (sum (tl V14812)))) (true (shen.f_error sum))))
(defun head (V14820) (cond ((cons? V14820) (hd V14820)) (true (simple-error "head expects a non-empty list"))))
(defun tail (V14828) (cond ((cons? V14828) (tl V14828)) (true (simple-error "tail expects a non-empty list"))))
(defun hdstr (V14830) (pos V14830 0))
(defun intersection (V14835 V14836) (cond ((= () V14835) ()) ((cons? V14835) (if (element? (hd V14835) V14836) (cons (hd V14835) (intersection (tl V14835) V14836)) (intersection (tl V14835) V14836))) (true (shen.f_error intersection))))
(defun reverse (V14838) (shen.reverse_help V14838 ()))
(defun shen.reverse_help (V14841 V14842) (cond ((= () V14841) V14842) ((cons? V14841) (shen.reverse_help (tl V14841) (cons (hd V14841) V14842))) (true (shen.f_error shen.reverse_help))))
(defun union (V14845 V14846) (cond ((= () V14845) V14846) ((cons? V14845) (if (element? (hd V14845) V14846) (union (tl V14845) V14846) (cons (hd V14845) (union (tl V14845) V14846)))) (true (shen.f_error union))))
(defun y-or-n? (V14848) (let Message (shen.prhush (shen.proc-nl V14848) (stoutput)) (let Y-or-N (shen.prhush " (y/n) " (stoutput)) (let Input (shen.app (read (stinput)) "" shen.s) (if (= "y" Input) true (if (= "n" Input) false (do (shen.prhush "please answer y or n
" (stoutput)) (y-or-n? V14848))))))))
(defun not (V14850) (if V14850 false true))
(defun subst (V14863 V14864 V14865) (cond ((= V14865 V14864) V14863) ((cons? V14865) (map (lambda W (subst V14863 V14864 W)) V14865)) (true V14865)))
(defun explode (V14867) (shen.explode-h (shen.app V14867 "" shen.a)))
(defun shen.explode-h (V14869) (cond ((= "" V14869) ()) ((shen.+string? V14869) (cons (pos V14869 0) (shen.explode-h (tlstr V14869)))) (true (shen.f_error shen.explode-h))))
(defun cd (V14871) (set *home-directory* (if (= V14871 "") "" (shen.app V14871 "/" shen.a))))
(defun map (V14874 V14875) (shen.map-h V14874 V14875 ()))
(defun shen.map-h (V14881 V14882 V14883) (cond ((= () V14882) (reverse V14883)) ((cons? V14882) (shen.map-h V14881 (tl V14882) (cons (V14881 (hd V14882)) V14883))) (true (shen.f_error shen.map-h))))
(defun length (V14885) (shen.length-h V14885 0))
(defun shen.length-h (V14888 V14889) (cond ((= () V14888) V14889) (true (shen.length-h (tl V14888) (+ V14889 1)))))
(defun occurrences (V14901 V14902) (cond ((= V14902 V14901) 1) ((cons? V14902) (+ (occurrences V14901 (hd V14902)) (occurrences V14901 (tl V14902)))) (true 0)))
(defun nth (V14911 V14912) (cond ((and (= 1 V14911) (cons? V14912)) (hd V14912)) ((cons? V14912) (nth (- V14911 1) (tl V14912))) (true (shen.f_error nth))))
(defun integer? (V14914) (and (number? V14914) (let Abs (shen.abs V14914) (shen.integer-test? Abs (shen.magless Abs 1)))))
(defun shen.abs (V14916) (if (> V14916 0) V14916 (- 0 V14916)))
(defun shen.magless (V14919 V14920) (let Nx2 (* V14920 2) (if (> Nx2 V14919) V14920 (shen.magless V14919 Nx2))))
(defun shen.integer-test? (V14926 V14927) (cond ((= 0 V14926) true) ((> 1 V14926) false) (true (let Abs-N (- V14926 V14927) (if (> 0 Abs-N) (integer? V14926) (shen.integer-test? Abs-N V14927))))))
(defun mapcan (V14932 V14933) (cond ((= () V14933) ()) ((cons? V14933) (append (V14932 (hd V14933)) (mapcan V14932 (tl V14933)))) (true (shen.f_error mapcan))))
(defun == (V14945 V14946) (cond ((= V14946 V14945) true) (true false)))
(defun abort () (simple-error ""))
(defun bound? (V14948) (and (symbol? V14948) (let Val (trap-error (value V14948) (lambda E shen.this-symbol-is-unbound)) (if (= Val shen.this-symbol-is-unbound) false true))))
(defun shen.string->bytes (V14950) (cond ((= "" V14950) ()) (true (cons (string->n (pos V14950 0)) (shen.string->bytes (tlstr V14950))))))
(defun maxinferences (V14952) (set shen.*maxinferences* V14952))
(defun inferences () (value shen.*infs*))
(defun protect (V14954) V14954)
(defun stoutput () (value *stoutput*))
(defun string->symbol (V14956) (let Symbol (intern V14956) (if (symbol? Symbol) Symbol (simple-error (cn "cannot intern " (shen.app V14956 " to a symbol" shen.s))))))
(defun optimise (V14962) (cond ((= + V14962) (set shen.*optimise* true)) ((= - V14962) (set shen.*optimise* false)) (true (simple-error "optimise expects a + or a -.
"))))
(defun os () (value *os*))
(defun language () (value *language*))
(defun version () (value *version*))
(defun port () (value *port*))
(defun porters () (value *porters*))
(defun implementation () (value *implementation*))
(defun release () (value *release*))
(defun package? (V14964) (trap-error (do (external V14964) true) (lambda E false)))
(defun function (V14966) (shen.lookup-func V14966 (value shen.*symbol-table*)))
(defun shen.lookup-func (V14976 V14977) (cond ((= () V14977) (simple-error (shen.app V14976 " has no lambda expansion
" shen.a))) ((and (cons? V14977) (and (cons? (hd V14977)) (= (hd (hd V14977)) V14976))) (tl (hd V14977))) ((cons? V14977) (shen.lookup-func V14976 (tl V14977))) (true (shen.f_error shen.lookup-func))))
(defun shen.datatype-error (V14350) (cond ((and (cons? V14350) (and (cons? (tl V14350)) (= () (tl (tl V14350))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V14350)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))
(defun shen.<datatype-rules> (V14352) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V14352) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V14352) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))
(defun shen.<datatype-rule> (V14354) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V14354) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V14354) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))
(defun shen.<side-conditions> (V14356) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V14356) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V14356) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))
(defun shen.<side-condition> (V14358) (let YaccParse (if (and (cons? (hd V14358)) (= if (hd (hd V14358)))) (let Parse_shen.<expr> (shen.<expr> (shen.pair (tl (hd V14358)) (shen.hdtl V14358))) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V14358)) (= let (hd (hd V14358)))) (let Parse_shen.<variable?> (shen.<variable?> (shen.pair (tl (hd V14358)) (shen.hdtl V14358))) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail))) (fail)) YaccParse)))
(defun shen.<variable?> (V14360) (if (cons? (hd V14360)) (let Parse_X (hd (hd V14360)) (if (variable? Parse_X) (shen.pair (hd (shen.pair (tl (hd V14360)) (shen.hdtl V14360))) Parse_X) (fail))) (fail)))
(defun shen.<expr> (V14362) (if (cons? (hd V14362)) (let Parse_X (hd (hd V14362)) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (tl (hd V14362)) (shen.hdtl V14362))) (shen.remove-bar Parse_X)) (fail))) (fail)))
(defun shen.remove-bar (V14364) (cond ((and (cons? V14364) (and (cons? (tl V14364)) (and (cons? (tl (tl V14364))) (and (= () (tl (tl (tl V14364)))) (= (hd (tl V14364)) bar!))))) (cons (hd V14364) (hd (tl (tl V14364))))) ((cons? V14364) (cons (shen.remove-bar (hd V14364)) (shen.remove-bar (tl V14364)))) (true V14364)))
(defun shen.<premises> (V14366) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V14366) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V14366) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))
(defun shen.<semicolon-symbol> (V14368) (if (cons? (hd V14368)) (let Parse_X (hd (hd V14368)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V14368)) (shen.hdtl V14368))) shen.skip) (fail))) (fail)))
(defun shen.<premise> (V14370) (let YaccParse (if (and (cons? (hd V14370)) (= ! (hd (hd V14370)))) (shen.pair (hd (shen.pair (tl (hd V14370)) (shen.hdtl V14370))) !) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V14370) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V14370) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))
(defun shen.<conclusion> (V14372) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V14372) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V14372) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))
(defun shen.sequent (V14375 V14376) (@p V14375 V14376))
(defun shen.<formulae> (V14378) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V14378) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V14378) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V14378) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))
(defun shen.<comma-symbol> (V14380) (if (cons? (hd V14380)) (let Parse_X (hd (hd V14380)) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (tl (hd V14380)) (shen.hdtl V14380))) shen.skip) (fail))) (fail)))
(defun shen.<formula> (V14382) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V14382) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (hd (hd Parse_shen.<expr>)))) (let Parse_shen.<type> (shen.<type> (shen.pair (tl (hd Parse_shen.<expr>)) (shen.hdtl Parse_shen.<expr>))) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V14382) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))
(defun shen.<type> (V14384) (let Parse_shen.<expr> (shen.<expr> V14384) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))
(defun shen.<doubleunderline> (V14386) (if (cons? (hd V14386)) (let Parse_X (hd (hd V14386)) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V14386)) (shen.hdtl V14386))) Parse_X) (fail))) (fail)))
(defun shen.<singleunderline> (V14388) (if (cons? (hd V14388)) (let Parse_X (hd (hd V14388)) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V14388)) (shen.hdtl V14388))) Parse_X) (fail))) (fail)))
(defun shen.singleunderline? (V14390) (and (symbol? V14390) (shen.sh? (str V14390))))
(defun shen.sh? (V14392) (cond ((= "_" V14392) true) (true (and (= (pos V14392 0) "_") (shen.sh? (tlstr V14392))))))
(defun shen.doubleunderline? (V14394) (and (symbol? V14394) (shen.dh? (str V14394))))
(defun shen.dh? (V14396) (cond ((= "=" V14396) true) (true (and (= (pos V14396 0) "=") (shen.dh? (tlstr V14396))))))
(defun shen.process-datatype (V14399 V14400) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V14399 V14400))))
(defun shen.remember-datatype (V14406) (cond ((cons? V14406) (do (set shen.*datatypes* (adjoin (hd V14406) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V14406) (value shen.*alldatatypes*))) (hd V14406)))) (true (shen.f_error shen.remember-datatype))))
(defun shen.rules->horn-clauses (V14411 V14412) (cond ((= () V14412) ()) ((and (cons? V14412) (and (tuple? (hd V14412)) (= shen.single (fst (hd V14412))))) (cons (shen.rule->horn-clause V14411 (snd (hd V14412))) (shen.rules->horn-clauses V14411 (tl V14412)))) ((and (cons? V14412) (and (tuple? (hd V14412)) (= shen.double (fst (hd V14412))))) (shen.rules->horn-clauses V14411 (append (shen.double->singles (snd (hd V14412))) (tl V14412)))) (true (shen.f_error shen.rules->horn-clauses))))
(defun shen.double->singles (V14414) (cons (shen.right-rule V14414) (cons (shen.left-rule V14414) ())))
(defun shen.right-rule (V14416) (@p shen.single V14416))
(defun shen.left-rule (V14418) (cond ((and (cons? V14418) (and (cons? (tl V14418)) (and (cons? (tl (tl V14418))) (and (tuple? (hd (tl (tl V14418)))) (and (= () (fst (hd (tl (tl V14418))))) (= () (tl (tl (tl V14418))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V14418)))) ()) Q) (let NewPremises (cons (@p (map (lambda X (shen.right->left X)) (hd (tl V14418))) Q) ()) (@p shen.single (cons (hd V14418) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))
(defun shen.right->left (V14424) (cond ((and (tuple? V14424) (= () (fst V14424))) (snd V14424)) (true (simple-error "syntax error with ==========
"))))
(defun shen.rule->horn-clause (V14427 V14428) (cond ((and (cons? V14428) (and (cons? (tl V14428)) (and (cons? (tl (tl V14428))) (and (tuple? (hd (tl (tl V14428)))) (= () (tl (tl (tl V14428)))))))) (cons (shen.rule->horn-clause-head V14427 (snd (hd (tl (tl V14428))))) (cons :- (cons (shen.rule->horn-clause-body (hd V14428) (hd (tl V14428)) (fst (hd (tl (tl V14428))))) ())))) (true (shen.f_error shen.rule->horn-clause))))
(defun shen.rule->horn-clause-head (V14431 V14432) (cons V14431 (cons (shen.mode-ify V14432) (cons Context_1957 ()))))
(defun shen.mode-ify (V14434) (cond ((and (cons? V14434) (and (cons? (tl V14434)) (and (= : (hd (tl V14434))) (and (cons? (tl (tl V14434))) (= () (tl (tl (tl V14434)))))))) (cons mode (cons (cons (hd V14434) (cons : (cons (cons mode (cons (hd (tl (tl V14434))) (cons + ()))) ()))) (cons - ())))) (true V14434)))
(defun shen.rule->horn-clause-body (V14438 V14439 V14440) (let Variables (map (lambda X (shen.extract_vars X)) V14440) (let Predicates (map (lambda X (gensym shen.cl)) V14440) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V14440 Variables) (let SideLiterals (shen.construct-side-literals V14438) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V14440))) V14439) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))
(defun shen.construct-search-literals (V14449 V14450 V14451 V14452) (cond ((and (= () V14449) (= () V14450)) ()) (true (shen.csl-help V14449 V14450 V14451 V14452))))
(defun shen.csl-help (V14459 V14460 V14461 V14462) (cond ((and (= () V14459) (= () V14460)) (cons (cons bind (cons ContextOut_1957 (cons V14461 ()))) ())) ((and (cons? V14459) (cons? V14460)) (cons (cons (hd V14459) (cons V14461 (cons V14462 (hd V14460)))) (shen.csl-help (tl V14459) (tl V14460) V14462 (gensym Context)))) (true (shen.f_error shen.csl-help))))
(defun shen.construct-search-clauses (V14466 V14467 V14468) (cond ((and (= () V14466) (and (= () V14467) (= () V14468))) shen.skip) ((and (cons? V14466) (and (cons? V14467) (cons? V14468))) (do (shen.construct-search-clause (hd V14466) (hd V14467) (hd V14468)) (shen.construct-search-clauses (tl V14466) (tl V14467) (tl V14468)))) (true (shen.f_error shen.construct-search-clauses))))
(defun shen.construct-search-clause (V14472 V14473 V14474) (shen.s-prolog (cons (shen.construct-base-search-clause V14472 V14473 V14474) (cons (shen.construct-recursive-search-clause V14472 V14473 V14474) ()))))
(defun shen.construct-base-search-clause (V14478 V14479 V14480) (cons (cons V14478 (cons (cons (shen.mode-ify V14479) In_1957) (cons In_1957 V14480))) (cons :- (cons () ()))))
(defun shen.construct-recursive-search-clause (V14484 V14485 V14486) (cons (cons V14484 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V14486))) (cons :- (cons (cons (cons V14484 (cons Assumptions_1957 (cons Out_1957 V14486))) ()) ()))))
(defun shen.construct-side-literals (V14492) (cond ((= () V14492) ()) ((and (cons? V14492) (and (cons? (hd V14492)) (and (= if (hd (hd V14492))) (and (cons? (tl (hd V14492))) (= () (tl (tl (hd V14492)))))))) (cons (cons when (tl (hd V14492))) (shen.construct-side-literals (tl V14492)))) ((and (cons? V14492) (and (cons? (hd V14492)) (and (= let (hd (hd V14492))) (and (cons? (tl (hd V14492))) (and (cons? (tl (tl (hd V14492)))) (= () (tl (tl (tl (hd V14492)))))))))) (cons (cons is (tl (hd V14492))) (shen.construct-side-literals (tl V14492)))) ((cons? V14492) (shen.construct-side-literals (tl V14492))) (true (shen.f_error shen.construct-side-literals))))
(defun shen.construct-premiss-literal (V14499 V14500) (cond ((tuple? V14499) (cons shen.t* (cons (shen.recursive_cons_form (snd V14499)) (cons (shen.construct-context V14500 (fst V14499)) ())))) ((= ! V14499) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))
(defun shen.construct-context (V14503 V14504) (cond ((and (= true V14503) (= () V14504)) Context_1957) ((and (= false V14503) (= () V14504)) ContextOut_1957) ((cons? V14504) (cons cons (cons (shen.recursive_cons_form (hd V14504)) (cons (shen.construct-context V14503 (tl V14504)) ())))) (true (shen.f_error shen.construct-context))))
(defun shen.recursive_cons_form (V14506) (cond ((cons? V14506) (cons cons (cons (shen.recursive_cons_form (hd V14506)) (cons (shen.recursive_cons_form (tl V14506)) ())))) (true V14506)))
(defun preclude (V14508) (shen.preclude-h (map (lambda X (shen.intern-type X)) V14508)))
(defun shen.preclude-h (V14510) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V14510)) (value shen.*datatypes*)))
(defun include (V14512) (shen.include-h (map (lambda X (shen.intern-type X)) V14512)))
(defun shen.include-h (V14514) (let ValidTypes (intersection V14514 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))
(defun preclude-all-but (V14516) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V14516))))
(defun include-all-but (V14518) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V14518))))
(defun shen.synonyms-help (V14524) (cond ((= () V14524) (shen.demodulation-function (value shen.*tc*) (mapcan (lambda X (shen.demod-rule X)) (value shen.*synonyms*)))) ((and (cons? V14524) (cons? (tl V14524))) (let Vs (difference (shen.extract_vars (hd (tl V14524))) (shen.extract_vars (hd V14524))) (if (empty? Vs) (do (shen.pushnew (cons (hd V14524) (cons (hd (tl V14524)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V14524)))) (shen.free_variable_warnings (hd (tl V14524)) Vs)))) (true (simple-error "odd number of synonyms
"))))
(defun shen.pushnew (V14527 V14528) (if (element? V14527 (value V14528)) (value V14528) (set V14528 (cons V14527 (value V14528)))))
(defun shen.demod-rule (V14530) (cond ((and (cons? V14530) (and (cons? (tl V14530)) (= () (tl (tl V14530))))) (cons (shen.rcons_form (hd V14530)) (cons -> (cons (shen.rcons_form (hd (tl V14530))) ())))) (true (shen.f_error shen.demod-rule))))
(defun shen.demodulation-function (V14533 V14534) (do (tc -) (do (eval (cons define (cons shen.demod (append V14534 (shen.default-rule))))) (do (if V14533 (tc +) shen.skip) synonyms))))
(defun shen.default-rule () (cons X (cons -> (cons X ()))))
(defun shen.yacc (V15926) (cond ((and (cons? V15926) (and (= defcc (hd V15926)) (cons? (tl V15926)))) (shen.yacc->shen (hd (tl V15926)) (tl (tl V15926)))) (true (shen.f_error shen.yacc))))
(defun shen.yacc->shen (V15929 V15930) (let CCRules (shen.split_cc_rules true V15930 ()) (let CCBody (map (lambda X (shen.cc_body X)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V15929 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))
(defun shen.kill-code (V15932) (cond ((> (occurrences kill V15932) 0) (cons trap-error (cons V15932 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V15932)))
(defun kill () (simple-error "yacc kill"))
(defun shen.analyse-kill (V15934) (let String (error-to-string V15934) (if (= String "yacc kill") (fail) V15934)))
(defun shen.split_cc_rules (V15940 V15941 V15942) (cond ((and (= () V15941) (= () V15942)) ()) ((= () V15941) (cons (shen.split_cc_rule V15940 (reverse V15942) ()) ())) ((and (cons? V15941) (= ; (hd V15941))) (cons (shen.split_cc_rule V15940 (reverse V15942) ()) (shen.split_cc_rules V15940 (tl V15941) ()))) ((cons? V15941) (shen.split_cc_rules V15940 (tl V15941) (cons (hd V15941) V15942))) (true (shen.f_error shen.split_cc_rules))))
(defun shen.split_cc_rule (V15950 V15951 V15952) (cond ((and (cons? V15951) (and (= := (hd V15951)) (and (cons? (tl V15951)) (= () (tl (tl V15951)))))) (cons (reverse V15952) (tl V15951))) ((and (cons? V15951) (and (= := (hd V15951)) (and (cons? (tl V15951)) (and (cons? (tl (tl V15951))) (and (= where (hd (tl (tl V15951)))) (and (cons? (tl (tl (tl V15951)))) (= () (tl (tl (tl (tl V15951))))))))))) (cons (reverse V15952) (cons (cons where (cons (hd (tl (tl (tl V15951)))) (cons (hd (tl V15951)) ()))) ()))) ((= () V15951) (do (shen.semantic-completion-warning V15950 V15952) (shen.split_cc_rule V15950 (cons := (cons (shen.default_semantics (reverse V15952)) ())) V15952))) ((cons? V15951) (shen.split_cc_rule V15950 (tl V15951) (cons (hd V15951) V15952))) (true (shen.f_error shen.split_cc_rule))))
(defun shen.semantic-completion-warning (V15963 V15964) (cond ((= true V15963) (do (shen.prhush "warning: " (stoutput)) (do (map (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V15964)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))
(defun shen.default_semantics (V15966) (cond ((= () V15966) ()) ((and (cons? V15966) (and (= () (tl V15966)) (shen.grammar_symbol? (hd V15966)))) (hd V15966)) ((and (cons? V15966) (shen.grammar_symbol? (hd V15966))) (cons append (cons (hd V15966) (cons (shen.default_semantics (tl V15966)) ())))) ((cons? V15966) (cons cons (cons (hd V15966) (cons (shen.default_semantics (tl V15966)) ())))) (true (shen.f_error shen.default_semantics))))
(defun shen.grammar_symbol? (V15968) (and (symbol? V15968) (let Cs (shen.strip-pathname (explode V15968)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))
(defun shen.yacc_cases (V15970) (cond ((and (cons? V15970) (= () (tl V15970))) (hd V15970)) ((cons? V15970) (let P YaccParse (cons let (cons P (cons (hd V15970) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V15970)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))
(defun shen.cc_body (V15972) (cond ((and (cons? V15972) (and (cons? (tl V15972)) (= () (tl (tl V15972))))) (shen.syntax (hd V15972) Stream (hd (tl V15972)))) (true (shen.f_error shen.cc_body))))
(defun shen.syntax (V15976 V15977 V15978) (cond ((and (= () V15976) (and (cons? V15978) (and (= where (hd V15978)) (and (cons? (tl V15978)) (and (cons? (tl (tl V15978))) (= () (tl (tl (tl V15978))))))))) (cons if (cons (shen.semantics (hd (tl V15978))) (cons (cons shen.pair (cons (cons hd (cons V15977 ())) (cons (shen.semantics (hd (tl (tl V15978)))) ()))) (cons (cons fail ()) ()))))) ((= () V15976) (cons shen.pair (cons (cons hd (cons V15977 ())) (cons (shen.semantics V15978) ())))) ((cons? V15976) (if (shen.grammar_symbol? (hd V15976)) (shen.recursive_descent V15976 V15977 V15978) (if (variable? (hd V15976)) (shen.variable-match V15976 V15977 V15978) (if (shen.jump_stream? (hd V15976)) (shen.jump_stream V15976 V15977 V15978) (if (shen.terminal? (hd V15976)) (shen.check_stream V15976 V15977 V15978) (if (cons? (hd V15976)) (shen.list-stream (shen.decons (hd V15976)) (tl V15976) V15977 V15978) (simple-error (shen.app (hd V15976) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))
(defun shen.list-stream (V15983 V15984 V15985 V15986) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V15985 ())) ())) (cons (cons cons? (cons (cons hd (cons (cons hd (cons V15985 ())) ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V15984 (cons shen.pair (cons (cons tl (cons (cons hd (cons V15985 ())) ())) (cons (cons hd (cons (cons tl (cons V15985 ())) ())) ()))) V15986) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V15983 (cons shen.pair (cons (cons hd (cons (cons hd (cons V15985 ())) ())) (cons (cons hd (cons (cons tl (cons V15985 ())) ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))
(defun shen.decons (V15988) (cond ((and (cons? V15988) (and (= cons (hd V15988)) (and (cons? (tl V15988)) (and (cons? (tl (tl V15988))) (and (= () (hd (tl (tl V15988)))) (= () (tl (tl (tl V15988))))))))) (cons (hd (tl V15988)) ())) ((and (cons? V15988) (and (= cons (hd V15988)) (and (cons? (tl V15988)) (and (cons? (tl (tl V15988))) (= () (tl (tl (tl V15988)))))))) (cons (hd (tl V15988)) (shen.decons (hd (tl (tl V15988)))))) (true V15988)))
(defun shen.insert-runon (V16003 V16004 V16005) (cond ((and (cons? V16005) (and (= shen.pair (hd V16005)) (and (cons? (tl V16005)) (and (cons? (tl (tl V16005))) (and (= () (tl (tl (tl V16005)))) (= (hd (tl (tl V16005))) V16004)))))) V16003) ((cons? V16005) (map (lambda Z (shen.insert-runon V16003 V16004 Z)) V16005)) (true V16005)))
(defun shen.strip-pathname (V16011) (cond ((not (element? "." V16011)) V16011) ((cons? V16011) (shen.strip-pathname (tl V16011))) (true (shen.f_error shen.strip-pathname))))
(defun shen.recursive_descent (V16015 V16016 V16017) (cond ((cons? V16015) (let Test (cons (hd V16015) (cons V16016 ())) (let Action (shen.syntax (tl V16015) (concat Parse_ (hd V16015)) V16017) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V16015)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V16015)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))
(defun shen.variable-match (V16021 V16022 V16023) (cond ((cons? V16021) (let Test (cons cons? (cons (cons hd (cons V16022 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V16021)) (cons (cons hd (cons (cons hd (cons V16022 ())) ())) (cons (shen.syntax (tl V16021) (cons shen.pair (cons (cons tl (cons (cons hd (cons V16022 ())) ())) (cons (cons shen.hdtl (cons V16022 ())) ()))) V16023) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))
(defun shen.terminal? (V16033) (cond ((cons? V16033) false) ((variable? V16033) false) (true true)))
(defun shen.jump_stream? (V16039) (cond ((= V16039 _) true) (true false)))
(defun shen.check_stream (V16043 V16044 V16045) (cond ((cons? V16043) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V16044 ())) ())) (cons (cons = (cons (hd V16043) (cons (cons hd (cons (cons hd (cons V16044 ())) ())) ()))) ()))) (let Action (shen.syntax (tl V16043) (cons shen.pair (cons (cons tl (cons (cons hd (cons V16044 ())) ())) (cons (cons shen.hdtl (cons V16044 ())) ()))) V16045) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.check_stream))))
(defun shen.jump_stream (V16049 V16050 V16051) (cond ((cons? V16049) (let Test (cons cons? (cons (cons hd (cons V16050 ())) ())) (let Action (shen.syntax (tl V16049) (cons shen.pair (cons (cons tl (cons (cons hd (cons V16050 ())) ())) (cons (cons shen.hdtl (cons V16050 ())) ()))) V16051) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))
(defun shen.semantics (V16053) (cond ((= () V16053) ()) ((shen.grammar_symbol? V16053) (cons shen.hdtl (cons (concat Parse_ V16053) ()))) ((variable? V16053) (concat Parse_ V16053)) ((cons? V16053) (map (lambda Z (shen.semantics Z)) V16053)) (true V16053)))
(defun shen.snd-or-fail (V16061) (cond ((and (cons? V16061) (and (cons? (tl V16061)) (= () (tl (tl V16061))))) (hd (tl V16061))) (true (fail))))
(defun fail () shen.fail!)
(defun shen.pair (V16064 V16065) (cons V16064 (cons V16065 ())))
(defun shen.hdtl (V16067) (hd (tl V16067)))
(defun shen.<!> (V16075) (cond ((and (cons? V16075) (and (cons? (tl V16075)) (= () (tl (tl V16075))))) (cons () (cons (hd V16075) ()))) (true (fail))))
(defun <e> (V16081) (cond ((and (cons? V16081) (and (cons? (tl V16081)) (= () (tl (tl V16081))))) (cons (hd V16081) (cons () ()))) (true (shen.f_error <e>))))
(defun read-file-as-bytelist (V14083) (let Stream (open V14083 in) (let Byte (read-byte Stream) (let Bytes (shen.read-file-as-bytelist-help Stream Byte ()) (let Close (close Stream) (reverse Bytes))))))
(defun shen.read-file-as-bytelist-help (V14087 V14088 V14089) (cond ((= -1 V14088) V14089) (true (shen.read-file-as-bytelist-help V14087 (read-byte V14087) (cons V14088 V14089)))))
(defun read-file-as-string (V14091) (let Stream (open V14091 in) (shen.rfas-h Stream (read-byte Stream) "")))
(defun shen.rfas-h (V14095 V14096 V14097) (cond ((= -1 V14096) (do (close V14095) V14097)) (true (shen.rfas-h V14095 (read-byte V14095) (cn V14097 (n->string V14096))))))
(defun input (V14099) (eval-kl (read V14099)))
(defun input+ (V14102 V14103) (let Mono? (shen.monotype V14102) (let Input (read V14103) (if (= false (shen.typecheck Input (shen.demodulate V14102))) (simple-error (cn "type error: " (shen.app Input (cn " is not of type " (shen.app V14102 "
" shen.r)) shen.r))) (eval-kl Input)))))
(defun shen.monotype (V14105) (cond ((cons? V14105) (map (lambda Z (shen.monotype Z)) V14105)) (true (if (variable? V14105) (simple-error (cn "input+ expects a monotype: not " (shen.app V14105 "
" shen.a))) V14105))))
(defun read (V14107) (hd (shen.read-loop V14107 (read-byte V14107) ())))
(defun it () (value shen.*it*))
(defun shen.read-loop (V14115 V14116 V14117) (cond ((= 94 V14116) (simple-error "read aborted")) ((= -1 V14116) (if (empty? V14117) (simple-error "error: empty stream") (compile (lambda X (shen.<st_input> X)) V14117 (lambda E E)))) ((shen.terminator? V14116) (let AllBytes (append V14117 (cons V14116 ())) (let It (shen.record-it AllBytes) (let Read (compile (lambda X (shen.<st_input> X)) AllBytes (lambda E shen.nextbyte)) (if (or (= Read shen.nextbyte) (empty? Read)) (shen.read-loop V14115 (read-byte V14115) AllBytes) Read))))) (true (shen.read-loop V14115 (read-byte V14115) (append V14117 (cons V14116 ()))))))
(defun shen.terminator? (V14119) (element? V14119 (cons 9 (cons 10 (cons 13 (cons 32 (cons 34 (cons 41 (cons 93 ())))))))))
(defun lineread (V14121) (shen.lineread-loop (read-byte V14121) () V14121))
(defun shen.lineread-loop (V14126 V14127 V14128) (cond ((= -1 V14126) (if (empty? V14127) (simple-error "empty stream") (compile (lambda X (shen.<st_input> X)) V14127 (lambda E E)))) ((= V14126 (shen.hat)) (simple-error "line read aborted")) ((element? V14126 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V14127 (lambda E shen.nextline)) (let It (shen.record-it V14127) (if (or (= Line shen.nextline) (empty? Line)) (shen.lineread-loop (read-byte V14128) (append V14127 (cons V14126 ())) V14128) Line)))) (true (shen.lineread-loop (read-byte V14128) (append V14127 (cons V14126 ())) V14128))))
(defun shen.record-it (V14130) (let TrimLeft (shen.trim-whitespace V14130) (let TrimRight (shen.trim-whitespace (reverse TrimLeft)) (let Trimmed (reverse TrimRight) (shen.record-it-h Trimmed)))))
(defun shen.trim-whitespace (V14132) (cond ((and (cons? V14132) (element? (hd V14132) (cons 9 (cons 10 (cons 13 (cons 32 ())))))) (shen.trim-whitespace (tl V14132))) (true V14132)))
(defun shen.record-it-h (V14134) (do (set shen.*it* (shen.cn-all (map (lambda X (n->string X)) V14134))) V14134))
(defun shen.cn-all (V14136) (cond ((= () V14136) "") ((cons? V14136) (cn (hd V14136) (shen.cn-all (tl V14136)))) (true (shen.f_error shen.cn-all))))
(defun read-file (V14138) (let Bytelist (read-file-as-bytelist V14138) (compile (lambda X (shen.<st_input> X)) Bytelist (lambda X (shen.read-error X)))))
(defun read-from-string (V14140) (let Ns (map (lambda X (string->n X)) (explode V14140)) (compile (lambda X (shen.<st_input> X)) Ns (lambda X (shen.read-error X)))))
(defun shen.read-error (V14148) (cond ((and (cons? V14148) (and (cons? (hd V14148)) (and (cons? (tl V14148)) (= () (tl (tl V14148)))))) (simple-error (cn "read error here:

 " (shen.app (shen.compress-50 50 (hd V14148)) "
" shen.a)))) (true (simple-error "read error
"))))
(defun shen.compress-50 (V14155 V14156) (cond ((= () V14156) "") ((= 0 V14155) "") ((cons? V14156) (cn (n->string (hd V14156)) (shen.compress-50 (- V14155 1) (tl V14156)))) (true (shen.f_error shen.compress-50))))
(defun shen.<st_input> (V14158) (let YaccParse (let Parse_shen.<lsb> (shen.<lsb> V14158) (if (not (= (fail) Parse_shen.<lsb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lsb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rsb> (shen.<rsb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rsb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rsb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (cons (macroexpand (shen.cons_form (shen.hdtl Parse_shen.<st_input1>))) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lrb> (shen.<lrb> V14158) (if (not (= (fail) Parse_shen.<lrb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lrb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rrb> (shen.<rrb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rrb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rrb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (shen.package-macro (macroexpand (shen.hdtl Parse_shen.<st_input1>)) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lcurly> (shen.<lcurly> V14158) (if (not (= (fail) Parse_shen.<lcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<lcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons { (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<rcurly> (shen.<rcurly> V14158) (if (not (= (fail) Parse_shen.<rcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<rcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons } (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<bar> (shen.<bar> V14158) (if (not (= (fail) Parse_shen.<bar>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<bar>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons bar! (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<semicolon> (shen.<semicolon> V14158) (if (not (= (fail) Parse_shen.<semicolon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<semicolon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons ; (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V14158) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<equal> (shen.<equal> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<equal>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<equal>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons := (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V14158) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<minus> (shen.<minus> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons :- (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V14158) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons : (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comma> (shen.<comma> V14158) (if (not (= (fail) Parse_shen.<comma>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comma>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (intern ",") (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V14158) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<atom> (shen.<atom> V14158) (if (not (= (fail) Parse_shen.<atom>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<atom>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (macroexpand (shen.hdtl Parse_shen.<atom>)) (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<whitespaces> (shen.<whitespaces> V14158) (if (not (= (fail) Parse_shen.<whitespaces>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<whitespaces>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V14158) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))
(defun shen.<lsb> (V14160) (if (and (cons? (hd V14160)) (= 91 (hd (hd V14160)))) (shen.pair (hd (shen.pair (tl (hd V14160)) (shen.hdtl V14160))) shen.skip) (fail)))
(defun shen.<rsb> (V14162) (if (and (cons? (hd V14162)) (= 93 (hd (hd V14162)))) (shen.pair (hd (shen.pair (tl (hd V14162)) (shen.hdtl V14162))) shen.skip) (fail)))
(defun shen.<lcurly> (V14164) (if (and (cons? (hd V14164)) (= 123 (hd (hd V14164)))) (shen.pair (hd (shen.pair (tl (hd V14164)) (shen.hdtl V14164))) shen.skip) (fail)))
(defun shen.<rcurly> (V14166) (if (and (cons? (hd V14166)) (= 125 (hd (hd V14166)))) (shen.pair (hd (shen.pair (tl (hd V14166)) (shen.hdtl V14166))) shen.skip) (fail)))
(defun shen.<bar> (V14168) (if (and (cons? (hd V14168)) (= 124 (hd (hd V14168)))) (shen.pair (hd (shen.pair (tl (hd V14168)) (shen.hdtl V14168))) shen.skip) (fail)))
(defun shen.<semicolon> (V14170) (if (and (cons? (hd V14170)) (= 59 (hd (hd V14170)))) (shen.pair (hd (shen.pair (tl (hd V14170)) (shen.hdtl V14170))) shen.skip) (fail)))
(defun shen.<colon> (V14172) (if (and (cons? (hd V14172)) (= 58 (hd (hd V14172)))) (shen.pair (hd (shen.pair (tl (hd V14172)) (shen.hdtl V14172))) shen.skip) (fail)))
(defun shen.<comma> (V14174) (if (and (cons? (hd V14174)) (= 44 (hd (hd V14174)))) (shen.pair (hd (shen.pair (tl (hd V14174)) (shen.hdtl V14174))) shen.skip) (fail)))
(defun shen.<equal> (V14176) (if (and (cons? (hd V14176)) (= 61 (hd (hd V14176)))) (shen.pair (hd (shen.pair (tl (hd V14176)) (shen.hdtl V14176))) shen.skip) (fail)))
(defun shen.<minus> (V14178) (if (and (cons? (hd V14178)) (= 45 (hd (hd V14178)))) (shen.pair (hd (shen.pair (tl (hd V14178)) (shen.hdtl V14178))) shen.skip) (fail)))
(defun shen.<lrb> (V14180) (if (and (cons? (hd V14180)) (= 40 (hd (hd V14180)))) (shen.pair (hd (shen.pair (tl (hd V14180)) (shen.hdtl V14180))) shen.skip) (fail)))
(defun shen.<rrb> (V14182) (if (and (cons? (hd V14182)) (= 41 (hd (hd V14182)))) (shen.pair (hd (shen.pair (tl (hd V14182)) (shen.hdtl V14182))) shen.skip) (fail)))
(defun shen.<atom> (V14184) (let YaccParse (let Parse_shen.<str> (shen.<str> V14184) (if (not (= (fail) Parse_shen.<str>)) (shen.pair (hd Parse_shen.<str>) (shen.control-chars (shen.hdtl Parse_shen.<str>))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<number> (shen.<number> V14184) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<sym> (shen.<sym> V14184) (if (not (= (fail) Parse_shen.<sym>)) (shen.pair (hd Parse_shen.<sym>) (if (= (shen.hdtl Parse_shen.<sym>) "<>") (cons vector (cons 0 ())) (intern (shen.hdtl Parse_shen.<sym>)))) (fail))) YaccParse)) YaccParse)))
(defun shen.control-chars (V14186) (cond ((= () V14186) "") ((and (cons? V14186) (and (= "c" (hd V14186)) (and (cons? (tl V14186)) (= "#" (hd (tl V14186)))))) (let CodePoint (shen.code-point (tl (tl V14186))) (let AfterCodePoint (shen.after-codepoint (tl (tl V14186))) (@s (n->string (shen.decimalise CodePoint)) (shen.control-chars AfterCodePoint))))) ((cons? V14186) (@s (hd V14186) (shen.control-chars (tl V14186)))) (true (shen.f_error shen.control-chars))))
(defun shen.code-point (V14190) (cond ((and (cons? V14190) (= ";" (hd V14190))) "") ((and (cons? V14190) (element? (hd V14190) (cons "0" (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))) (cons (hd V14190) (shen.code-point (tl V14190)))) (true (simple-error (cn "code point parse error " (shen.app V14190 "
" shen.a))))))
(defun shen.after-codepoint (V14196) (cond ((= () V14196) ()) ((and (cons? V14196) (= ";" (hd V14196))) (tl V14196)) ((cons? V14196) (shen.after-codepoint (tl V14196))) (true (shen.f_error shen.after-codepoint))))
(defun shen.decimalise (V14198) (shen.pre (reverse (shen.digits->integers V14198)) 0))
(defun shen.digits->integers (V14204) (cond ((and (cons? V14204) (= "0" (hd V14204))) (cons 0 (shen.digits->integers (tl V14204)))) ((and (cons? V14204) (= "1" (hd V14204))) (cons 1 (shen.digits->integers (tl V14204)))) ((and (cons? V14204) (= "2" (hd V14204))) (cons 2 (shen.digits->integers (tl V14204)))) ((and (cons? V14204) (= "3" (hd V14204))) (cons 3 (shen.digits->integers (tl V14204)))) ((and (cons? V14204) (= "4" (hd V14204))) (cons 4 (shen.digits->integers (tl V14204)))) ((and (cons? V14204) (= "5" (hd V14204))) (cons 5 (shen.digits->integers (tl V14204)))) ((and (cons? V14204) (= "6" (hd V14204))) (cons 6 (shen.digits->integers (tl V14204)))) ((and (cons? V14204) (= "7" (hd V14204))) (cons 7 (shen.digits->integers (tl V14204)))) ((and (cons? V14204) (= "8" (hd V14204))) (cons 8 (shen.digits->integers (tl V14204)))) ((and (cons? V14204) (= "9" (hd V14204))) (cons 9 (shen.digits->integers (tl V14204)))) (true ())))
(defun shen.<sym> (V14206) (let Parse_shen.<alpha> (shen.<alpha> V14206) (if (not (= (fail) Parse_shen.<alpha>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alpha>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))))
(defun shen.<alphanums> (V14208) (let YaccParse (let Parse_shen.<alphanum> (shen.<alphanum> V14208) (if (not (= (fail) Parse_shen.<alphanum>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alphanum>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alphanum>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V14208) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) "") (fail))) YaccParse)))
(defun shen.<alphanum> (V14210) (let YaccParse (let Parse_shen.<alpha> (shen.<alpha> V14210) (if (not (= (fail) Parse_shen.<alpha>)) (shen.pair (hd Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alpha>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<num> (shen.<num> V14210) (if (not (= (fail) Parse_shen.<num>)) (shen.pair (hd Parse_shen.<num>) (shen.hdtl Parse_shen.<num>)) (fail))) YaccParse)))
(defun shen.<num> (V14212) (if (cons? (hd V14212)) (let Parse_Byte (hd (hd V14212)) (if (shen.numbyte? Parse_Byte) (shen.pair (hd (shen.pair (tl (hd V14212)) (shen.hdtl V14212))) (n->string Parse_Byte)) (fail))) (fail)))
(defun shen.numbyte? (V14218) (cond ((= 48 V14218) true) ((= 49 V14218) true) ((= 50 V14218) true) ((= 51 V14218) true) ((= 52 V14218) true) ((= 53 V14218) true) ((= 54 V14218) true) ((= 55 V14218) true) ((= 56 V14218) true) ((= 57 V14218) true) (true false)))
(defun shen.<alpha> (V14220) (if (cons? (hd V14220)) (let Parse_Byte (hd (hd V14220)) (if (shen.symbol-code? Parse_Byte) (shen.pair (hd (shen.pair (tl (hd V14220)) (shen.hdtl V14220))) (n->string Parse_Byte)) (fail))) (fail)))
(defun shen.symbol-code? (V14222) (or (= V14222 126) (or (and (> V14222 94) (< V14222 123)) (or (and (> V14222 59) (< V14222 91)) (or (and (> V14222 41) (and (< V14222 58) (not (= V14222 44)))) (or (and (> V14222 34) (< V14222 40)) (= V14222 33)))))))
(defun shen.<str> (V14224) (let Parse_shen.<dbq> (shen.<dbq> V14224) (if (not (= (fail) Parse_shen.<dbq>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<dbq>) (if (not (= (fail) Parse_shen.<strcontents>)) (let Parse_shen.<dbq> (shen.<dbq> Parse_shen.<strcontents>) (if (not (= (fail) Parse_shen.<dbq>)) (shen.pair (hd Parse_shen.<dbq>) (shen.hdtl Parse_shen.<strcontents>)) (fail))) (fail))) (fail))))
(defun shen.<dbq> (V14226) (if (cons? (hd V14226)) (let Parse_Byte (hd (hd V14226)) (if (= Parse_Byte 34) (shen.pair (hd (shen.pair (tl (hd V14226)) (shen.hdtl V14226))) Parse_Byte) (fail))) (fail)))
(defun shen.<strcontents> (V14228) (let YaccParse (let Parse_shen.<strc> (shen.<strc> V14228) (if (not (= (fail) Parse_shen.<strc>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<strc>) (if (not (= (fail) Parse_shen.<strcontents>)) (shen.pair (hd Parse_shen.<strcontents>) (cons (shen.hdtl Parse_shen.<strc>) (shen.hdtl Parse_shen.<strcontents>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V14228) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))
(defun shen.<byte> (V14230) (if (cons? (hd V14230)) (let Parse_Byte (hd (hd V14230)) (shen.pair (hd (shen.pair (tl (hd V14230)) (shen.hdtl V14230))) (n->string Parse_Byte))) (fail)))
(defun shen.<strc> (V14232) (if (cons? (hd V14232)) (let Parse_Byte (hd (hd V14232)) (if (not (= Parse_Byte 34)) (shen.pair (hd (shen.pair (tl (hd V14232)) (shen.hdtl V14232))) (n->string Parse_Byte)) (fail))) (fail)))
(defun shen.<number> (V14234) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V14234) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (- 0 (shen.hdtl Parse_shen.<number>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<plus> (shen.<plus> V14234) (if (not (= (fail) Parse_shen.<plus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<plus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V14234) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<postdigits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1)))) (fail))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V14234) (if (not (= (fail) Parse_shen.<digits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<digits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V14234) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (shen.pair (hd Parse_shen.<postdigits>) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V14234) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))
(defun shen.<E> (V14236) (if (and (cons? (hd V14236)) (= 101 (hd (hd V14236)))) (shen.pair (hd (shen.pair (tl (hd V14236)) (shen.hdtl V14236))) shen.skip) (fail)))
(defun shen.<log10> (V14238) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V14238) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (- 0 (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V14238) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)))
(defun shen.<plus> (V14240) (if (cons? (hd V14240)) (let Parse_Byte (hd (hd V14240)) (if (= Parse_Byte 43) (shen.pair (hd (shen.pair (tl (hd V14240)) (shen.hdtl V14240))) Parse_Byte) (fail))) (fail)))
(defun shen.<stop> (V14242) (if (cons? (hd V14242)) (let Parse_Byte (hd (hd V14242)) (if (= Parse_Byte 46) (shen.pair (hd (shen.pair (tl (hd V14242)) (shen.hdtl V14242))) Parse_Byte) (fail))) (fail)))
(defun shen.<predigits> (V14244) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V14244) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V14244) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))
(defun shen.<postdigits> (V14246) (let Parse_shen.<digits> (shen.<digits> V14246) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))))
(defun shen.<digits> (V14248) (let YaccParse (let Parse_shen.<digit> (shen.<digit> V14248) (if (not (= (fail) Parse_shen.<digit>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<digit>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (cons (shen.hdtl Parse_shen.<digit>) (shen.hdtl Parse_shen.<digits>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digit> (shen.<digit> V14248) (if (not (= (fail) Parse_shen.<digit>)) (shen.pair (hd Parse_shen.<digit>) (cons (shen.hdtl Parse_shen.<digit>) ())) (fail))) YaccParse)))
(defun shen.<digit> (V14250) (if (cons? (hd V14250)) (let Parse_X (hd (hd V14250)) (if (shen.numbyte? Parse_X) (shen.pair (hd (shen.pair (tl (hd V14250)) (shen.hdtl V14250))) (shen.byte->digit Parse_X)) (fail))) (fail)))
(defun shen.byte->digit (V14252) (cond ((= 48 V14252) 0) ((= 49 V14252) 1) ((= 50 V14252) 2) ((= 51 V14252) 3) ((= 52 V14252) 4) ((= 53 V14252) 5) ((= 54 V14252) 6) ((= 55 V14252) 7) ((= 56 V14252) 8) ((= 57 V14252) 9) (true (shen.f_error shen.byte->digit))))
(defun shen.pre (V14257 V14258) (cond ((= () V14257) 0) ((cons? V14257) (+ (* (shen.expt 10 V14258) (hd V14257)) (shen.pre (tl V14257) (+ V14258 1)))) (true (shen.f_error shen.pre))))
(defun shen.post (V14263 V14264) (cond ((= () V14263) 0) ((cons? V14263) (+ (* (shen.expt 10 (- 0 V14264)) (hd V14263)) (shen.post (tl V14263) (+ V14264 1)))) (true (shen.f_error shen.post))))
(defun shen.expt (V14269 V14270) (cond ((= 0 V14270) 1) ((> V14270 0) (* V14269 (shen.expt V14269 (- V14270 1)))) (true (* 1 (/ (shen.expt V14269 (+ V14270 1)) V14269)))))
(defun shen.<st_input1> (V14272) (let Parse_shen.<st_input> (shen.<st_input> V14272) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))
(defun shen.<st_input2> (V14274) (let Parse_shen.<st_input> (shen.<st_input> V14274) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))
(defun shen.<comment> (V14276) (let YaccParse (let Parse_shen.<singleline> (shen.<singleline> V14276) (if (not (= (fail) Parse_shen.<singleline>)) (shen.pair (hd Parse_shen.<singleline>) shen.skip) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<multiline> (shen.<multiline> V14276) (if (not (= (fail) Parse_shen.<multiline>)) (shen.pair (hd Parse_shen.<multiline>) shen.skip) (fail))) YaccParse)))
(defun shen.<singleline> (V14278) (let Parse_shen.<backslash> (shen.<backslash> V14278) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<anysingle>)) (let Parse_shen.<return> (shen.<return> Parse_shen.<anysingle>) (if (not (= (fail) Parse_shen.<return>)) (shen.pair (hd Parse_shen.<return>) shen.skip) (fail))) (fail))) (fail))) (fail))))
(defun shen.<backslash> (V14280) (if (and (cons? (hd V14280)) (= 92 (hd (hd V14280)))) (shen.pair (hd (shen.pair (tl (hd V14280)) (shen.hdtl V14280))) shen.skip) (fail)))
(defun shen.<anysingle> (V14282) (let YaccParse (let Parse_shen.<non-return> (shen.<non-return> V14282) (if (not (= (fail) Parse_shen.<non-return>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<non-return>) (if (not (= (fail) Parse_shen.<anysingle>)) (shen.pair (hd Parse_shen.<anysingle>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V14282) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) shen.skip) (fail))) YaccParse)))
(defun shen.<non-return> (V14284) (if (cons? (hd V14284)) (let Parse_X (hd (hd V14284)) (if (not (element? Parse_X (cons 10 (cons 13 ())))) (shen.pair (hd (shen.pair (tl (hd V14284)) (shen.hdtl V14284))) shen.skip) (fail))) (fail)))
(defun shen.<return> (V14286) (if (cons? (hd V14286)) (let Parse_X (hd (hd V14286)) (if (element? Parse_X (cons 10 (cons 13 ()))) (shen.pair (hd (shen.pair (tl (hd V14286)) (shen.hdtl V14286))) shen.skip) (fail))) (fail)))
(defun shen.<multiline> (V14288) (let Parse_shen.<backslash> (shen.<backslash> V14288) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<times> (shen.<times> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (fail))))
(defun shen.<times> (V14290) (if (and (cons? (hd V14290)) (= 42 (hd (hd V14290)))) (shen.pair (hd (shen.pair (tl (hd V14290)) (shen.hdtl V14290))) shen.skip) (fail)))
(defun shen.<anymulti> (V14292) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V14292) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<times> (shen.<times> V14292) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<backslash>)) (shen.pair (hd Parse_shen.<backslash>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (if (cons? (hd V14292)) (let Parse_X (hd (hd V14292)) (let Parse_shen.<anymulti> (shen.<anymulti> (shen.pair (tl (hd V14292)) (shen.hdtl V14292))) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail)))) (fail)) YaccParse)) YaccParse)))
(defun shen.<whitespaces> (V14294) (let YaccParse (let Parse_shen.<whitespace> (shen.<whitespace> V14294) (if (not (= (fail) Parse_shen.<whitespace>)) (let Parse_shen.<whitespaces> (shen.<whitespaces> Parse_shen.<whitespace>) (if (not (= (fail) Parse_shen.<whitespaces>)) (shen.pair (hd Parse_shen.<whitespaces>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<whitespace> (shen.<whitespace> V14294) (if (not (= (fail) Parse_shen.<whitespace>)) (shen.pair (hd Parse_shen.<whitespace>) shen.skip) (fail))) YaccParse)))
(defun shen.<whitespace> (V14296) (if (cons? (hd V14296)) (let Parse_X (hd (hd V14296)) (if (let Parse_Case Parse_X (or (= Parse_Case 32) (or (= Parse_Case 13) (or (= Parse_Case 10) (= Parse_Case 9))))) (shen.pair (hd (shen.pair (tl (hd V14296)) (shen.hdtl V14296))) shen.skip) (fail))) (fail)))
(defun shen.cons_form (V14298) (cond ((= () V14298) ()) ((and (cons? V14298) (and (cons? (tl V14298)) (and (cons? (tl (tl V14298))) (and (= () (tl (tl (tl V14298)))) (= (hd (tl V14298)) bar!))))) (cons cons (cons (hd V14298) (tl (tl V14298))))) ((cons? V14298) (cons cons (cons (hd V14298) (cons (shen.cons_form (tl V14298)) ())))) (true (shen.f_error shen.cons_form))))
(defun shen.package-macro (V14303 V14304) (cond ((and (cons? V14303) (and (= $ (hd V14303)) (and (cons? (tl V14303)) (= () (tl (tl V14303)))))) (append (explode (hd (tl V14303))) V14304)) ((and (cons? V14303) (and (= package (hd V14303)) (and (cons? (tl V14303)) (and (= null (hd (tl V14303))) (cons? (tl (tl V14303))))))) (append (tl (tl (tl V14303))) V14304)) ((and (cons? V14303) (and (= package (hd V14303)) (and (cons? (tl V14303)) (cons? (tl (tl V14303)))))) (let ListofExceptions (shen.eval-without-macros (hd (tl (tl V14303)))) (let External (shen.record-exceptions ListofExceptions (hd (tl V14303))) (let PackageNameDot (intern (cn (str (hd (tl V14303))) ".")) (let ExpPackageName (explode (hd (tl V14303))) (let Packaged (shen.packageh PackageNameDot ListofExceptions (tl (tl (tl V14303))) ExpPackageName) (let Internal (shen.record-internal (hd (tl V14303)) (shen.internal-symbols ExpPackageName Packaged)) (append Packaged V14304)))))))) (true (cons V14303 V14304))))
(defun shen.record-exceptions (V14307 V14308) (let CurrExceptions (trap-error (get V14308 shen.external-symbols (value *property-vector*)) (lambda E ())) (let AllExceptions (union V14307 CurrExceptions) (put V14308 shen.external-symbols AllExceptions (value *property-vector*)))))
(defun shen.record-internal (V14311 V14312) (put V14311 shen.internal-symbols (union V14312 (trap-error (get V14311 shen.internal-symbols (value *property-vector*)) (lambda E ()))) (value *property-vector*)))
(defun shen.internal-symbols (V14323 V14324) (cond ((and (symbol? V14324) (shen.prefix? V14323 (explode V14324))) (cons V14324 ())) ((cons? V14324) (union (shen.internal-symbols V14323 (hd V14324)) (shen.internal-symbols V14323 (tl V14324)))) (true ())))
(defun shen.packageh (V14341 V14342 V14343 V14344) (cond ((cons? V14343) (cons (shen.packageh V14341 V14342 (hd V14343) V14344) (shen.packageh V14341 V14342 (tl V14343) V14344))) ((or (shen.sysfunc? V14343) (or (variable? V14343) (or (element? V14343 V14342) (or (shen.doubleunderline? V14343) (shen.singleunderline? V14343))))) V14343) ((and (symbol? V14343) (let ExplodeX (explode V14343) (and (not (shen.prefix? (cons "s" (cons "h" (cons "e" (cons "n" (cons "." ()))))) ExplodeX)) (not (shen.prefix? V14344 ExplodeX))))) (concat V14341 V14343)) (true V14343)))
(defun shen.<defprolog> (V13538) (let Parse_shen.<predicate*> (shen.<predicate*> V13538) (if (not (= (fail) Parse_shen.<predicate*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<predicate*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (hd (shen.prolog->shen (map (lambda Parse_X (shen.insert-predicate (shen.hdtl Parse_shen.<predicate*>) Parse_X)) (shen.hdtl Parse_shen.<clauses*>))))) (fail))) (fail))))
(defun shen.prolog-error (V13547 V13548) (cond ((and (cons? V13548) (and (cons? (tl V13548)) (= () (tl (tl V13548))))) (simple-error (cn "prolog syntax error in " (shen.app V13547 (cn " here:

 " (shen.app (shen.next-50 50 (hd V13548)) "
" shen.a)) shen.a)))) (true (simple-error (cn "prolog syntax error in " (shen.app V13547 "
" shen.a))))))
(defun shen.next-50 (V13555 V13556) (cond ((= () V13556) "") ((= 0 V13555) "") ((cons? V13556) (cn (shen.decons-string (hd V13556)) (shen.next-50 (- V13555 1) (tl V13556)))) (true (shen.f_error shen.next-50))))
(defun shen.decons-string (V13558) (cond ((and (cons? V13558) (and (= cons (hd V13558)) (and (cons? (tl V13558)) (and (cons? (tl (tl V13558))) (= () (tl (tl (tl V13558)))))))) (shen.app (shen.eval-cons V13558) " " shen.s)) (true (shen.app V13558 " " shen.r))))
(defun shen.insert-predicate (V13561 V13562) (cond ((and (cons? V13562) (and (cons? (tl V13562)) (= () (tl (tl V13562))))) (cons (cons V13561 (hd V13562)) (cons :- (tl V13562)))) (true (shen.f_error shen.insert-predicate))))
(defun shen.<predicate*> (V13564) (if (cons? (hd V13564)) (let Parse_X (hd (hd V13564)) (shen.pair (hd (shen.pair (tl (hd V13564)) (shen.hdtl V13564))) Parse_X)) (fail)))
(defun shen.<clauses*> (V13566) (let YaccParse (let Parse_shen.<clause*> (shen.<clause*> V13566) (if (not (= (fail) Parse_shen.<clause*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<clause*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (cons (shen.hdtl Parse_shen.<clause*>) (shen.hdtl Parse_shen.<clauses*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V13566) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))
(defun shen.<clause*> (V13568) (let Parse_shen.<head*> (shen.<head*> V13568) (if (not (= (fail) Parse_shen.<head*>)) (if (and (cons? (hd Parse_shen.<head*>)) (= <-- (hd (hd Parse_shen.<head*>)))) (let Parse_shen.<body*> (shen.<body*> (shen.pair (tl (hd Parse_shen.<head*>)) (shen.hdtl Parse_shen.<head*>))) (if (not (= (fail) Parse_shen.<body*>)) (let Parse_shen.<end*> (shen.<end*> Parse_shen.<body*>) (if (not (= (fail) Parse_shen.<end*>)) (shen.pair (hd Parse_shen.<end*>) (cons (shen.hdtl Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<body*>) ()))) (fail))) (fail))) (fail)) (fail))))
(defun shen.<head*> (V13570) (let YaccParse (let Parse_shen.<term*> (shen.<term*> V13570) (if (not (= (fail) Parse_shen.<term*>)) (let Parse_shen.<head*> (shen.<head*> Parse_shen.<term*>) (if (not (= (fail) Parse_shen.<head*>)) (shen.pair (hd Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<term*>) (shen.hdtl Parse_shen.<head*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V13570) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))
(defun shen.<term*> (V13572) (if (cons? (hd V13572)) (let Parse_X (hd (hd V13572)) (if (and (not (= <-- Parse_X)) (shen.legitimate-term? Parse_X)) (shen.pair (hd (shen.pair (tl (hd V13572)) (shen.hdtl V13572))) (shen.eval-cons Parse_X)) (fail))) (fail)))
(defun shen.legitimate-term? (V13578) (cond ((and (cons? V13578) (and (= cons (hd V13578)) (and (cons? (tl V13578)) (and (cons? (tl (tl V13578))) (= () (tl (tl (tl V13578)))))))) (and (shen.legitimate-term? (hd (tl V13578))) (shen.legitimate-term? (hd (tl (tl V13578)))))) ((and (cons? V13578) (and (= mode (hd V13578)) (and (cons? (tl V13578)) (and (cons? (tl (tl V13578))) (and (= + (hd (tl (tl V13578)))) (= () (tl (tl (tl V13578))))))))) (shen.legitimate-term? (hd (tl V13578)))) ((and (cons? V13578) (and (= mode (hd V13578)) (and (cons? (tl V13578)) (and (cons? (tl (tl V13578))) (and (= - (hd (tl (tl V13578)))) (= () (tl (tl (tl V13578))))))))) (shen.legitimate-term? (hd (tl V13578)))) ((cons? V13578) false) (true true)))
(defun shen.eval-cons (V13580) (cond ((and (cons? V13580) (and (= cons (hd V13580)) (and (cons? (tl V13580)) (and (cons? (tl (tl V13580))) (= () (tl (tl (tl V13580)))))))) (cons (shen.eval-cons (hd (tl V13580))) (shen.eval-cons (hd (tl (tl V13580)))))) ((and (cons? V13580) (and (= mode (hd V13580)) (and (cons? (tl V13580)) (and (cons? (tl (tl V13580))) (= () (tl (tl (tl V13580)))))))) (cons mode (cons (shen.eval-cons (hd (tl V13580))) (tl (tl V13580))))) (true V13580)))
(defun shen.<body*> (V13582) (let YaccParse (let Parse_shen.<literal*> (shen.<literal*> V13582) (if (not (= (fail) Parse_shen.<literal*>)) (let Parse_shen.<body*> (shen.<body*> Parse_shen.<literal*>) (if (not (= (fail) Parse_shen.<body*>)) (shen.pair (hd Parse_shen.<body*>) (cons (shen.hdtl Parse_shen.<literal*>) (shen.hdtl Parse_shen.<body*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V13582) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))
(defun shen.<literal*> (V13584) (let YaccParse (if (and (cons? (hd V13584)) (= ! (hd (hd V13584)))) (shen.pair (hd (shen.pair (tl (hd V13584)) (shen.hdtl V13584))) (cons cut (cons (intern "Throwcontrol") ()))) (fail)) (if (= YaccParse (fail)) (if (cons? (hd V13584)) (let Parse_X (hd (hd V13584)) (if (cons? Parse_X) (shen.pair (hd (shen.pair (tl (hd V13584)) (shen.hdtl V13584))) Parse_X) (fail))) (fail)) YaccParse)))
(defun shen.<end*> (V13586) (if (cons? (hd V13586)) (let Parse_X (hd (hd V13586)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V13586)) (shen.hdtl V13586))) Parse_X) (fail))) (fail)))
(defun cut (V13590 V13591 V13592) (let Result (thaw V13592) (if (= Result false) V13590 Result)))
(defun shen.insert_modes (V13594) (cond ((and (cons? V13594) (and (= mode (hd V13594)) (and (cons? (tl V13594)) (and (cons? (tl (tl V13594))) (= () (tl (tl (tl V13594)))))))) V13594) ((= () V13594) ()) ((cons? V13594) (cons (cons mode (cons (hd V13594) (cons + ()))) (cons mode (cons (shen.insert_modes (tl V13594)) (cons - ()))))) (true V13594)))
(defun shen.s-prolog (V13596) (map (lambda X (eval X)) (shen.prolog->shen V13596)))
(defun shen.prolog->shen (V13598) (map (lambda X (shen.compile_prolog_procedure X)) (shen.group_clauses (map (lambda X (shen.s-prolog_clause X)) (mapcan (lambda X (shen.head_abstraction X)) V13598)))))
(defun shen.s-prolog_clause (V13600) (cond ((and (cons? V13600) (and (cons? (tl V13600)) (and (= :- (hd (tl V13600))) (and (cons? (tl (tl V13600))) (= () (tl (tl (tl V13600)))))))) (cons (hd V13600) (cons :- (cons (map (lambda X (shen.s-prolog_literal X)) (hd (tl (tl V13600)))) ())))) (true (shen.f_error shen.s-prolog_clause))))
(defun shen.head_abstraction (V13602) (cond ((and (cons? V13602) (and (cons? (tl V13602)) (and (= :- (hd (tl V13602))) (and (cons? (tl (tl V13602))) (and (= () (tl (tl (tl V13602)))) (< (shen.complexity_head (hd V13602)) (value shen.*maxcomplexity*))))))) (cons V13602 ())) ((and (cons? V13602) (and (cons? (hd V13602)) (and (cons? (tl V13602)) (and (= :- (hd (tl V13602))) (and (cons? (tl (tl V13602))) (= () (tl (tl (tl V13602))))))))) (let Terms (map (lambda Y (gensym V)) (tl (hd V13602))) (let XTerms (shen.rcons_form (shen.remove_modes (tl (hd V13602)))) (let Literal (cons unify (cons (shen.cons_form Terms) (cons XTerms ()))) (let Clause (cons (cons (hd (hd V13602)) Terms) (cons :- (cons (cons Literal (hd (tl (tl V13602)))) ()))) (cons Clause ())))))) (true (shen.f_error shen.head_abstraction))))
(defun shen.complexity_head (V13608) (cond ((cons? V13608) (shen.product (map (lambda X (shen.complexity X)) (tl V13608)))) (true (shen.f_error shen.complexity_head))))
(defun shen.complexity (V13617) (cond ((and (cons? V13617) (and (= mode (hd V13617)) (and (cons? (tl V13617)) (and (cons? (hd (tl V13617))) (and (= mode (hd (hd (tl V13617)))) (and (cons? (tl (hd (tl V13617)))) (and (cons? (tl (tl (hd (tl V13617))))) (and (= () (tl (tl (tl (hd (tl V13617)))))) (and (cons? (tl (tl V13617))) (= () (tl (tl (tl V13617))))))))))))) (shen.complexity (hd (tl V13617)))) ((and (cons? V13617) (and (= mode (hd V13617)) (and (cons? (tl V13617)) (and (cons? (hd (tl V13617))) (and (cons? (tl (tl V13617))) (and (= + (hd (tl (tl V13617)))) (= () (tl (tl (tl V13617)))))))))) (* 2 (* (shen.complexity (cons mode (cons (hd (hd (tl V13617))) (tl (tl V13617))))) (shen.complexity (cons mode (cons (tl (hd (tl V13617))) (tl (tl V13617)))))))) ((and (cons? V13617) (and (= mode (hd V13617)) (and (cons? (tl V13617)) (and (cons? (hd (tl V13617))) (and (cons? (tl (tl V13617))) (and (= - (hd (tl (tl V13617)))) (= () (tl (tl (tl V13617)))))))))) (* (shen.complexity (cons mode (cons (hd (hd (tl V13617))) (tl (tl V13617))))) (shen.complexity (cons mode (cons (tl (hd (tl V13617))) (tl (tl V13617))))))) ((and (cons? V13617) (and (= mode (hd V13617)) (and (cons? (tl V13617)) (and (cons? (tl (tl V13617))) (and (= () (tl (tl (tl V13617)))) (variable? (hd (tl V13617)))))))) 1) ((and (cons? V13617) (and (= mode (hd V13617)) (and (cons? (tl V13617)) (and (cons? (tl (tl V13617))) (and (= + (hd (tl (tl V13617)))) (= () (tl (tl (tl V13617))))))))) 2) ((and (cons? V13617) (and (= mode (hd V13617)) (and (cons? (tl V13617)) (and (cons? (tl (tl V13617))) (and (= - (hd (tl (tl V13617)))) (= () (tl (tl (tl V13617))))))))) 1) (true (shen.complexity (cons mode (cons V13617 (cons + ())))))))
(defun shen.product (V13619) (cond ((= () V13619) 1) ((cons? V13619) (* (hd V13619) (shen.product (tl V13619)))) (true (shen.f_error shen.product))))
(defun shen.s-prolog_literal (V13621) (cond ((and (cons? V13621) (and (= is (hd V13621)) (and (cons? (tl V13621)) (and (cons? (tl (tl V13621))) (= () (tl (tl (tl V13621)))))))) (cons bind (cons (hd (tl V13621)) (cons (shen.insert_deref (hd (tl (tl V13621)))) ())))) ((and (cons? V13621) (and (= when (hd V13621)) (and (cons? (tl V13621)) (= () (tl (tl V13621)))))) (cons fwhen (cons (shen.insert_deref (hd (tl V13621))) ()))) ((and (cons? V13621) (and (= bind (hd V13621)) (and (cons? (tl V13621)) (and (cons? (tl (tl V13621))) (= () (tl (tl (tl V13621)))))))) (cons bind (cons (hd (tl V13621)) (cons (shen.insert_lazyderef (hd (tl (tl V13621)))) ())))) ((and (cons? V13621) (and (= fwhen (hd V13621)) (and (cons? (tl V13621)) (= () (tl (tl V13621)))))) (cons fwhen (cons (shen.insert_lazyderef (hd (tl V13621))) ()))) ((cons? V13621) V13621) (true (shen.f_error shen.s-prolog_literal))))
(defun shen.insert_deref (V13623) (cond ((variable? V13623) (cons shen.deref (cons V13623 (cons ProcessN ())))) ((cons? V13623) (cons (shen.insert_deref (hd V13623)) (shen.insert_deref (tl V13623)))) (true V13623)))
(defun shen.insert_lazyderef (V13625) (cond ((variable? V13625) (cons shen.lazyderef (cons V13625 (cons ProcessN ())))) ((cons? V13625) (cons (shen.insert_lazyderef (hd V13625)) (shen.insert_lazyderef (tl V13625)))) (true V13625)))
(defun shen.group_clauses (V13627) (cond ((= () V13627) ()) ((cons? V13627) (let Group (shen.collect (lambda X (shen.same_predicate? (hd V13627) X)) V13627) (let Rest (difference V13627 Group) (cons Group (shen.group_clauses Rest))))) (true (shen.f_error shen.group_clauses))))
(defun shen.collect (V13632 V13633) (cond ((= () V13633) ()) ((cons? V13633) (if (V13632 (hd V13633)) (cons (hd V13633) (shen.collect V13632 (tl V13633))) (shen.collect V13632 (tl V13633)))) (true (shen.f_error shen.collect))))
(defun shen.same_predicate? (V13652 V13653) (cond ((and (cons? V13652) (and (cons? (hd V13652)) (and (cons? V13653) (cons? (hd V13653))))) (= (hd (hd V13652)) (hd (hd V13653)))) (true (shen.f_error shen.same_predicate?))))
(defun shen.compile_prolog_procedure (V13655) (let F (shen.procedure_name V13655) (let Shen (shen.clauses-to-shen F V13655) Shen)))
(defun shen.procedure_name (V13669) (cond ((and (cons? V13669) (and (cons? (hd V13669)) (cons? (hd (hd V13669))))) (hd (hd (hd V13669)))) (true (shen.f_error shen.procedure_name))))
(defun shen.clauses-to-shen (V13672 V13673) (let Linear (map (lambda X (shen.linearise-clause X)) V13673) (let Arity (shen.prolog-aritycheck V13672 (map (lambda X (head X)) V13673)) (let Parameters (shen.parameters Arity) (let AUM_instructions (map (lambda X (shen.aum X Parameters)) Linear) (let Code (shen.catch-cut (shen.nest-disjunct (map (lambda X (shen.aum_to_shen X)) AUM_instructions))) (let ShenDef (cons define (cons V13672 (append Parameters (append (cons ProcessN (cons Continuation ())) (cons -> (cons Code ())))))) ShenDef)))))))
(defun shen.catch-cut (V13675) (cond ((not (shen.occurs? cut V13675)) V13675) (true (cons let (cons Throwcontrol (cons (cons shen.catchpoint ()) (cons (cons shen.cutpoint (cons Throwcontrol (cons V13675 ()))) ())))))))
(defun shen.catchpoint () (set shen.*catch* (+ 1 (value shen.*catch*))))
(defun shen.cutpoint (V13683 V13684) (cond ((= V13684 V13683) false) (true V13684)))
(defun shen.nest-disjunct (V13686) (cond ((and (cons? V13686) (= () (tl V13686))) (hd V13686)) ((cons? V13686) (shen.lisp-or (hd V13686) (shen.nest-disjunct (tl V13686)))) (true (shen.f_error shen.nest-disjunct))))
(defun shen.lisp-or (V13689 V13690) (cons let (cons Case (cons V13689 (cons (cons if (cons (cons = (cons Case (cons false ()))) (cons V13690 (cons Case ())))) ())))))
(defun shen.prolog-aritycheck (V13695 V13696) (cond ((and (cons? V13696) (= () (tl V13696))) (- (length (hd V13696)) 1)) ((and (cons? V13696) (cons? (tl V13696))) (if (= (length (hd V13696)) (length (hd (tl V13696)))) (shen.prolog-aritycheck V13695 (tl V13696)) (simple-error (cn "arity error in prolog procedure " (shen.app (cons V13695 ()) "
" shen.a))))) (true (shen.f_error shen.prolog-aritycheck))))
(defun shen.linearise-clause (V13698) (cond ((and (cons? V13698) (and (cons? (tl V13698)) (and (= :- (hd (tl V13698))) (and (cons? (tl (tl V13698))) (= () (tl (tl (tl V13698)))))))) (let Linear (shen.linearise (cons (hd V13698) (tl (tl V13698)))) (shen.clause_form Linear))) (true (shen.f_error shen.linearise-clause))))
(defun shen.clause_form (V13700) (cond ((and (cons? V13700) (and (cons? (tl V13700)) (= () (tl (tl V13700))))) (cons (shen.explicit_modes (hd V13700)) (cons :- (cons (shen.cf_help (hd (tl V13700))) ())))) (true (shen.f_error shen.clause_form))))
(defun shen.explicit_modes (V13702) (cond ((cons? V13702) (cons (hd V13702) (map (lambda X (shen.em_help X)) (tl V13702)))) (true (shen.f_error shen.explicit_modes))))
(defun shen.em_help (V13704) (cond ((and (cons? V13704) (and (= mode (hd V13704)) (and (cons? (tl V13704)) (and (cons? (tl (tl V13704))) (= () (tl (tl (tl V13704)))))))) V13704) (true (cons mode (cons V13704 (cons + ()))))))
(defun shen.cf_help (V13706) (cond ((and (cons? V13706) (and (= where (hd V13706)) (and (cons? (tl V13706)) (and (cons? (hd (tl V13706))) (and (= = (hd (hd (tl V13706)))) (and (cons? (tl (hd (tl V13706)))) (and (cons? (tl (tl (hd (tl V13706))))) (and (= () (tl (tl (tl (hd (tl V13706)))))) (and (cons? (tl (tl V13706))) (= () (tl (tl (tl V13706))))))))))))) (cons (cons (if (value shen.*occurs*) unify! unify) (tl (hd (tl V13706)))) (shen.cf_help (hd (tl (tl V13706)))))) (true V13706)))
(defun occurs-check (V13712) (cond ((= + V13712) (set shen.*occurs* true)) ((= - V13712) (set shen.*occurs* false)) (true (simple-error "occurs-check expects + or -
"))))
(defun shen.aum (V13715 V13716) (cond ((and (cons? V13715) (and (cons? (hd V13715)) (and (cons? (tl V13715)) (and (= :- (hd (tl V13715))) (and (cons? (tl (tl V13715))) (= () (tl (tl (tl V13715))))))))) (let MuApplication (shen.make_mu_application (cons shen.mu (cons (tl (hd V13715)) (cons (shen.continuation_call (tl (hd V13715)) (hd (tl (tl V13715)))) ()))) V13716) (shen.mu_reduction MuApplication +))) (true (shen.f_error shen.aum))))
(defun shen.continuation_call (V13719 V13720) (let VTerms (cons ProcessN (shen.extract_vars V13719)) (let VBody (shen.extract_vars V13720) (let Free (remove Throwcontrol (difference VBody VTerms)) (shen.cc_help Free V13720)))))
(defun remove (V13723 V13724) (shen.remove-h V13723 V13724 ()))
(defun shen.remove-h (V13731 V13732 V13733) (cond ((= () V13732) (reverse V13733)) ((and (cons? V13732) (= (hd V13732) V13731)) (shen.remove-h (hd V13732) (tl V13732) V13733)) ((cons? V13732) (shen.remove-h V13731 (tl V13732) (cons (hd V13732) V13733))) (true (shen.f_error shen.remove-h))))
(defun shen.cc_help (V13736 V13737) (cond ((and (= () V13736) (= () V13737)) (cons shen.pop (cons shen.the (cons shen.stack ())))) ((= () V13737) (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V13736 (cons and (cons shen.then (cons (cons shen.pop (cons shen.the (cons shen.stack ()))) ()))))))))) ((= () V13736) (cons call (cons shen.the (cons shen.continuation (cons V13737 ()))))) (true (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V13736 (cons and (cons shen.then (cons (cons call (cons shen.the (cons shen.continuation (cons V13737 ())))) ())))))))))))
(defun shen.make_mu_application (V13740 V13741) (cond ((and (cons? V13740) (and (= shen.mu (hd V13740)) (and (cons? (tl V13740)) (and (= () (hd (tl V13740))) (and (cons? (tl (tl V13740))) (and (= () (tl (tl (tl V13740)))) (= () V13741))))))) (hd (tl (tl V13740)))) ((and (cons? V13740) (and (= shen.mu (hd V13740)) (and (cons? (tl V13740)) (and (cons? (hd (tl V13740))) (and (cons? (tl (tl V13740))) (and (= () (tl (tl (tl V13740)))) (cons? V13741))))))) (cons (cons shen.mu (cons (hd (hd (tl V13740))) (cons (shen.make_mu_application (cons shen.mu (cons (tl (hd (tl V13740))) (tl (tl V13740)))) (tl V13741)) ()))) (cons (hd V13741) ()))) (true (shen.f_error shen.make_mu_application))))
(defun shen.mu_reduction (V13750 V13751) (cond ((and (cons? V13750) (and (cons? (hd V13750)) (and (= shen.mu (hd (hd V13750))) (and (cons? (tl (hd V13750))) (and (cons? (hd (tl (hd V13750)))) (and (= mode (hd (hd (tl (hd V13750))))) (and (cons? (tl (hd (tl (hd V13750))))) (and (cons? (tl (tl (hd (tl (hd V13750)))))) (and (= () (tl (tl (tl (hd (tl (hd V13750))))))) (and (cons? (tl (tl (hd V13750)))) (and (= () (tl (tl (tl (hd V13750))))) (and (cons? (tl V13750)) (= () (tl (tl V13750))))))))))))))) (shen.mu_reduction (cons (cons shen.mu (cons (hd (tl (hd (tl (hd V13750))))) (tl (tl (hd V13750))))) (tl V13750)) (hd (tl (tl (hd (tl (hd V13750)))))))) ((and (cons? V13750) (and (cons? (hd V13750)) (and (= shen.mu (hd (hd V13750))) (and (cons? (tl (hd V13750))) (and (cons? (tl (tl (hd V13750)))) (and (= () (tl (tl (tl (hd V13750))))) (and (cons? (tl V13750)) (and (= () (tl (tl V13750))) (= _ (hd (tl (hd V13750)))))))))))) (shen.mu_reduction (hd (tl (tl (hd V13750)))) V13751)) ((and (cons? V13750) (and (cons? (hd V13750)) (and (= shen.mu (hd (hd V13750))) (and (cons? (tl (hd V13750))) (and (cons? (tl (tl (hd V13750)))) (and (= () (tl (tl (tl (hd V13750))))) (and (cons? (tl V13750)) (and (= () (tl (tl V13750))) (shen.ephemeral_variable? (hd (tl (hd V13750))) (hd (tl V13750))))))))))) (subst (hd (tl V13750)) (hd (tl (hd V13750))) (shen.mu_reduction (hd (tl (tl (hd V13750)))) V13751))) ((and (cons? V13750) (and (cons? (hd V13750)) (and (= shen.mu (hd (hd V13750))) (and (cons? (tl (hd V13750))) (and (cons? (tl (tl (hd V13750)))) (and (= () (tl (tl (tl (hd V13750))))) (and (cons? (tl V13750)) (and (= () (tl (tl V13750))) (variable? (hd (tl (hd V13750)))))))))))) (cons let (cons (hd (tl (hd V13750))) (cons shen.be (cons (hd (tl V13750)) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V13750)))) V13751) ()))))))) ((and (cons? V13750) (and (cons? (hd V13750)) (and (= shen.mu (hd (hd V13750))) (and (cons? (tl (hd V13750))) (and (cons? (tl (tl (hd V13750)))) (and (= () (tl (tl (tl (hd V13750))))) (and (cons? (tl V13750)) (and (= () (tl (tl V13750))) (and (= - V13751) (shen.prolog_constant? (hd (tl (hd V13750))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V13750))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V13750))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V13750)))) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V13750) (and (cons? (hd V13750)) (and (= shen.mu (hd (hd V13750))) (and (cons? (tl (hd V13750))) (and (cons? (tl (tl (hd V13750)))) (and (= () (tl (tl (tl (hd V13750))))) (and (cons? (tl V13750)) (and (= () (tl (tl V13750))) (and (= + V13751) (shen.prolog_constant? (hd (tl (hd V13750))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V13750))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V13750))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V13750)))) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (hd (tl (hd V13750))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V13750)))) +) ())))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) ((and (cons? V13750) (and (cons? (hd V13750)) (and (= shen.mu (hd (hd V13750))) (and (cons? (tl (hd V13750))) (and (cons? (hd (tl (hd V13750)))) (and (cons? (tl (tl (hd V13750)))) (and (= () (tl (tl (tl (hd V13750))))) (and (cons? (tl V13750)) (and (= () (tl (tl V13750))) (= - V13751)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V13750))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V13750)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V13750)))) (tl (tl (hd V13750))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V13750) (and (cons? (hd V13750)) (and (= shen.mu (hd (hd V13750))) (and (cons? (tl (hd V13750))) (and (cons? (hd (tl (hd V13750)))) (and (cons? (tl (tl (hd V13750)))) (and (= () (tl (tl (tl (hd V13750))))) (and (cons? (tl V13750)) (and (= () (tl (tl V13750))) (= + V13751)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V13750))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V13750)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V13750)))) (tl (tl (hd V13750))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (shen.extract_vars (hd (tl (hd V13750)))) (cons and (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (shen.rcons_form (shen.remove_modes (hd (tl (hd V13750))))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V13750)))) +) ())))))) ())))))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) (true V13750)))
(defun shen.rcons_form (V13753) (cond ((cons? V13753) (cons cons (cons (shen.rcons_form (hd V13753)) (cons (shen.rcons_form (tl V13753)) ())))) (true V13753)))
(defun shen.remove_modes (V13755) (cond ((and (cons? V13755) (and (= mode (hd V13755)) (and (cons? (tl V13755)) (and (cons? (tl (tl V13755))) (and (= + (hd (tl (tl V13755)))) (= () (tl (tl (tl V13755))))))))) (shen.remove_modes (hd (tl V13755)))) ((and (cons? V13755) (and (= mode (hd V13755)) (and (cons? (tl V13755)) (and (cons? (tl (tl V13755))) (and (= - (hd (tl (tl V13755)))) (= () (tl (tl (tl V13755))))))))) (shen.remove_modes (hd (tl V13755)))) ((cons? V13755) (cons (shen.remove_modes (hd V13755)) (shen.remove_modes (tl V13755)))) (true V13755)))
(defun shen.ephemeral_variable? (V13758 V13759) (and (variable? V13758) (variable? V13759)))
(defun shen.prolog_constant? (V13769) (cond ((cons? V13769) false) (true true)))
(defun shen.aum_to_shen (V13771) (cond ((and (cons? V13771) (and (= let (hd V13771)) (and (cons? (tl V13771)) (and (cons? (tl (tl V13771))) (and (= shen.be (hd (tl (tl V13771)))) (and (cons? (tl (tl (tl V13771)))) (and (cons? (tl (tl (tl (tl V13771))))) (and (= in (hd (tl (tl (tl (tl V13771)))))) (and (cons? (tl (tl (tl (tl (tl V13771)))))) (= () (tl (tl (tl (tl (tl (tl V13771)))))))))))))))) (cons let (cons (hd (tl V13771)) (cons (shen.aum_to_shen (hd (tl (tl (tl V13771))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V13771))))))) ()))))) ((and (cons? V13771) (and (= shen.the (hd V13771)) (and (cons? (tl V13771)) (and (= shen.result (hd (tl V13771))) (and (cons? (tl (tl V13771))) (and (= shen.of (hd (tl (tl V13771)))) (and (cons? (tl (tl (tl V13771)))) (and (= shen.dereferencing (hd (tl (tl (tl V13771))))) (and (cons? (tl (tl (tl (tl V13771))))) (= () (tl (tl (tl (tl (tl V13771))))))))))))))) (cons shen.lazyderef (cons (shen.aum_to_shen (hd (tl (tl (tl (tl V13771)))))) (cons ProcessN ())))) ((and (cons? V13771) (and (= if (hd V13771)) (and (cons? (tl V13771)) (and (cons? (tl (tl V13771))) (and (= shen.then (hd (tl (tl V13771)))) (and (cons? (tl (tl (tl V13771)))) (and (cons? (tl (tl (tl (tl V13771))))) (and (= shen.else (hd (tl (tl (tl (tl V13771)))))) (and (cons? (tl (tl (tl (tl (tl V13771)))))) (= () (tl (tl (tl (tl (tl (tl V13771)))))))))))))))) (cons if (cons (shen.aum_to_shen (hd (tl V13771))) (cons (shen.aum_to_shen (hd (tl (tl (tl V13771))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V13771))))))) ()))))) ((and (cons? V13771) (and (cons? (tl V13771)) (and (= is (hd (tl V13771))) (and (cons? (tl (tl V13771))) (and (= shen.a (hd (tl (tl V13771)))) (and (cons? (tl (tl (tl V13771)))) (and (= shen.variable (hd (tl (tl (tl V13771))))) (= () (tl (tl (tl (tl V13771)))))))))))) (cons shen.pvar? (cons (hd V13771) ()))) ((and (cons? V13771) (and (cons? (tl V13771)) (and (= is (hd (tl V13771))) (and (cons? (tl (tl V13771))) (and (= shen.a (hd (tl (tl V13771)))) (and (cons? (tl (tl (tl V13771)))) (and (= shen.non-empty (hd (tl (tl (tl V13771))))) (and (cons? (tl (tl (tl (tl V13771))))) (and (= list (hd (tl (tl (tl (tl V13771)))))) (= () (tl (tl (tl (tl (tl V13771))))))))))))))) (cons cons? (cons (hd V13771) ()))) ((and (cons? V13771) (and (= shen.rename (hd V13771)) (and (cons? (tl V13771)) (and (= shen.the (hd (tl V13771))) (and (cons? (tl (tl V13771))) (and (= shen.variables (hd (tl (tl V13771)))) (and (cons? (tl (tl (tl V13771)))) (and (= in (hd (tl (tl (tl V13771))))) (and (cons? (tl (tl (tl (tl V13771))))) (and (= () (hd (tl (tl (tl (tl V13771)))))) (and (cons? (tl (tl (tl (tl (tl V13771)))))) (and (= and (hd (tl (tl (tl (tl (tl V13771))))))) (and (cons? (tl (tl (tl (tl (tl (tl V13771))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V13771)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V13771)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V13771)))))))))))))))))))))))) (shen.aum_to_shen (hd (tl (tl (tl (tl (tl (tl (tl V13771)))))))))) ((and (cons? V13771) (and (= shen.rename (hd V13771)) (and (cons? (tl V13771)) (and (= shen.the (hd (tl V13771))) (and (cons? (tl (tl V13771))) (and (= shen.variables (hd (tl (tl V13771)))) (and (cons? (tl (tl (tl V13771)))) (and (= in (hd (tl (tl (tl V13771))))) (and (cons? (tl (tl (tl (tl V13771))))) (and (cons? (hd (tl (tl (tl (tl V13771)))))) (and (cons? (tl (tl (tl (tl (tl V13771)))))) (and (= and (hd (tl (tl (tl (tl (tl V13771))))))) (and (cons? (tl (tl (tl (tl (tl (tl V13771))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V13771)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V13771)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V13771)))))))))))))))))))))))) (cons let (cons (hd (hd (tl (tl (tl (tl V13771)))))) (cons (cons shen.newpv (cons ProcessN ())) (cons (shen.aum_to_shen (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (tl (hd (tl (tl (tl (tl V13771)))))) (tl (tl (tl (tl (tl V13771))))))))))) ()))))) ((and (cons? V13771) (and (= bind (hd V13771)) (and (cons? (tl V13771)) (and (cons? (tl (tl V13771))) (and (= shen.to (hd (tl (tl V13771)))) (and (cons? (tl (tl (tl V13771)))) (and (cons? (tl (tl (tl (tl V13771))))) (and (= in (hd (tl (tl (tl (tl V13771)))))) (and (cons? (tl (tl (tl (tl (tl V13771)))))) (= () (tl (tl (tl (tl (tl (tl V13771)))))))))))))))) (cons do (cons (cons shen.bindv (cons (hd (tl V13771)) (cons (shen.chwild (hd (tl (tl (tl V13771))))) (cons ProcessN ())))) (cons (cons let (cons Result (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V13771))))))) (cons (cons do (cons (cons shen.unbindv (cons (hd (tl V13771)) (cons ProcessN ()))) (cons Result ()))) ())))) ())))) ((and (cons? V13771) (and (cons? (tl V13771)) (and (= is (hd (tl V13771))) (and (cons? (tl (tl V13771))) (and (= identical (hd (tl (tl V13771)))) (and (cons? (tl (tl (tl V13771)))) (and (= shen.to (hd (tl (tl (tl V13771))))) (and (cons? (tl (tl (tl (tl V13771))))) (= () (tl (tl (tl (tl (tl V13771)))))))))))))) (cons = (cons (hd (tl (tl (tl (tl V13771))))) (cons (hd V13771) ())))) ((= shen.failed! V13771) false) ((and (cons? V13771) (and (= shen.the (hd V13771)) (and (cons? (tl V13771)) (and (= head (hd (tl V13771))) (and (cons? (tl (tl V13771))) (and (= shen.of (hd (tl (tl V13771)))) (and (cons? (tl (tl (tl V13771)))) (= () (tl (tl (tl (tl V13771)))))))))))) (cons hd (tl (tl (tl V13771))))) ((and (cons? V13771) (and (= shen.the (hd V13771)) (and (cons? (tl V13771)) (and (= tail (hd (tl V13771))) (and (cons? (tl (tl V13771))) (and (= shen.of (hd (tl (tl V13771)))) (and (cons? (tl (tl (tl V13771)))) (= () (tl (tl (tl (tl V13771)))))))))))) (cons tl (tl (tl (tl V13771))))) ((and (cons? V13771) (and (= shen.pop (hd V13771)) (and (cons? (tl V13771)) (and (= shen.the (hd (tl V13771))) (and (cons? (tl (tl V13771))) (and (= shen.stack (hd (tl (tl V13771)))) (= () (tl (tl (tl V13771)))))))))) (cons do (cons (cons shen.incinfs ()) (cons (cons thaw (cons Continuation ())) ())))) ((and (cons? V13771) (and (= call (hd V13771)) (and (cons? (tl V13771)) (and (= shen.the (hd (tl V13771))) (and (cons? (tl (tl V13771))) (and (= shen.continuation (hd (tl (tl V13771)))) (and (cons? (tl (tl (tl V13771)))) (= () (tl (tl (tl (tl V13771)))))))))))) (cons do (cons (cons shen.incinfs ()) (cons (shen.call_the_continuation (shen.chwild (hd (tl (tl (tl V13771))))) ProcessN Continuation) ())))) (true V13771)))
(defun shen.chwild (V13773) (cond ((= V13773 _) (cons shen.newpv (cons ProcessN ()))) ((cons? V13773) (map (lambda Z (shen.chwild Z)) V13773)) (true V13773)))
(defun shen.newpv (V13775) (let Count+1 (+ (<-address (value shen.*varcounter*) V13775) 1) (let IncVar (address-> (value shen.*varcounter*) V13775 Count+1) (let Vector (<-address (value shen.*prologvectors*) V13775) (let ResizeVectorIfNeeded (if (= Count+1 (limit Vector)) (shen.resizeprocessvector V13775 Count+1) shen.skip) (shen.mk-pvar Count+1))))))
(defun shen.resizeprocessvector (V13778 V13779) (let Vector (<-address (value shen.*prologvectors*) V13778) (let BigVector (shen.resize-vector Vector (+ V13779 V13779) shen.-null-) (address-> (value shen.*prologvectors*) V13778 BigVector))))
(defun shen.resize-vector (V13783 V13784 V13785) (let BigVector (address-> (absvector (+ 1 V13784)) 0 V13784) (shen.copy-vector V13783 BigVector (limit V13783) V13784 V13785)))
(defun shen.copy-vector (V13791 V13792 V13793 V13794 V13795) (shen.copy-vector-stage-2 (+ 1 V13793) (+ V13794 1) V13795 (shen.copy-vector-stage-1 1 V13791 V13792 (+ 1 V13793))))
(defun shen.copy-vector-stage-1 (V13803 V13804 V13805 V13806) (cond ((= V13806 V13803) V13805) (true (shen.copy-vector-stage-1 (+ 1 V13803) V13804 (address-> V13805 V13803 (<-address V13804 V13803)) V13806))))
(defun shen.copy-vector-stage-2 (V13814 V13815 V13816 V13817) (cond ((= V13815 V13814) V13817) (true (shen.copy-vector-stage-2 (+ V13814 1) V13815 V13816 (address-> V13817 V13814 V13816)))))
(defun shen.mk-pvar (V13819) (address-> (address-> (absvector 2) 0 shen.pvar) 1 V13819))
(defun shen.pvar? (V13821) (trap-error (and (absvector? V13821) (= (<-address V13821 0) shen.pvar)) (lambda E false)))
(defun shen.bindv (V13825 V13826 V13827) (let Vector (<-address (value shen.*prologvectors*) V13827) (address-> Vector (<-address V13825 1) V13826)))
(defun shen.unbindv (V13830 V13831) (let Vector (<-address (value shen.*prologvectors*) V13831) (address-> Vector (<-address V13830 1) shen.-null-)))
(defun shen.incinfs () (set shen.*infs* (+ 1 (value shen.*infs*))))
(defun shen.call_the_continuation (V13835 V13836 V13837) (cond ((and (cons? V13835) (and (cons? (hd V13835)) (= () (tl V13835)))) (cons (hd (hd V13835)) (append (tl (hd V13835)) (cons V13836 (cons V13837 ()))))) ((and (cons? V13835) (cons? (hd V13835))) (let NewContinuation (shen.newcontinuation (tl V13835) V13836 V13837) (cons (hd (hd V13835)) (append (tl (hd V13835)) (cons V13836 (cons NewContinuation ())))))) (true (shen.f_error shen.call_the_continuation))))
(defun shen.newcontinuation (V13841 V13842 V13843) (cond ((= () V13841) V13843) ((and (cons? V13841) (cons? (hd V13841))) (cons freeze (cons (cons (hd (hd V13841)) (append (tl (hd V13841)) (cons V13842 (cons (shen.newcontinuation (tl V13841) V13842 V13843) ())))) ()))) (true (shen.f_error shen.newcontinuation))))
(defun return (V13851 V13852 V13853) (shen.deref V13851 V13852))
(defun shen.measure&return (V13861 V13862 V13863) (do (shen.prhush (shen.app (value shen.*infs*) " inferences
" shen.a) (stoutput)) (shen.deref V13861 V13862)))
(defun unify (V13868 V13869 V13870 V13871) (shen.lzy= (shen.lazyderef V13868 V13870) (shen.lazyderef V13869 V13870) V13870 V13871))
(defun shen.lzy= (V13893 V13894 V13895 V13896) (cond ((= V13894 V13893) (thaw V13896)) ((shen.pvar? V13893) (bind V13893 V13894 V13895 V13896)) ((shen.pvar? V13894) (bind V13894 V13893 V13895 V13896)) ((and (cons? V13893) (cons? V13894)) (shen.lzy= (shen.lazyderef (hd V13893) V13895) (shen.lazyderef (hd V13894) V13895) V13895 (freeze (shen.lzy= (shen.lazyderef (tl V13893) V13895) (shen.lazyderef (tl V13894) V13895) V13895 V13896)))) (true false)))
(defun shen.deref (V13899 V13900) (cond ((cons? V13899) (cons (shen.deref (hd V13899) V13900) (shen.deref (tl V13899) V13900))) (true (if (shen.pvar? V13899) (let Value (shen.valvector V13899 V13900) (if (= Value shen.-null-) V13899 (shen.deref Value V13900))) V13899))))
(defun shen.lazyderef (V13903 V13904) (if (shen.pvar? V13903) (let Value (shen.valvector V13903 V13904) (if (= Value shen.-null-) V13903 (shen.lazyderef Value V13904))) V13903))
(defun shen.valvector (V13907 V13908) (<-address (<-address (value shen.*prologvectors*) V13908) (<-address V13907 1)))
(defun unify! (V13913 V13914 V13915 V13916) (shen.lzy=! (shen.lazyderef V13913 V13915) (shen.lazyderef V13914 V13915) V13915 V13916))
(defun shen.lzy=! (V13938 V13939 V13940 V13941) (cond ((= V13939 V13938) (thaw V13941)) ((and (shen.pvar? V13938) (not (shen.occurs? V13938 (shen.deref V13939 V13940)))) (bind V13938 V13939 V13940 V13941)) ((and (shen.pvar? V13939) (not (shen.occurs? V13939 (shen.deref V13938 V13940)))) (bind V13939 V13938 V13940 V13941)) ((and (cons? V13938) (cons? V13939)) (shen.lzy=! (shen.lazyderef (hd V13938) V13940) (shen.lazyderef (hd V13939) V13940) V13940 (freeze (shen.lzy=! (shen.lazyderef (tl V13938) V13940) (shen.lazyderef (tl V13939) V13940) V13940 V13941)))) (true false)))
(defun shen.occurs? (V13953 V13954) (cond ((= V13954 V13953) true) ((cons? V13954) (or (shen.occurs? V13953 (hd V13954)) (shen.occurs? V13953 (tl V13954)))) (true false)))
(defun identical (V13959 V13960 V13961 V13962) (shen.lzy== (shen.lazyderef V13959 V13961) (shen.lazyderef V13960 V13961) V13961 V13962))
(defun shen.lzy== (V13984 V13985 V13986 V13987) (cond ((= V13985 V13984) (thaw V13987)) ((and (cons? V13984) (cons? V13985)) (shen.lzy== (shen.lazyderef (hd V13984) V13986) (shen.lazyderef (hd V13985) V13986) V13986 (freeze (shen.lzy== (tl V13984) (tl V13985) V13986 V13987)))) (true false)))
(defun shen.pvar (V13989) (cn "Var" (shen.app (<-address V13989 1) "" shen.a)))
(defun bind (V13994 V13995 V13996 V13997) (do (shen.bindv V13994 V13995 V13996) (let Result (thaw V13997) (do (shen.unbindv V13994 V13996) Result))))
(defun fwhen (V14015 V14016 V14017) (cond ((= true V14015) (thaw V14017)) ((= false V14015) false) (true (simple-error (cn "fwhen expects a boolean: not " (shen.app V14015 "%" shen.s))))))
(defun call (V14033 V14034 V14035) (cond ((cons? V14033) (shen.call-help (function (shen.lazyderef (hd V14033) V14034)) (tl V14033) V14034 V14035)) (true false)))
(defun shen.call-help (V14040 V14041 V14042 V14043) (cond ((= () V14041) (V14040 V14042 V14043)) ((cons? V14041) (shen.call-help (V14040 (hd V14041)) (tl V14041) V14042 V14043)) (true (shen.f_error shen.call-help))))
(defun shen.intprolog (V14045) (cond ((and (cons? V14045) (cons? (hd V14045))) (let ProcessN (shen.start-new-prolog-process) (shen.intprolog-help (hd (hd V14045)) (shen.insert-prolog-variables (cons (tl (hd V14045)) (cons (tl V14045) ())) ProcessN) ProcessN))) (true (shen.f_error shen.intprolog))))
(defun shen.intprolog-help (V14049 V14050 V14051) (cond ((and (cons? V14050) (and (cons? (tl V14050)) (= () (tl (tl V14050))))) (shen.intprolog-help-help V14049 (hd V14050) (hd (tl V14050)) V14051)) (true (shen.f_error shen.intprolog-help))))
(defun shen.intprolog-help-help (V14056 V14057 V14058 V14059) (cond ((= () V14057) (V14056 V14059 (freeze (shen.call-rest V14058 V14059)))) ((cons? V14057) (shen.intprolog-help-help (V14056 (hd V14057)) (tl V14057) V14058 V14059)) (true (shen.f_error shen.intprolog-help-help))))
(defun shen.call-rest (V14064 V14065) (cond ((= () V14064) true) ((and (cons? V14064) (and (cons? (hd V14064)) (cons? (tl (hd V14064))))) (shen.call-rest (cons (cons ((hd (hd V14064)) (hd (tl (hd V14064)))) (tl (tl (hd V14064)))) (tl V14064)) V14065)) ((and (cons? V14064) (and (cons? (hd V14064)) (= () (tl (hd V14064))))) ((hd (hd V14064)) V14065 (freeze (shen.call-rest (tl V14064) V14065)))) (true (shen.f_error shen.call-rest))))
(defun shen.start-new-prolog-process () (let IncrementProcessCounter (set shen.*process-counter* (+ 1 (value shen.*process-counter*))) (shen.initialise-prolog IncrementProcessCounter)))
(defun shen.insert-prolog-variables (V14068 V14069) (shen.insert-prolog-variables-help V14068 (shen.flatten V14068) V14069))
(defun shen.insert-prolog-variables-help (V14077 V14078 V14079) (cond ((= () V14078) V14077) ((and (cons? V14078) (variable? (hd V14078))) (let V (shen.newpv V14079) (let XV/Y (subst V (hd V14078) V14077) (let Z-Y (remove (hd V14078) (tl V14078)) (shen.insert-prolog-variables-help XV/Y Z-Y V14079))))) ((cons? V14078) (shen.insert-prolog-variables-help V14077 (tl V14078) V14079)) (true (shen.f_error shen.insert-prolog-variables-help))))
(defun shen.initialise-prolog (V14081) (let Vector (address-> (value shen.*prologvectors*) V14081 (shen.fillvector (vector 10) 1 10 shen.-null-)) (let Counter (address-> (value shen.*varcounter*) V14081 1) V14081)))
(defun shen.f_error (V15701) (do (shen.prhush (cn "partial function " (shen.app V15701 ";
" shen.a)) (stoutput)) (do (if (and (not (shen.tracked? V15701)) (y-or-n? (cn "track " (shen.app V15701 "? " shen.a)))) (shen.track-function (ps V15701)) shen.ok) (simple-error "aborted"))))
(defun shen.tracked? (V15703) (element? V15703 (value shen.*tracking*)))
(defun track (V15705) (let Source (ps V15705) (shen.track-function Source)))
(defun shen.track-function (V15707) (cond ((and (cons? V15707) (and (= defun (hd V15707)) (and (cons? (tl V15707)) (and (cons? (tl (tl V15707))) (and (cons? (tl (tl (tl V15707)))) (= () (tl (tl (tl (tl V15707)))))))))) (let KL (cons defun (cons (hd (tl V15707)) (cons (hd (tl (tl V15707))) (cons (shen.insert-tracking-code (hd (tl V15707)) (hd (tl (tl V15707))) (hd (tl (tl (tl V15707))))) ())))) (let Ob (eval-kl KL) (let Tr (set shen.*tracking* (cons Ob (value shen.*tracking*))) Ob)))) (true (shen.f_error shen.track-function))))
(defun shen.insert-tracking-code (V15711 V15712 V15713) (cons do (cons (cons set (cons shen.*call* (cons (cons + (cons (cons value (cons shen.*call* ())) (cons 1 ()))) ()))) (cons (cons do (cons (cons shen.input-track (cons (cons value (cons shen.*call* ())) (cons V15711 (cons (shen.cons_form V15712) ())))) (cons (cons do (cons (cons shen.terpri-or-read-char ()) (cons (cons let (cons Result (cons V15713 (cons (cons do (cons (cons shen.output-track (cons (cons value (cons shen.*call* ())) (cons V15711 (cons Result ())))) (cons (cons do (cons (cons set (cons shen.*call* (cons (cons - (cons (cons value (cons shen.*call* ())) (cons 1 ()))) ()))) (cons (cons do (cons (cons shen.terpri-or-read-char ()) (cons Result ()))) ()))) ()))) ())))) ()))) ()))) ()))))
(defun step (V15719) (cond ((= + V15719) (set shen.*step* true)) ((= - V15719) (set shen.*step* false)) (true (simple-error "step expects a + or a -.
"))))
(defun spy (V15725) (cond ((= + V15725) (set shen.*spy* true)) ((= - V15725) (set shen.*spy* false)) (true (simple-error "spy expects a + or a -.
"))))
(defun shen.terpri-or-read-char () (if (value shen.*step*) (shen.check-byte (read-byte (value *stinput*))) (nl 1)))
(defun shen.check-byte (V15731) (cond ((= V15731 (shen.hat)) (simple-error "aborted")) (true true)))
(defun shen.input-track (V15735 V15736 V15737) (do (shen.prhush (cn "
" (shen.app (shen.spaces V15735) (cn "<" (shen.app V15735 (cn "> Inputs to " (shen.app V15736 (cn " 
" (shen.app (shen.spaces V15735) "" shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)) (shen.recursively-print V15737)))
(defun shen.recursively-print (V15739) (cond ((= () V15739) (shen.prhush " ==>" (stoutput))) ((cons? V15739) (do (print (hd V15739)) (do (shen.prhush ", " (stoutput)) (shen.recursively-print (tl V15739))))) (true (shen.f_error shen.recursively-print))))
(defun shen.spaces (V15741) (cond ((= 0 V15741) "") (true (cn " " (shen.spaces (- V15741 1))))))
(defun shen.output-track (V15745 V15746 V15747) (shen.prhush (cn "
" (shen.app (shen.spaces V15745) (cn "<" (shen.app V15745 (cn "> Output from " (shen.app V15746 (cn " 
" (shen.app (shen.spaces V15745) (cn "==> " (shen.app V15747 "" shen.s)) shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)))
(defun untrack (V15749) (eval (ps V15749)))
(defun profile (V15751) (shen.profile-help (ps V15751)))
(defun shen.profile-help (V15757) (cond ((and (cons? V15757) (and (= defun (hd V15757)) (and (cons? (tl V15757)) (and (cons? (tl (tl V15757))) (and (cons? (tl (tl (tl V15757)))) (= () (tl (tl (tl (tl V15757)))))))))) (let G (gensym shen.f) (let Profile (cons defun (cons (hd (tl V15757)) (cons (hd (tl (tl V15757))) (cons (shen.profile-func (hd (tl V15757)) (hd (tl (tl V15757))) (cons G (hd (tl (tl V15757))))) ())))) (let Def (cons defun (cons G (cons (hd (tl (tl V15757))) (cons (subst G (hd (tl V15757)) (hd (tl (tl (tl V15757))))) ())))) (let CompileProfile (shen.eval-without-macros Profile) (let CompileG (shen.eval-without-macros Def) (hd (tl V15757)))))))) (true (simple-error "Cannot profile.
"))))
(defun unprofile (V15759) (untrack V15759))
(defun shen.profile-func (V15763 V15764 V15765) (cons let (cons Start (cons (cons get-time (cons run ())) (cons (cons let (cons Result (cons V15765 (cons (cons let (cons Finish (cons (cons - (cons (cons get-time (cons run ())) (cons Start ()))) (cons (cons let (cons Record (cons (cons shen.put-profile (cons V15763 (cons (cons + (cons (cons shen.get-profile (cons V15763 ())) (cons Finish ()))) ()))) (cons Result ())))) ())))) ())))) ())))))
(defun profile-results (V15767) (let Results (shen.get-profile V15767) (let Initialise (shen.put-profile V15767 0) (@p V15767 Results))))
(defun shen.get-profile (V15769) (trap-error (get V15769 profile (value *property-vector*)) (lambda E 0)))
(defun shen.put-profile (V15772 V15773) (put V15772 profile V15773 (value *property-vector*)))
(defun load (V13402) (let Load (let Start (get-time run) (let Result (shen.load-help (value shen.*tc*) (read-file V13402)) (let Finish (get-time run) (let Time (- Finish Start) (let Message (shen.prhush (cn "
run time: " (cn (str Time) " secs
")) (stoutput)) Result))))) (let Infs (if (value shen.*tc*) (shen.prhush (cn "
typechecked in " (shen.app (inferences) " inferences
" shen.a)) (stoutput)) shen.skip) loaded)))
(defun shen.load-help (V13409 V13410) (cond ((= false V13409) (map (lambda X (shen.prhush (shen.app (shen.eval-without-macros X) "
" shen.s) (stoutput))) V13410)) (true (let RemoveSynonyms (mapcan (lambda X (shen.remove-synonyms X)) V13410) (let Table (mapcan (lambda X (shen.typetable X)) RemoveSynonyms) (let Assume (map (lambda X (shen.assumetype X)) Table) (trap-error (map (lambda X (shen.typecheck-and-load X)) RemoveSynonyms) (lambda E (shen.unwind-types E Table)))))))))
(defun shen.remove-synonyms (V13412) (cond ((and (cons? V13412) (= shen.synonyms-help (hd V13412))) (do (eval V13412) ())) (true (cons V13412 ()))))
(defun shen.typecheck-and-load (V13414) (do (nl 1) (shen.typecheck-and-evaluate V13414 (gensym A))))
(defun shen.typetable (V13420) (cond ((and (cons? V13420) (and (= define (hd V13420)) (cons? (tl V13420)))) (let Sig (compile (lambda Y (shen.<sig+rest> Y)) (tl (tl V13420)) (lambda E (simple-error (shen.app (hd (tl V13420)) " lacks a proper signature.
" shen.a)))) (cons (cons (hd (tl V13420)) Sig) ()))) (true ())))
(defun shen.assumetype (V13422) (cond ((cons? V13422) (declare (hd V13422) (tl V13422))) (true (shen.f_error shen.assumetype))))
(defun shen.unwind-types (V13429 V13430) (cond ((= () V13430) (simple-error (error-to-string V13429))) ((and (cons? V13430) (cons? (hd V13430))) (do (shen.remtype (hd (hd V13430))) (shen.unwind-types V13429 (tl V13430)))) (true (shen.f_error shen.unwind-types))))
(defun shen.remtype (V13432) (set shen.*signedfuncs* (shen.removetype V13432 (value shen.*signedfuncs*))))
(defun shen.removetype (V13440 V13441) (cond ((= () V13441) ()) ((and (cons? V13441) (and (cons? (hd V13441)) (= (hd (hd V13441)) V13440))) (shen.removetype (hd (hd V13441)) (tl V13441))) ((cons? V13441) (cons (hd V13441) (shen.removetype V13440 (tl V13441)))) (true (shen.f_error shen.removetype))))
(defun shen.<sig+rest> (V13443) (let Parse_shen.<signature> (shen.<signature> V13443) (if (not (= (fail) Parse_shen.<signature>)) (let Parse_shen.<!> (shen.<!> Parse_shen.<signature>) (if (not (= (fail) Parse_shen.<!>)) (shen.pair (hd Parse_shen.<!>) (shen.hdtl Parse_shen.<signature>)) (fail))) (fail))))
(defun write-to-file (V13446 V13447) (let Stream (open V13446 out) (let String (if (string? V13447) (shen.app V13447 "

" shen.a) (shen.app V13447 "

" shen.s)) (let Write (pr String Stream) (let Close (close Stream) V13447)))))
(defun pr (V15800 V15801) (trap-error (shen.prh V15800 V15801 0) (lambda E V15800)))
(defun shen.prh (V15805 V15806 V15807) (shen.prh V15805 V15806 (shen.write-char-and-inc V15805 V15806 V15807)))
(defun shen.write-char-and-inc (V15811 V15812 V15813) (do (write-byte (string->n (pos V15811 V15813)) V15812) (+ V15813 1)))
(defun print (V15815) (let String (shen.insert V15815 "~S") (let Print (shen.prhush String (stoutput)) V15815)))
(defun shen.prhush (V15818 V15819) (if (value *hush*) V15818 (pr V15818 V15819)))
(defun shen.mkstr (V15822 V15823) (cond ((string? V15822) (shen.mkstr-l (shen.proc-nl V15822) V15823)) (true (shen.mkstr-r (cons shen.proc-nl (cons V15822 ())) V15823))))
(defun shen.mkstr-l (V15826 V15827) (cond ((= () V15827) V15826) ((cons? V15827) (shen.mkstr-l (shen.insert-l (hd V15827) V15826) (tl V15827))) (true (shen.f_error shen.mkstr-l))))
(defun shen.insert-l (V15832 V15833) (cond ((= "" V15833) "") ((and (shen.+string? V15833) (and (= "~" (pos V15833 0)) (and (shen.+string? (tlstr V15833)) (= "A" (pos (tlstr V15833) 0))))) (cons shen.app (cons V15832 (cons (tlstr (tlstr V15833)) (cons shen.a ()))))) ((and (shen.+string? V15833) (and (= "~" (pos V15833 0)) (and (shen.+string? (tlstr V15833)) (= "R" (pos (tlstr V15833) 0))))) (cons shen.app (cons V15832 (cons (tlstr (tlstr V15833)) (cons shen.r ()))))) ((and (shen.+string? V15833) (and (= "~" (pos V15833 0)) (and (shen.+string? (tlstr V15833)) (= "S" (pos (tlstr V15833) 0))))) (cons shen.app (cons V15832 (cons (tlstr (tlstr V15833)) (cons shen.s ()))))) ((shen.+string? V15833) (shen.factor-cn (cons cn (cons (pos V15833 0) (cons (shen.insert-l V15832 (tlstr V15833)) ()))))) ((and (cons? V15833) (and (= cn (hd V15833)) (and (cons? (tl V15833)) (and (cons? (tl (tl V15833))) (= () (tl (tl (tl V15833)))))))) (cons cn (cons (hd (tl V15833)) (cons (shen.insert-l V15832 (hd (tl (tl V15833)))) ())))) ((and (cons? V15833) (and (= shen.app (hd V15833)) (and (cons? (tl V15833)) (and (cons? (tl (tl V15833))) (and (cons? (tl (tl (tl V15833)))) (= () (tl (tl (tl (tl V15833)))))))))) (cons shen.app (cons (hd (tl V15833)) (cons (shen.insert-l V15832 (hd (tl (tl V15833)))) (tl (tl (tl V15833))))))) (true (shen.f_error shen.insert-l))))
(defun shen.factor-cn (V15835) (cond ((and (cons? V15835) (and (= cn (hd V15835)) (and (cons? (tl V15835)) (and (cons? (tl (tl V15835))) (and (cons? (hd (tl (tl V15835)))) (and (= cn (hd (hd (tl (tl V15835))))) (and (cons? (tl (hd (tl (tl V15835))))) (and (cons? (tl (tl (hd (tl (tl V15835)))))) (and (= () (tl (tl (tl (hd (tl (tl V15835))))))) (and (= () (tl (tl (tl V15835)))) (and (string? (hd (tl V15835))) (string? (hd (tl (hd (tl (tl V15835))))))))))))))))) (cons cn (cons (cn (hd (tl V15835)) (hd (tl (hd (tl (tl V15835)))))) (tl (tl (hd (tl (tl V15835)))))))) (true V15835)))
(defun shen.proc-nl (V15837) (cond ((= "" V15837) "") ((and (shen.+string? V15837) (and (= "~" (pos V15837 0)) (and (shen.+string? (tlstr V15837)) (= "%" (pos (tlstr V15837) 0))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V15837))))) ((shen.+string? V15837) (cn (pos V15837 0) (shen.proc-nl (tlstr V15837)))) (true (shen.f_error shen.proc-nl))))
(defun shen.mkstr-r (V15840 V15841) (cond ((= () V15841) V15840) ((cons? V15841) (shen.mkstr-r (cons shen.insert (cons (hd V15841) (cons V15840 ()))) (tl V15841))) (true (shen.f_error shen.mkstr-r))))
(defun shen.insert (V15844 V15845) (shen.insert-h V15844 V15845 ""))
(defun shen.insert-h (V15851 V15852 V15853) (cond ((= "" V15852) V15853) ((and (shen.+string? V15852) (and (= "~" (pos V15852 0)) (and (shen.+string? (tlstr V15852)) (= "A" (pos (tlstr V15852) 0))))) (cn V15853 (shen.app V15851 (tlstr (tlstr V15852)) shen.a))) ((and (shen.+string? V15852) (and (= "~" (pos V15852 0)) (and (shen.+string? (tlstr V15852)) (= "R" (pos (tlstr V15852) 0))))) (cn V15853 (shen.app V15851 (tlstr (tlstr V15852)) shen.r))) ((and (shen.+string? V15852) (and (= "~" (pos V15852 0)) (and (shen.+string? (tlstr V15852)) (= "S" (pos (tlstr V15852) 0))))) (cn V15853 (shen.app V15851 (tlstr (tlstr V15852)) shen.s))) ((shen.+string? V15852) (shen.insert-h V15851 (tlstr V15852) (cn V15853 (pos V15852 0)))) (true (shen.f_error shen.insert-h))))
(defun shen.app (V15857 V15858 V15859) (cn (shen.arg->str V15857 V15859) V15858))
(defun shen.arg->str (V15867 V15868) (cond ((= V15867 (fail)) "...") ((shen.list? V15867) (shen.list->str V15867 V15868)) ((string? V15867) (shen.str->str V15867 V15868)) ((absvector? V15867) (shen.vector->str V15867 V15868)) (true (shen.atom->str V15867))))
(defun shen.list->str (V15871 V15872) (cond ((= shen.r V15872) (@s "(" (@s (shen.iter-list V15871 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V15871 V15872 (shen.maxseq)) "]")))))
(defun shen.maxseq () (value *maximum-print-sequence-size*))
(defun shen.iter-list (V15886 V15887 V15888) (cond ((= () V15886) "") ((= 0 V15888) "... etc") ((and (cons? V15886) (= () (tl V15886))) (shen.arg->str (hd V15886) V15887)) ((cons? V15886) (@s (shen.arg->str (hd V15886) V15887) (@s " " (shen.iter-list (tl V15886) V15887 (- V15888 1))))) (true (@s "|" (@s " " (shen.arg->str V15886 V15887))))))
(defun shen.str->str (V15895 V15896) (cond ((= shen.a V15896) V15895) (true (@s (n->string 34) (@s V15895 (n->string 34))))))
(defun shen.vector->str (V15899 V15900) (if (shen.print-vector? V15899) ((function (<-address V15899 0)) V15899) (if (vector? V15899) (@s "<" (@s (shen.iter-vector V15899 1 V15900 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V15899 0 V15900 (shen.maxseq)) ">>"))))))
(defun shen.print-vector? (V15902) (let Zero (<-address V15902 0) (if (= Zero shen.tuple) true (if (= Zero shen.pvar) true (if (not (number? Zero)) (shen.fbound? Zero) false)))))
(defun shen.fbound? (V15904) (trap-error (do (ps V15904) true) (lambda E false)))
(defun shen.tuple (V15906) (cn "(@p " (shen.app (<-address V15906 1) (cn " " (shen.app (<-address V15906 2) ")" shen.s)) shen.s)))
(defun shen.iter-vector (V15917 V15918 V15919 V15920) (cond ((= 0 V15920) "... etc") (true (let Item (trap-error (<-address V15917 V15918) (lambda E shen.out-of-bounds)) (let Next (trap-error (<-address V15917 (+ V15918 1)) (lambda E shen.out-of-bounds)) (if (= Item shen.out-of-bounds) "" (if (= Next shen.out-of-bounds) (shen.arg->str Item V15919) (@s (shen.arg->str Item V15919) (@s " " (shen.iter-vector V15917 (+ V15918 1) V15919 (- V15920 1)))))))))))
(defun shen.atom->str (V15922) (trap-error (str V15922) (lambda E (shen.funexstring))))
(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))
(defun shen.list? (V15924) (or (empty? V15924) (cons? V15924)))
(defun macroexpand (V13449) (let Y (shen.compose (value *macros*) V13449) (if (= V13449 Y) V13449 (shen.walk (lambda Z (macroexpand Z)) Y))))
(defun shen.error-macro (V13451) (cond ((and (cons? V13451) (and (= error (hd V13451)) (cons? (tl V13451)))) (cons simple-error (cons (shen.mkstr (hd (tl V13451)) (tl (tl V13451))) ()))) (true V13451)))
(defun shen.output-macro (V13453) (cond ((and (cons? V13453) (and (= output (hd V13453)) (cons? (tl V13453)))) (cons shen.prhush (cons (shen.mkstr (hd (tl V13453)) (tl (tl V13453))) (cons (cons stoutput ()) ())))) ((and (cons? V13453) (and (= pr (hd V13453)) (and (cons? (tl V13453)) (= () (tl (tl V13453)))))) (cons pr (cons (hd (tl V13453)) (cons (cons stoutput ()) ())))) (true V13453)))
(defun shen.make-string-macro (V13455) (cond ((and (cons? V13455) (and (= make-string (hd V13455)) (cons? (tl V13455)))) (shen.mkstr (hd (tl V13455)) (tl (tl V13455)))) (true V13455)))
(defun shen.input-macro (V13457) (cond ((and (cons? V13457) (and (= lineread (hd V13457)) (= () (tl V13457)))) (cons lineread (cons (cons stinput ()) ()))) ((and (cons? V13457) (and (= input (hd V13457)) (= () (tl V13457)))) (cons input (cons (cons stinput ()) ()))) ((and (cons? V13457) (and (= read (hd V13457)) (= () (tl V13457)))) (cons read (cons (cons stinput ()) ()))) ((and (cons? V13457) (and (= input+ (hd V13457)) (and (cons? (tl V13457)) (= () (tl (tl V13457)))))) (cons input+ (cons (hd (tl V13457)) (cons (cons stinput ()) ())))) ((and (cons? V13457) (and (= read-byte (hd V13457)) (= () (tl V13457)))) (cons read-byte (cons (cons stinput ()) ()))) (true V13457)))
(defun shen.compose (V13460 V13461) (cond ((= () V13460) V13461) ((cons? V13460) (shen.compose (tl V13460) ((hd V13460) V13461))) (true (shen.f_error shen.compose))))
(defun shen.compile-macro (V13463) (cond ((and (cons? V13463) (and (= compile (hd V13463)) (and (cons? (tl V13463)) (and (cons? (tl (tl V13463))) (= () (tl (tl (tl V13463)))))))) (cons compile (cons (hd (tl V13463)) (cons (hd (tl (tl V13463))) (cons (cons lambda (cons E (cons (cons if (cons (cons cons? (cons E ())) (cons (cons error (cons "parse error here: ~S~%" (cons E ()))) (cons (cons error (cons "parse error~%" ())) ())))) ()))) ()))))) (true V13463)))
(defun shen.prolog-macro (V13465) (cond ((and (cons? V13465) (= prolog? (hd V13465))) (let F (gensym shen.f) (let Receive (shen.receive-terms (tl V13465)) (let PrologDef (eval (append (cons defprolog (cons F ())) (append Receive (append (cons <-- ()) (append (shen.pass-literals (tl V13465)) (cons ; ())))))) (let Query (cons F (append Receive (cons (cons shen.start-new-prolog-process ()) (cons (cons freeze (cons true ())) ())))) Query))))) (true V13465)))
(defun shen.receive-terms (V13471) (cond ((= () V13471) ()) ((and (cons? V13471) (and (cons? (hd V13471)) (and (= receive (hd (hd V13471))) (and (cons? (tl (hd V13471))) (= () (tl (tl (hd V13471)))))))) (cons (hd (tl (hd V13471))) (shen.receive-terms (tl V13471)))) ((cons? V13471) (shen.receive-terms (tl V13471))) (true (shen.f_error shen.receive-terms))))
(defun shen.pass-literals (V13475) (cond ((= () V13475) ()) ((and (cons? V13475) (and (cons? (hd V13475)) (and (= receive (hd (hd V13475))) (and (cons? (tl (hd V13475))) (= () (tl (tl (hd V13475)))))))) (shen.pass-literals (tl V13475))) ((cons? V13475) (cons (hd V13475) (shen.pass-literals (tl V13475)))) (true (shen.f_error shen.pass-literals))))
(defun shen.defprolog-macro (V13477) (cond ((and (cons? V13477) (and (= defprolog (hd V13477)) (cons? (tl V13477)))) (compile (lambda Y (shen.<defprolog> Y)) (tl V13477) (lambda Y (shen.prolog-error (hd (tl V13477)) Y)))) (true V13477)))
(defun shen.datatype-macro (V13479) (cond ((and (cons? V13479) (and (= datatype (hd V13479)) (cons? (tl V13479)))) (cons shen.process-datatype (cons (shen.intern-type (hd (tl V13479))) (cons (cons compile (cons (cons lambda (cons X (cons (cons shen.<datatype-rules> (cons X ())) ()))) (cons (shen.rcons_form (tl (tl V13479))) (cons (cons function (cons shen.datatype-error ())) ())))) ())))) (true V13479)))
(defun shen.intern-type (V13481) (intern (cn "type#" (str V13481))))
(defun shen.@s-macro (V13483) (cond ((and (cons? V13483) (and (= @s (hd V13483)) (and (cons? (tl V13483)) (and (cons? (tl (tl V13483))) (cons? (tl (tl (tl V13483)))))))) (cons @s (cons (hd (tl V13483)) (cons (shen.@s-macro (cons @s (tl (tl V13483)))) ())))) ((and (cons? V13483) (and (= @s (hd V13483)) (and (cons? (tl V13483)) (and (cons? (tl (tl V13483))) (and (= () (tl (tl (tl V13483)))) (string? (hd (tl V13483)))))))) (let E (explode (hd (tl V13483))) (if (> (length E) 1) (shen.@s-macro (cons @s (append E (tl (tl V13483))))) V13483))) (true V13483)))
(defun shen.synonyms-macro (V13485) (cond ((and (cons? V13485) (= synonyms (hd V13485))) (cons shen.synonyms-help (cons (shen.rcons_form (shen.curry-synonyms (tl V13485))) ()))) (true V13485)))
(defun shen.curry-synonyms (V13487) (map (lambda X (shen.curry-type X)) V13487))
(defun shen.nl-macro (V13489) (cond ((and (cons? V13489) (and (= nl (hd V13489)) (= () (tl V13489)))) (cons nl (cons 1 ()))) (true V13489)))
(defun shen.assoc-macro (V13491) (cond ((and (cons? V13491) (and (cons? (tl V13491)) (and (cons? (tl (tl V13491))) (and (cons? (tl (tl (tl V13491)))) (element? (hd V13491) (cons @p (cons @v (cons append (cons and (cons or (cons + (cons * (cons do ()))))))))))))) (cons (hd V13491) (cons (hd (tl V13491)) (cons (shen.assoc-macro (cons (hd V13491) (tl (tl V13491)))) ())))) (true V13491)))
(defun shen.let-macro (V13493) (cond ((and (cons? V13493) (and (= let (hd V13493)) (and (cons? (tl V13493)) (and (cons? (tl (tl V13493))) (and (cons? (tl (tl (tl V13493)))) (cons? (tl (tl (tl (tl V13493)))))))))) (cons let (cons (hd (tl V13493)) (cons (hd (tl (tl V13493))) (cons (shen.let-macro (cons let (tl (tl (tl V13493))))) ()))))) (true V13493)))
(defun shen.abs-macro (V13495) (cond ((and (cons? V13495) (and (= /. (hd V13495)) (and (cons? (tl V13495)) (and (cons? (tl (tl V13495))) (cons? (tl (tl (tl V13495)))))))) (cons lambda (cons (hd (tl V13495)) (cons (shen.abs-macro (cons /. (tl (tl V13495)))) ())))) ((and (cons? V13495) (and (= /. (hd V13495)) (and (cons? (tl V13495)) (and (cons? (tl (tl V13495))) (= () (tl (tl (tl V13495)))))))) (cons lambda (tl V13495))) (true V13495)))
(defun shen.cases-macro (V13499) (cond ((and (cons? V13499) (and (= cases (hd V13499)) (and (cons? (tl V13499)) (and (= true (hd (tl V13499))) (cons? (tl (tl V13499))))))) (hd (tl (tl V13499)))) ((and (cons? V13499) (and (= cases (hd V13499)) (and (cons? (tl V13499)) (and (cons? (tl (tl V13499))) (= () (tl (tl (tl V13499)))))))) (cons if (cons (hd (tl V13499)) (cons (hd (tl (tl V13499))) (cons (cons simple-error (cons "error: cases exhausted" ())) ()))))) ((and (cons? V13499) (and (= cases (hd V13499)) (and (cons? (tl V13499)) (cons? (tl (tl V13499)))))) (cons if (cons (hd (tl V13499)) (cons (hd (tl (tl V13499))) (cons (shen.cases-macro (cons cases (tl (tl (tl V13499))))) ()))))) ((and (cons? V13499) (and (= cases (hd V13499)) (and (cons? (tl V13499)) (= () (tl (tl V13499)))))) (simple-error "error: odd number of case elements
")) (true V13499)))
(defun shen.timer-macro (V13501) (cond ((and (cons? V13501) (and (= time (hd V13501)) (and (cons? (tl V13501)) (= () (tl (tl V13501)))))) (shen.let-macro (cons let (cons Start (cons (cons get-time (cons run ())) (cons Result (cons (hd (tl V13501)) (cons Finish (cons (cons get-time (cons run ())) (cons Time (cons (cons - (cons Finish (cons Start ()))) (cons Message (cons (cons shen.prhush (cons (cons cn (cons "
run time: " (cons (cons cn (cons (cons str (cons Time ())) (cons " secs
" ()))) ()))) (cons (cons stoutput ()) ()))) (cons Result ())))))))))))))) (true V13501)))
(defun shen.tuple-up (V13503) (cond ((cons? V13503) (cons @p (cons (hd V13503) (cons (shen.tuple-up (tl V13503)) ())))) (true V13503)))
(defun shen.put/get-macro (V13505) (cond ((and (cons? V13505) (and (= put (hd V13505)) (and (cons? (tl V13505)) (and (cons? (tl (tl V13505))) (and (cons? (tl (tl (tl V13505)))) (= () (tl (tl (tl (tl V13505)))))))))) (cons put (cons (hd (tl V13505)) (cons (hd (tl (tl V13505))) (cons (hd (tl (tl (tl V13505)))) (cons (cons value (cons *property-vector* ())) ())))))) ((and (cons? V13505) (and (= get (hd V13505)) (and (cons? (tl V13505)) (and (cons? (tl (tl V13505))) (= () (tl (tl (tl V13505)))))))) (cons get (cons (hd (tl V13505)) (cons (hd (tl (tl V13505))) (cons (cons value (cons *property-vector* ())) ()))))) ((and (cons? V13505) (and (= unput (hd V13505)) (and (cons? (tl V13505)) (and (cons? (tl (tl V13505))) (= () (tl (tl (tl V13505)))))))) (cons unput (cons (hd (tl V13505)) (cons (hd (tl (tl V13505))) (cons (cons value (cons *property-vector* ())) ()))))) (true V13505)))
(defun shen.function-macro (V13507) (cond ((and (cons? V13507) (and (= function (hd V13507)) (and (cons? (tl V13507)) (= () (tl (tl V13507)))))) (shen.function-abstraction (hd (tl V13507)) (arity (hd (tl V13507))))) (true V13507)))
(defun shen.function-abstraction (V13510 V13511) (cond ((= 0 V13511) (simple-error (shen.app V13510 " has no lambda form
" shen.a))) ((= -1 V13511) (cons function (cons V13510 ()))) (true (shen.function-abstraction-help V13510 V13511 ()))))
(defun shen.function-abstraction-help (V13515 V13516 V13517) (cond ((= 0 V13516) (cons V13515 V13517)) (true (let X (gensym V) (cons /. (cons X (cons (shen.function-abstraction-help V13515 (- V13516 1) (append V13517 (cons X ()))) ())))))))
(defun undefmacro (V13519) (let MacroReg (value shen.*macroreg*) (let Pos (shen.findpos V13519 MacroReg) (let Remove1 (set shen.*macroreg* (remove V13519 MacroReg)) (let Remove2 (set *macros* (shen.remove-nth Pos (value *macros*))) V13519)))))
(defun shen.findpos (V13529 V13530) (cond ((= () V13530) (simple-error (shen.app V13529 " is not a macro
" shen.a))) ((and (cons? V13530) (= (hd V13530) V13529)) 1) ((cons? V13530) (+ 1 (shen.findpos V13529 (tl V13530)))) (true (shen.f_error shen.findpos))))
(defun shen.remove-nth (V13535 V13536) (cond ((and (= 1 V13535) (cons? V13536)) (tl V13536)) ((cons? V13536) (cons (hd V13536) (shen.remove-nth (- V13535 1) (tl V13536)))) (true (shen.f_error shen.remove-nth))))
(defun shen.initialise_arity_table (V13378) (cond ((= () V13378) ()) ((and (cons? V13378) (cons? (tl V13378))) (let DecArity (put (hd V13378) arity (hd (tl V13378)) (value *property-vector*)) (shen.initialise_arity_table (tl (tl V13378))))) (true (shen.f_error shen.initialise_arity_table))))
(defun arity (V13380) (trap-error (get V13380 arity (value *property-vector*)) (lambda E -1)))
(defun systemf (V13382) (let Shen (intern "shen") (let External (get Shen shen.external-symbols (value *property-vector*)) (let Place (put Shen shen.external-symbols (adjoin V13382 External) (value *property-vector*)) V13382))))
(defun adjoin (V13385 V13386) (if (element? V13385 V13386) V13386 (cons V13385 V13386)))
(defun shen.symbol-table-entry (V13388) (let ArityF (arity V13388) (if (= ArityF -1) () (if (= ArityF 0) () (cons (cons V13388 (eval-kl (shen.lambda-form V13388 ArityF))) ())))))
(defun shen.lambda-form (V13391 V13392) (cond ((= 0 V13392) V13391) (true (let X (gensym V) (cons lambda (cons X (cons (shen.lambda-form (shen.add-end V13391 X) (- V13392 1)) ())))))))
(defun shen.add-end (V13395 V13396) (cond ((cons? V13395) (append V13395 (cons V13396 ()))) (true (cons V13395 (cons V13396 ())))))
(defun specialise (V13398) (do (set shen.*special* (cons V13398 (value shen.*special*))) V13398))
(defun unspecialise (V13400) (do (set shen.*special* (remove V13400 (value shen.*special*))) V13400))
(defun shen.typecheck (V15299 V15300) (let Curry (shen.curry V15299) (let ProcessN (shen.start-new-prolog-process) (let Type (shen.insert-prolog-variables (shen.demodulate (shen.curry-type V15300)) ProcessN) (let Continuation (freeze (return Type ProcessN shen.void)) (shen.t* (cons Curry (cons : (cons Type ()))) () ProcessN Continuation))))))
(defun shen.curry (V15302) (cond ((and (cons? V15302) (shen.special? (hd V15302))) (cons (hd V15302) (map (lambda Y (shen.curry Y)) (tl V15302)))) ((and (cons? V15302) (and (cons? (tl V15302)) (shen.extraspecial? (hd V15302)))) V15302) ((and (cons? V15302) (and (= type (hd V15302)) (and (cons? (tl V15302)) (and (cons? (tl (tl V15302))) (= () (tl (tl (tl V15302)))))))) (cons type (cons (shen.curry (hd (tl V15302))) (tl (tl V15302))))) ((and (cons? V15302) (and (cons? (tl V15302)) (cons? (tl (tl V15302))))) (shen.curry (cons (cons (hd V15302) (cons (hd (tl V15302)) ())) (tl (tl V15302))))) ((and (cons? V15302) (and (cons? (tl V15302)) (= () (tl (tl V15302))))) (cons (shen.curry (hd V15302)) (cons (shen.curry (hd (tl V15302))) ()))) (true V15302)))
(defun shen.special? (V15304) (element? V15304 (value shen.*special*)))
(defun shen.extraspecial? (V15306) (element? V15306 (value shen.*extraspecial*)))
(defun shen.t* (V15311 V15312 V15313 V15314) (let Throwcontrol (shen.catchpoint) (shen.cutpoint Throwcontrol (let Case (let Error (shen.newpv V15313) (do (shen.incinfs) (fwhen (shen.maxinfexceeded?) V15313 (freeze (bind Error (shen.errormaxinfs) V15313 V15314))))) (if (= Case false) (let Case (let V15291 (shen.lazyderef V15311 V15313) (if (= fail V15291) (do (shen.incinfs) (cut Throwcontrol V15313 (freeze (shen.prolog-failure V15313 V15314)))) false)) (if (= Case false) (let Case (let V15292 (shen.lazyderef V15311 V15313) (if (cons? V15292) (let X (hd V15292) (let V15293 (shen.lazyderef (tl V15292) V15313) (if (cons? V15293) (let V15294 (shen.lazyderef (hd V15293) V15313) (if (= : V15294) (let V15295 (shen.lazyderef (tl V15293) V15313) (if (cons? V15295) (let A (hd V15295) (let V15296 (shen.lazyderef (tl V15295) V15313) (if (= () V15296) (do (shen.incinfs) (fwhen (shen.type-theory-enabled?) V15313 (freeze (cut Throwcontrol V15313 (freeze (shen.th* X A V15312 V15313 V15314)))))) false))) false)) false)) false))) false)) (if (= Case false) (let Datatypes (shen.newpv V15313) (do (shen.incinfs) (shen.show V15311 V15312 V15313 (freeze (bind Datatypes (value shen.*datatypes*) V15313 (freeze (shen.udefs* V15311 V15312 Datatypes V15313 V15314))))))) Case)) Case)) Case)))))
(defun shen.type-theory-enabled? () (value shen.*shen-type-theory-enabled?*))
(defun enable-type-theory (V15320) (cond ((= + V15320) (set shen.*shen-type-theory-enabled?* true)) ((= - V15320) (set shen.*shen-type-theory-enabled?* false)) (true (simple-error "enable-type-theory expects a + or a -
"))))
(defun shen.prolog-failure (V15331 V15332) false)
(defun shen.maxinfexceeded? () (> (inferences) (value shen.*maxinferences*)))
(defun shen.errormaxinfs () (simple-error "maximum inferences exceeded~%"))
(defun shen.udefs* (V15338 V15339 V15340 V15341 V15342) (let Case (let V15287 (shen.lazyderef V15340 V15341) (if (cons? V15287) (let D (hd V15287) (do (shen.incinfs) (call (cons D (cons V15338 (cons V15339 ()))) V15341 V15342))) false)) (if (= Case false) (let V15288 (shen.lazyderef V15340 V15341) (if (cons? V15288) (let Ds (tl V15288) (do (shen.incinfs) (shen.udefs* V15338 V15339 Ds V15341 V15342))) false)) Case)))
(defun shen.th* (V15348 V15349 V15350 V15351 V15352) (let Throwcontrol (shen.catchpoint) (shen.cutpoint Throwcontrol (let Case (do (shen.incinfs) (shen.show (cons V15348 (cons : (cons V15349 ()))) V15350 V15351 (freeze (fwhen false V15351 V15352)))) (if (= Case false) (let Case (let F (shen.newpv V15351) (do (shen.incinfs) (fwhen (shen.typedf? (shen.lazyderef V15348 V15351)) V15351 (freeze (bind F (shen.sigf (shen.lazyderef V15348 V15351)) V15351 (freeze (call (cons F (cons V15349 ())) V15351 V15352))))))) (if (= Case false) (let Case (do (shen.incinfs) (shen.base V15348 V15349 V15351 V15352)) (if (= Case false) (let Case (do (shen.incinfs) (shen.by_hypothesis V15348 V15349 V15350 V15351 V15352)) (if (= Case false) (let Case (let V15183 (shen.lazyderef V15348 V15351) (if (cons? V15183) (let F (hd V15183) (let V15184 (shen.lazyderef (tl V15183) V15351) (if (= () V15184) (do (shen.incinfs) (shen.th* F (cons --> (cons V15349 ())) V15350 V15351 V15352)) false))) false)) (if (= Case false) (let Case (let V15185 (shen.lazyderef V15348 V15351) (if (cons? V15185) (let F (hd V15185) (let V15186 (shen.lazyderef (tl V15185) V15351) (if (cons? V15186) (let X (hd V15186) (let V15187 (shen.lazyderef (tl V15186) V15351) (if (= () V15187) (let B (shen.newpv V15351) (do (shen.incinfs) (shen.th* F (cons B (cons --> (cons V15349 ()))) V15350 V15351 (freeze (shen.th* X B V15350 V15351 V15352))))) false))) false))) false)) (if (= Case false) (let Case (let V15188 (shen.lazyderef V15348 V15351) (if (cons? V15188) (let V15189 (shen.lazyderef (hd V15188) V15351) (if (= cons V15189) (let V15190 (shen.lazyderef (tl V15188) V15351) (if (cons? V15190) (let X (hd V15190) (let V15191 (shen.lazyderef (tl V15190) V15351) (if (cons? V15191) (let Y (hd V15191) (let V15192 (shen.lazyderef (tl V15191) V15351) (if (= () V15192) (let V15193 (shen.lazyderef V15349 V15351) (if (cons? V15193) (let V15194 (shen.lazyderef (hd V15193) V15351) (if (= list V15194) (let V15195 (shen.lazyderef (tl V15193) V15351) (if (cons? V15195) (let A (hd V15195) (let V15196 (shen.lazyderef (tl V15195) V15351) (if (= () V15196) (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y (cons list (cons A ())) V15350 V15351 V15352)))) (if (shen.pvar? V15196) (do (shen.bindv V15196 () V15351) (let Result (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y (cons list (cons A ())) V15350 V15351 V15352)))) (do (shen.unbindv V15196 V15351) Result))) false)))) (if (shen.pvar? V15195) (let A (shen.newpv V15351) (do (shen.bindv V15195 (cons A ()) V15351) (let Result (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y (cons list (cons A ())) V15350 V15351 V15352)))) (do (shen.unbindv V15195 V15351) Result)))) false))) (if (shen.pvar? V15194) (do (shen.bindv V15194 list V15351) (let Result (let V15197 (shen.lazyderef (tl V15193) V15351) (if (cons? V15197) (let A (hd V15197) (let V15198 (shen.lazyderef (tl V15197) V15351) (if (= () V15198) (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y (cons list (cons A ())) V15350 V15351 V15352)))) (if (shen.pvar? V15198) (do (shen.bindv V15198 () V15351) (let Result (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y (cons list (cons A ())) V15350 V15351 V15352)))) (do (shen.unbindv V15198 V15351) Result))) false)))) (if (shen.pvar? V15197) (let A (shen.newpv V15351) (do (shen.bindv V15197 (cons A ()) V15351) (let Result (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y (cons list (cons A ())) V15350 V15351 V15352)))) (do (shen.unbindv V15197 V15351) Result)))) false))) (do (shen.unbindv V15194 V15351) Result))) false))) (if (shen.pvar? V15193) (let A (shen.newpv V15351) (do (shen.bindv V15193 (cons list (cons A ())) V15351) (let Result (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y (cons list (cons A ())) V15350 V15351 V15352)))) (do (shen.unbindv V15193 V15351) Result)))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V15199 (shen.lazyderef V15348 V15351) (if (cons? V15199) (let V15200 (shen.lazyderef (hd V15199) V15351) (if (= @p V15200) (let V15201 (shen.lazyderef (tl V15199) V15351) (if (cons? V15201) (let X (hd V15201) (let V15202 (shen.lazyderef (tl V15201) V15351) (if (cons? V15202) (let Y (hd V15202) (let V15203 (shen.lazyderef (tl V15202) V15351) (if (= () V15203) (let V15204 (shen.lazyderef V15349 V15351) (if (cons? V15204) (let A (hd V15204) (let V15205 (shen.lazyderef (tl V15204) V15351) (if (cons? V15205) (let V15206 (shen.lazyderef (hd V15205) V15351) (if (= * V15206) (let V15207 (shen.lazyderef (tl V15205) V15351) (if (cons? V15207) (let B (hd V15207) (let V15208 (shen.lazyderef (tl V15207) V15351) (if (= () V15208) (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y B V15350 V15351 V15352)))) (if (shen.pvar? V15208) (do (shen.bindv V15208 () V15351) (let Result (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y B V15350 V15351 V15352)))) (do (shen.unbindv V15208 V15351) Result))) false)))) (if (shen.pvar? V15207) (let B (shen.newpv V15351) (do (shen.bindv V15207 (cons B ()) V15351) (let Result (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y B V15350 V15351 V15352)))) (do (shen.unbindv V15207 V15351) Result)))) false))) (if (shen.pvar? V15206) (do (shen.bindv V15206 * V15351) (let Result (let V15209 (shen.lazyderef (tl V15205) V15351) (if (cons? V15209) (let B (hd V15209) (let V15210 (shen.lazyderef (tl V15209) V15351) (if (= () V15210) (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y B V15350 V15351 V15352)))) (if (shen.pvar? V15210) (do (shen.bindv V15210 () V15351) (let Result (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y B V15350 V15351 V15352)))) (do (shen.unbindv V15210 V15351) Result))) false)))) (if (shen.pvar? V15209) (let B (shen.newpv V15351) (do (shen.bindv V15209 (cons B ()) V15351) (let Result (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y B V15350 V15351 V15352)))) (do (shen.unbindv V15209 V15351) Result)))) false))) (do (shen.unbindv V15206 V15351) Result))) false))) (if (shen.pvar? V15205) (let B (shen.newpv V15351) (do (shen.bindv V15205 (cons * (cons B ())) V15351) (let Result (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y B V15350 V15351 V15352)))) (do (shen.unbindv V15205 V15351) Result)))) false)))) (if (shen.pvar? V15204) (let A (shen.newpv V15351) (let B (shen.newpv V15351) (do (shen.bindv V15204 (cons A (cons * (cons B ()))) V15351) (let Result (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y B V15350 V15351 V15352)))) (do (shen.unbindv V15204 V15351) Result))))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V15211 (shen.lazyderef V15348 V15351) (if (cons? V15211) (let V15212 (shen.lazyderef (hd V15211) V15351) (if (= @v V15212) (let V15213 (shen.lazyderef (tl V15211) V15351) (if (cons? V15213) (let X (hd V15213) (let V15214 (shen.lazyderef (tl V15213) V15351) (if (cons? V15214) (let Y (hd V15214) (let V15215 (shen.lazyderef (tl V15214) V15351) (if (= () V15215) (let V15216 (shen.lazyderef V15349 V15351) (if (cons? V15216) (let V15217 (shen.lazyderef (hd V15216) V15351) (if (= vector V15217) (let V15218 (shen.lazyderef (tl V15216) V15351) (if (cons? V15218) (let A (hd V15218) (let V15219 (shen.lazyderef (tl V15218) V15351) (if (= () V15219) (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y (cons vector (cons A ())) V15350 V15351 V15352)))) (if (shen.pvar? V15219) (do (shen.bindv V15219 () V15351) (let Result (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y (cons vector (cons A ())) V15350 V15351 V15352)))) (do (shen.unbindv V15219 V15351) Result))) false)))) (if (shen.pvar? V15218) (let A (shen.newpv V15351) (do (shen.bindv V15218 (cons A ()) V15351) (let Result (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y (cons vector (cons A ())) V15350 V15351 V15352)))) (do (shen.unbindv V15218 V15351) Result)))) false))) (if (shen.pvar? V15217) (do (shen.bindv V15217 vector V15351) (let Result (let V15220 (shen.lazyderef (tl V15216) V15351) (if (cons? V15220) (let A (hd V15220) (let V15221 (shen.lazyderef (tl V15220) V15351) (if (= () V15221) (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y (cons vector (cons A ())) V15350 V15351 V15352)))) (if (shen.pvar? V15221) (do (shen.bindv V15221 () V15351) (let Result (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y (cons vector (cons A ())) V15350 V15351 V15352)))) (do (shen.unbindv V15221 V15351) Result))) false)))) (if (shen.pvar? V15220) (let A (shen.newpv V15351) (do (shen.bindv V15220 (cons A ()) V15351) (let Result (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y (cons vector (cons A ())) V15350 V15351 V15352)))) (do (shen.unbindv V15220 V15351) Result)))) false))) (do (shen.unbindv V15217 V15351) Result))) false))) (if (shen.pvar? V15216) (let A (shen.newpv V15351) (do (shen.bindv V15216 (cons vector (cons A ())) V15351) (let Result (do (shen.incinfs) (shen.th* X A V15350 V15351 (freeze (shen.th* Y (cons vector (cons A ())) V15350 V15351 V15352)))) (do (shen.unbindv V15216 V15351) Result)))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V15222 (shen.lazyderef V15348 V15351) (if (cons? V15222) (let V15223 (shen.lazyderef (hd V15222) V15351) (if (= @s V15223) (let V15224 (shen.lazyderef (tl V15222) V15351) (if (cons? V15224) (let X (hd V15224) (let V15225 (shen.lazyderef (tl V15224) V15351) (if (cons? V15225) (let Y (hd V15225) (let V15226 (shen.lazyderef (tl V15225) V15351) (if (= () V15226) (let V15227 (shen.lazyderef V15349 V15351) (if (= string V15227) (do (shen.incinfs) (shen.th* X string V15350 V15351 (freeze (shen.th* Y string V15350 V15351 V15352)))) (if (shen.pvar? V15227) (do (shen.bindv V15227 string V15351) (let Result (do (shen.incinfs) (shen.th* X string V15350 V15351 (freeze (shen.th* Y string V15350 V15351 V15352)))) (do (shen.unbindv V15227 V15351) Result))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V15228 (shen.lazyderef V15348 V15351) (if (cons? V15228) (let V15229 (shen.lazyderef (hd V15228) V15351) (if (= lambda V15229) (let V15230 (shen.lazyderef (tl V15228) V15351) (if (cons? V15230) (let X (hd V15230) (let V15231 (shen.lazyderef (tl V15230) V15351) (if (cons? V15231) (let Y (hd V15231) (let V15232 (shen.lazyderef (tl V15231) V15351) (if (= () V15232) (let V15233 (shen.lazyderef V15349 V15351) (if (cons? V15233) (let A (hd V15233) (let V15234 (shen.lazyderef (tl V15233) V15351) (if (cons? V15234) (let V15235 (shen.lazyderef (hd V15234) V15351) (if (= --> V15235) (let V15236 (shen.lazyderef (tl V15234) V15351) (if (cons? V15236) (let B (hd V15236) (let V15237 (shen.lazyderef (tl V15236) V15351) (if (= () V15237) (let Z (shen.newpv V15351) (let X&& (shen.newpv V15351) (do (shen.incinfs) (cut Throwcontrol V15351 (freeze (bind X&& (shen.placeholder) V15351 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V15351) (shen.lazyderef X V15351) (shen.lazyderef Y V15351)) V15351 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V15350) V15351 V15352)))))))))) (if (shen.pvar? V15237) (do (shen.bindv V15237 () V15351) (let Result (let Z (shen.newpv V15351) (let X&& (shen.newpv V15351) (do (shen.incinfs) (cut Throwcontrol V15351 (freeze (bind X&& (shen.placeholder) V15351 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V15351) (shen.lazyderef X V15351) (shen.lazyderef Y V15351)) V15351 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V15350) V15351 V15352)))))))))) (do (shen.unbindv V15237 V15351) Result))) false)))) (if (shen.pvar? V15236) (let B (shen.newpv V15351) (do (shen.bindv V15236 (cons B ()) V15351) (let Result (let Z (shen.newpv V15351) (let X&& (shen.newpv V15351) (do (shen.incinfs) (cut Throwcontrol V15351 (freeze (bind X&& (shen.placeholder) V15351 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V15351) (shen.lazyderef X V15351) (shen.lazyderef Y V15351)) V15351 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V15350) V15351 V15352)))))))))) (do (shen.unbindv V15236 V15351) Result)))) false))) (if (shen.pvar? V15235) (do (shen.bindv V15235 --> V15351) (let Result (let V15238 (shen.lazyderef (tl V15234) V15351) (if (cons? V15238) (let B (hd V15238) (let V15239 (shen.lazyderef (tl V15238) V15351) (if (= () V15239) (let Z (shen.newpv V15351) (let X&& (shen.newpv V15351) (do (shen.incinfs) (cut Throwcontrol V15351 (freeze (bind X&& (shen.placeholder) V15351 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V15351) (shen.lazyderef X V15351) (shen.lazyderef Y V15351)) V15351 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V15350) V15351 V15352)))))))))) (if (shen.pvar? V15239) (do (shen.bindv V15239 () V15351) (let Result (let Z (shen.newpv V15351) (let X&& (shen.newpv V15351) (do (shen.incinfs) (cut Throwcontrol V15351 (freeze (bind X&& (shen.placeholder) V15351 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V15351) (shen.lazyderef X V15351) (shen.lazyderef Y V15351)) V15351 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V15350) V15351 V15352)))))))))) (do (shen.unbindv V15239 V15351) Result))) false)))) (if (shen.pvar? V15238) (let B (shen.newpv V15351) (do (shen.bindv V15238 (cons B ()) V15351) (let Result (let Z (shen.newpv V15351) (let X&& (shen.newpv V15351) (do (shen.incinfs) (cut Throwcontrol V15351 (freeze (bind X&& (shen.placeholder) V15351 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V15351) (shen.lazyderef X V15351) (shen.lazyderef Y V15351)) V15351 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V15350) V15351 V15352)))))))))) (do (shen.unbindv V15238 V15351) Result)))) false))) (do (shen.unbindv V15235 V15351) Result))) false))) (if (shen.pvar? V15234) (let B (shen.newpv V15351) (do (shen.bindv V15234 (cons --> (cons B ())) V15351) (let Result (let Z (shen.newpv V15351) (let X&& (shen.newpv V15351) (do (shen.incinfs) (cut Throwcontrol V15351 (freeze (bind X&& (shen.placeholder) V15351 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V15351) (shen.lazyderef X V15351) (shen.lazyderef Y V15351)) V15351 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V15350) V15351 V15352)))))))))) (do (shen.unbindv V15234 V15351) Result)))) false)))) (if (shen.pvar? V15233) (let A (shen.newpv V15351) (let B (shen.newpv V15351) (do (shen.bindv V15233 (cons A (cons --> (cons B ()))) V15351) (let Result (let Z (shen.newpv V15351) (let X&& (shen.newpv V15351) (do (shen.incinfs) (cut Throwcontrol V15351 (freeze (bind X&& (shen.placeholder) V15351 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V15351) (shen.lazyderef X V15351) (shen.lazyderef Y V15351)) V15351 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V15350) V15351 V15352)))))))))) (do (shen.unbindv V15233 V15351) Result))))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V15240 (shen.lazyderef V15348 V15351) (if (cons? V15240) (let V15241 (shen.lazyderef (hd V15240) V15351) (if (= let V15241) (let V15242 (shen.lazyderef (tl V15240) V15351) (if (cons? V15242) (let X (hd V15242) (let V15243 (shen.lazyderef (tl V15242) V15351) (if (cons? V15243) (let Y (hd V15243) (let V15244 (shen.lazyderef (tl V15243) V15351) (if (cons? V15244) (let Z (hd V15244) (let V15245 (shen.lazyderef (tl V15244) V15351) (if (= () V15245) (let W (shen.newpv V15351) (let X&& (shen.newpv V15351) (let B (shen.newpv V15351) (do (shen.incinfs) (shen.th* Y B V15350 V15351 (freeze (bind X&& (shen.placeholder) V15351 (freeze (bind W (shen.ebr (shen.lazyderef X&& V15351) (shen.lazyderef X V15351) (shen.lazyderef Z V15351)) V15351 (freeze (shen.th* W V15349 (cons (cons X&& (cons : (cons B ()))) V15350) V15351 V15352))))))))))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V15246 (shen.lazyderef V15348 V15351) (if (cons? V15246) (let V15247 (shen.lazyderef (hd V15246) V15351) (if (= open V15247) (let V15248 (shen.lazyderef (tl V15246) V15351) (if (cons? V15248) (let FileName (hd V15248) (let V15249 (shen.lazyderef (tl V15248) V15351) (if (cons? V15249) (let Direction15179 (hd V15249) (let V15250 (shen.lazyderef (tl V15249) V15351) (if (= () V15250) (let V15251 (shen.lazyderef V15349 V15351) (if (cons? V15251) (let V15252 (shen.lazyderef (hd V15251) V15351) (if (= stream V15252) (let V15253 (shen.lazyderef (tl V15251) V15351) (if (cons? V15253) (let Direction (hd V15253) (let V15254 (shen.lazyderef (tl V15253) V15351) (if (= () V15254) (do (shen.incinfs) (unify! Direction Direction15179 V15351 (freeze (cut Throwcontrol V15351 (freeze (fwhen (element? (shen.lazyderef Direction V15351) (cons in (cons out ()))) V15351 (freeze (shen.th* FileName string V15350 V15351 V15352)))))))) (if (shen.pvar? V15254) (do (shen.bindv V15254 () V15351) (let Result (do (shen.incinfs) (unify! Direction Direction15179 V15351 (freeze (cut Throwcontrol V15351 (freeze (fwhen (element? (shen.lazyderef Direction V15351) (cons in (cons out ()))) V15351 (freeze (shen.th* FileName string V15350 V15351 V15352)))))))) (do (shen.unbindv V15254 V15351) Result))) false)))) (if (shen.pvar? V15253) (let Direction (shen.newpv V15351) (do (shen.bindv V15253 (cons Direction ()) V15351) (let Result (do (shen.incinfs) (unify! Direction Direction15179 V15351 (freeze (cut Throwcontrol V15351 (freeze (fwhen (element? (shen.lazyderef Direction V15351) (cons in (cons out ()))) V15351 (freeze (shen.th* FileName string V15350 V15351 V15352)))))))) (do (shen.unbindv V15253 V15351) Result)))) false))) (if (shen.pvar? V15252) (do (shen.bindv V15252 stream V15351) (let Result (let V15255 (shen.lazyderef (tl V15251) V15351) (if (cons? V15255) (let Direction (hd V15255) (let V15256 (shen.lazyderef (tl V15255) V15351) (if (= () V15256) (do (shen.incinfs) (unify! Direction Direction15179 V15351 (freeze (cut Throwcontrol V15351 (freeze (fwhen (element? (shen.lazyderef Direction V15351) (cons in (cons out ()))) V15351 (freeze (shen.th* FileName string V15350 V15351 V15352)))))))) (if (shen.pvar? V15256) (do (shen.bindv V15256 () V15351) (let Result (do (shen.incinfs) (unify! Direction Direction15179 V15351 (freeze (cut Throwcontrol V15351 (freeze (fwhen (element? (shen.lazyderef Direction V15351) (cons in (cons out ()))) V15351 (freeze (shen.th* FileName string V15350 V15351 V15352)))))))) (do (shen.unbindv V15256 V15351) Result))) false)))) (if (shen.pvar? V15255) (let Direction (shen.newpv V15351) (do (shen.bindv V15255 (cons Direction ()) V15351) (let Result (do (shen.incinfs) (unify! Direction Direction15179 V15351 (freeze (cut Throwcontrol V15351 (freeze (fwhen (element? (shen.lazyderef Direction V15351) (cons in (cons out ()))) V15351 (freeze (shen.th* FileName string V15350 V15351 V15352)))))))) (do (shen.unbindv V15255 V15351) Result)))) false))) (do (shen.unbindv V15252 V15351) Result))) false))) (if (shen.pvar? V15251) (let Direction (shen.newpv V15351) (do (shen.bindv V15251 (cons stream (cons Direction ())) V15351) (let Result (do (shen.incinfs) (unify! Direction Direction15179 V15351 (freeze (cut Throwcontrol V15351 (freeze (fwhen (element? (shen.lazyderef Direction V15351) (cons in (cons out ()))) V15351 (freeze (shen.th* FileName string V15350 V15351 V15352)))))))) (do (shen.unbindv V15251 V15351) Result)))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V15257 (shen.lazyderef V15348 V15351) (if (cons? V15257) (let V15258 (shen.lazyderef (hd V15257) V15351) (if (= type V15258) (let V15259 (shen.lazyderef (tl V15257) V15351) (if (cons? V15259) (let X (hd V15259) (let V15260 (shen.lazyderef (tl V15259) V15351) (if (cons? V15260) (let A (hd V15260) (let V15261 (shen.lazyderef (tl V15260) V15351) (if (= () V15261) (do (shen.incinfs) (cut Throwcontrol V15351 (freeze (unify A V15349 V15351 (freeze (shen.th* X A V15350 V15351 V15352)))))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V15262 (shen.lazyderef V15348 V15351) (if (cons? V15262) (let V15263 (shen.lazyderef (hd V15262) V15351) (if (= input+ V15263) (let V15264 (shen.lazyderef (tl V15262) V15351) (if (cons? V15264) (let A (hd V15264) (let V15265 (shen.lazyderef (tl V15264) V15351) (if (cons? V15265) (let Stream (hd V15265) (let V15266 (shen.lazyderef (tl V15265) V15351) (if (= () V15266) (let C (shen.newpv V15351) (do (shen.incinfs) (bind C (shen.demodulate (shen.lazyderef A V15351)) V15351 (freeze (unify V15349 C V15351 (freeze (shen.th* Stream (cons stream (cons in ())) V15350 V15351 V15352))))))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V15267 (shen.lazyderef V15348 V15351) (if (cons? V15267) (let V15268 (shen.lazyderef (hd V15267) V15351) (if (= set V15268) (let V15269 (shen.lazyderef (tl V15267) V15351) (if (cons? V15269) (let Var (hd V15269) (let V15270 (shen.lazyderef (tl V15269) V15351) (if (cons? V15270) (let Val (hd V15270) (let V15271 (shen.lazyderef (tl V15270) V15351) (if (= () V15271) (do (shen.incinfs) (cut Throwcontrol V15351 (freeze (shen.th* Var symbol V15350 V15351 (freeze (cut Throwcontrol V15351 (freeze (shen.th* (cons value (cons Var ())) V15349 V15350 V15351 (freeze (shen.th* Val V15349 V15350 V15351 V15352)))))))))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let NewHyp (shen.newpv V15351) (do (shen.incinfs) (shen.t*-hyps V15350 NewHyp V15351 (freeze (shen.th* V15348 V15349 NewHyp V15351 V15352))))) (if (= Case false) (let Case (let V15272 (shen.lazyderef V15348 V15351) (if (cons? V15272) (let V15273 (shen.lazyderef (hd V15272) V15351) (if (= define V15273) (let V15274 (shen.lazyderef (tl V15272) V15351) (if (cons? V15274) (let F (hd V15274) (let X (tl V15274) (do (shen.incinfs) (cut Throwcontrol V15351 (freeze (shen.t*-def (cons define (cons F X)) V15349 V15350 V15351 V15352)))))) false)) false)) false)) (if (= Case false) (let Case (let V15275 (shen.lazyderef V15348 V15351) (if (cons? V15275) (let V15276 (shen.lazyderef (hd V15275) V15351) (if (= defmacro V15276) (let V15277 (shen.lazyderef V15349 V15351) (if (= unit V15277) (do (shen.incinfs) (cut Throwcontrol V15351 V15352)) (if (shen.pvar? V15277) (do (shen.bindv V15277 unit V15351) (let Result (do (shen.incinfs) (cut Throwcontrol V15351 V15352)) (do (shen.unbindv V15277 V15351) Result))) false))) false)) false)) (if (= Case false) (let Case (let V15278 (shen.lazyderef V15348 V15351) (if (cons? V15278) (let V15279 (shen.lazyderef (hd V15278) V15351) (if (= shen.process-datatype V15279) (let V15280 (shen.lazyderef V15349 V15351) (if (= symbol V15280) (do (shen.incinfs) (thaw V15352)) (if (shen.pvar? V15280) (do (shen.bindv V15280 symbol V15351) (let Result (do (shen.incinfs) (thaw V15352)) (do (shen.unbindv V15280 V15351) Result))) false))) false)) false)) (if (= Case false) (let Case (let V15281 (shen.lazyderef V15348 V15351) (if (cons? V15281) (let V15282 (shen.lazyderef (hd V15281) V15351) (if (= shen.synonyms-help V15282) (let V15283 (shen.lazyderef V15349 V15351) (if (= symbol V15283) (do (shen.incinfs) (thaw V15352)) (if (shen.pvar? V15283) (do (shen.bindv V15283 symbol V15351) (let Result (do (shen.incinfs) (thaw V15352)) (do (shen.unbindv V15283 V15351) Result))) false))) false)) false)) (if (= Case false) (let Datatypes (shen.newpv V15351) (do (shen.incinfs) (bind Datatypes (value shen.*datatypes*) V15351 (freeze (shen.udefs* (cons V15348 (cons : (cons V15349 ()))) V15350 Datatypes V15351 V15352))))) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)))))
(defun shen.t*-hyps (V15357 V15358 V15359 V15360) (let Case (let V15094 (shen.lazyderef V15357 V15359) (if (cons? V15094) (let V15095 (shen.lazyderef (hd V15094) V15359) (if (cons? V15095) (let V15096 (shen.lazyderef (hd V15095) V15359) (if (cons? V15096) (let V15097 (shen.lazyderef (hd V15096) V15359) (if (= cons V15097) (let V15098 (shen.lazyderef (tl V15096) V15359) (if (cons? V15098) (let X (hd V15098) (let V15099 (shen.lazyderef (tl V15098) V15359) (if (cons? V15099) (let Y (hd V15099) (let V15100 (shen.lazyderef (tl V15099) V15359) (if (= () V15100) (let V15101 (shen.lazyderef (tl V15095) V15359) (if (cons? V15101) (let V15102 (shen.lazyderef (hd V15101) V15359) (if (= : V15102) (let V15103 (shen.lazyderef (tl V15101) V15359) (if (cons? V15103) (let V15104 (shen.lazyderef (hd V15103) V15359) (if (cons? V15104) (let V15105 (shen.lazyderef (hd V15104) V15359) (if (= list V15105) (let V15106 (shen.lazyderef (tl V15104) V15359) (if (cons? V15106) (let A (hd V15106) (let V15107 (shen.lazyderef (tl V15106) V15359) (if (= () V15107) (let V15108 (shen.lazyderef (tl V15103) V15359) (if (= () V15108) (let Hyp (tl V15094) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons list (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15108) (do (shen.bindv V15108 () V15359) (let Result (let Hyp (tl V15094) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons list (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15108 V15359) Result))) false))) (if (shen.pvar? V15107) (do (shen.bindv V15107 () V15359) (let Result (let V15109 (shen.lazyderef (tl V15103) V15359) (if (= () V15109) (let Hyp (tl V15094) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons list (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15109) (do (shen.bindv V15109 () V15359) (let Result (let Hyp (tl V15094) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons list (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15109 V15359) Result))) false))) (do (shen.unbindv V15107 V15359) Result))) false)))) (if (shen.pvar? V15106) (let A (shen.newpv V15359) (do (shen.bindv V15106 (cons A ()) V15359) (let Result (let V15110 (shen.lazyderef (tl V15103) V15359) (if (= () V15110) (let Hyp (tl V15094) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons list (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15110) (do (shen.bindv V15110 () V15359) (let Result (let Hyp (tl V15094) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons list (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15110 V15359) Result))) false))) (do (shen.unbindv V15106 V15359) Result)))) false))) (if (shen.pvar? V15105) (do (shen.bindv V15105 list V15359) (let Result (let V15111 (shen.lazyderef (tl V15104) V15359) (if (cons? V15111) (let A (hd V15111) (let V15112 (shen.lazyderef (tl V15111) V15359) (if (= () V15112) (let V15113 (shen.lazyderef (tl V15103) V15359) (if (= () V15113) (let Hyp (tl V15094) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons list (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15113) (do (shen.bindv V15113 () V15359) (let Result (let Hyp (tl V15094) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons list (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15113 V15359) Result))) false))) (if (shen.pvar? V15112) (do (shen.bindv V15112 () V15359) (let Result (let V15114 (shen.lazyderef (tl V15103) V15359) (if (= () V15114) (let Hyp (tl V15094) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons list (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15114) (do (shen.bindv V15114 () V15359) (let Result (let Hyp (tl V15094) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons list (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15114 V15359) Result))) false))) (do (shen.unbindv V15112 V15359) Result))) false)))) (if (shen.pvar? V15111) (let A (shen.newpv V15359) (do (shen.bindv V15111 (cons A ()) V15359) (let Result (let V15115 (shen.lazyderef (tl V15103) V15359) (if (= () V15115) (let Hyp (tl V15094) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons list (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15115) (do (shen.bindv V15115 () V15359) (let Result (let Hyp (tl V15094) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons list (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15115 V15359) Result))) false))) (do (shen.unbindv V15111 V15359) Result)))) false))) (do (shen.unbindv V15105 V15359) Result))) false))) (if (shen.pvar? V15104) (let A (shen.newpv V15359) (do (shen.bindv V15104 (cons list (cons A ())) V15359) (let Result (let V15116 (shen.lazyderef (tl V15103) V15359) (if (= () V15116) (let Hyp (tl V15094) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons list (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15116) (do (shen.bindv V15116 () V15359) (let Result (let Hyp (tl V15094) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons list (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15116 V15359) Result))) false))) (do (shen.unbindv V15104 V15359) Result)))) false))) false)) false)) false)) false))) false))) false)) false)) false)) false)) false)) (if (= Case false) (let Case (let V15117 (shen.lazyderef V15357 V15359) (if (cons? V15117) (let V15118 (shen.lazyderef (hd V15117) V15359) (if (cons? V15118) (let V15119 (shen.lazyderef (hd V15118) V15359) (if (cons? V15119) (let V15120 (shen.lazyderef (hd V15119) V15359) (if (= @p V15120) (let V15121 (shen.lazyderef (tl V15119) V15359) (if (cons? V15121) (let X (hd V15121) (let V15122 (shen.lazyderef (tl V15121) V15359) (if (cons? V15122) (let Y (hd V15122) (let V15123 (shen.lazyderef (tl V15122) V15359) (if (= () V15123) (let V15124 (shen.lazyderef (tl V15118) V15359) (if (cons? V15124) (let V15125 (shen.lazyderef (hd V15124) V15359) (if (= : V15125) (let V15126 (shen.lazyderef (tl V15124) V15359) (if (cons? V15126) (let V15127 (shen.lazyderef (hd V15126) V15359) (if (cons? V15127) (let A (hd V15127) (let V15128 (shen.lazyderef (tl V15127) V15359) (if (cons? V15128) (let V15129 (shen.lazyderef (hd V15128) V15359) (if (= * V15129) (let V15130 (shen.lazyderef (tl V15128) V15359) (if (cons? V15130) (let B (hd V15130) (let V15131 (shen.lazyderef (tl V15130) V15359) (if (= () V15131) (let V15132 (shen.lazyderef (tl V15126) V15359) (if (= () V15132) (let Hyp (tl V15117) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (shen.lazyderef B V15359) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15132) (do (shen.bindv V15132 () V15359) (let Result (let Hyp (tl V15117) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (shen.lazyderef B V15359) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15132 V15359) Result))) false))) (if (shen.pvar? V15131) (do (shen.bindv V15131 () V15359) (let Result (let V15133 (shen.lazyderef (tl V15126) V15359) (if (= () V15133) (let Hyp (tl V15117) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (shen.lazyderef B V15359) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15133) (do (shen.bindv V15133 () V15359) (let Result (let Hyp (tl V15117) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (shen.lazyderef B V15359) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15133 V15359) Result))) false))) (do (shen.unbindv V15131 V15359) Result))) false)))) (if (shen.pvar? V15130) (let B (shen.newpv V15359) (do (shen.bindv V15130 (cons B ()) V15359) (let Result (let V15134 (shen.lazyderef (tl V15126) V15359) (if (= () V15134) (let Hyp (tl V15117) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (shen.lazyderef B V15359) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15134) (do (shen.bindv V15134 () V15359) (let Result (let Hyp (tl V15117) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (shen.lazyderef B V15359) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15134 V15359) Result))) false))) (do (shen.unbindv V15130 V15359) Result)))) false))) (if (shen.pvar? V15129) (do (shen.bindv V15129 * V15359) (let Result (let V15135 (shen.lazyderef (tl V15128) V15359) (if (cons? V15135) (let B (hd V15135) (let V15136 (shen.lazyderef (tl V15135) V15359) (if (= () V15136) (let V15137 (shen.lazyderef (tl V15126) V15359) (if (= () V15137) (let Hyp (tl V15117) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (shen.lazyderef B V15359) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15137) (do (shen.bindv V15137 () V15359) (let Result (let Hyp (tl V15117) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (shen.lazyderef B V15359) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15137 V15359) Result))) false))) (if (shen.pvar? V15136) (do (shen.bindv V15136 () V15359) (let Result (let V15138 (shen.lazyderef (tl V15126) V15359) (if (= () V15138) (let Hyp (tl V15117) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (shen.lazyderef B V15359) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15138) (do (shen.bindv V15138 () V15359) (let Result (let Hyp (tl V15117) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (shen.lazyderef B V15359) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15138 V15359) Result))) false))) (do (shen.unbindv V15136 V15359) Result))) false)))) (if (shen.pvar? V15135) (let B (shen.newpv V15359) (do (shen.bindv V15135 (cons B ()) V15359) (let Result (let V15139 (shen.lazyderef (tl V15126) V15359) (if (= () V15139) (let Hyp (tl V15117) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (shen.lazyderef B V15359) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15139) (do (shen.bindv V15139 () V15359) (let Result (let Hyp (tl V15117) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (shen.lazyderef B V15359) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15139 V15359) Result))) false))) (do (shen.unbindv V15135 V15359) Result)))) false))) (do (shen.unbindv V15129 V15359) Result))) false))) (if (shen.pvar? V15128) (let B (shen.newpv V15359) (do (shen.bindv V15128 (cons * (cons B ())) V15359) (let Result (let V15140 (shen.lazyderef (tl V15126) V15359) (if (= () V15140) (let Hyp (tl V15117) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (shen.lazyderef B V15359) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15140) (do (shen.bindv V15140 () V15359) (let Result (let Hyp (tl V15117) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (shen.lazyderef B V15359) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15140 V15359) Result))) false))) (do (shen.unbindv V15128 V15359) Result)))) false)))) (if (shen.pvar? V15127) (let A (shen.newpv V15359) (let B (shen.newpv V15359) (do (shen.bindv V15127 (cons A (cons * (cons B ()))) V15359) (let Result (let V15141 (shen.lazyderef (tl V15126) V15359) (if (= () V15141) (let Hyp (tl V15117) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (shen.lazyderef B V15359) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15141) (do (shen.bindv V15141 () V15359) (let Result (let Hyp (tl V15117) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (shen.lazyderef B V15359) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15141 V15359) Result))) false))) (do (shen.unbindv V15127 V15359) Result))))) false))) false)) false)) false)) false))) false))) false)) false)) false)) false)) false)) (if (= Case false) (let Case (let V15142 (shen.lazyderef V15357 V15359) (if (cons? V15142) (let V15143 (shen.lazyderef (hd V15142) V15359) (if (cons? V15143) (let V15144 (shen.lazyderef (hd V15143) V15359) (if (cons? V15144) (let V15145 (shen.lazyderef (hd V15144) V15359) (if (= @v V15145) (let V15146 (shen.lazyderef (tl V15144) V15359) (if (cons? V15146) (let X (hd V15146) (let V15147 (shen.lazyderef (tl V15146) V15359) (if (cons? V15147) (let Y (hd V15147) (let V15148 (shen.lazyderef (tl V15147) V15359) (if (= () V15148) (let V15149 (shen.lazyderef (tl V15143) V15359) (if (cons? V15149) (let V15150 (shen.lazyderef (hd V15149) V15359) (if (= : V15150) (let V15151 (shen.lazyderef (tl V15149) V15359) (if (cons? V15151) (let V15152 (shen.lazyderef (hd V15151) V15359) (if (cons? V15152) (let V15153 (shen.lazyderef (hd V15152) V15359) (if (= vector V15153) (let V15154 (shen.lazyderef (tl V15152) V15359) (if (cons? V15154) (let A (hd V15154) (let V15155 (shen.lazyderef (tl V15154) V15359) (if (= () V15155) (let V15156 (shen.lazyderef (tl V15151) V15359) (if (= () V15156) (let Hyp (tl V15142) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons vector (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15156) (do (shen.bindv V15156 () V15359) (let Result (let Hyp (tl V15142) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons vector (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15156 V15359) Result))) false))) (if (shen.pvar? V15155) (do (shen.bindv V15155 () V15359) (let Result (let V15157 (shen.lazyderef (tl V15151) V15359) (if (= () V15157) (let Hyp (tl V15142) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons vector (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15157) (do (shen.bindv V15157 () V15359) (let Result (let Hyp (tl V15142) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons vector (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15157 V15359) Result))) false))) (do (shen.unbindv V15155 V15359) Result))) false)))) (if (shen.pvar? V15154) (let A (shen.newpv V15359) (do (shen.bindv V15154 (cons A ()) V15359) (let Result (let V15158 (shen.lazyderef (tl V15151) V15359) (if (= () V15158) (let Hyp (tl V15142) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons vector (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15158) (do (shen.bindv V15158 () V15359) (let Result (let Hyp (tl V15142) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons vector (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15158 V15359) Result))) false))) (do (shen.unbindv V15154 V15359) Result)))) false))) (if (shen.pvar? V15153) (do (shen.bindv V15153 vector V15359) (let Result (let V15159 (shen.lazyderef (tl V15152) V15359) (if (cons? V15159) (let A (hd V15159) (let V15160 (shen.lazyderef (tl V15159) V15359) (if (= () V15160) (let V15161 (shen.lazyderef (tl V15151) V15359) (if (= () V15161) (let Hyp (tl V15142) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons vector (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15161) (do (shen.bindv V15161 () V15359) (let Result (let Hyp (tl V15142) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons vector (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15161 V15359) Result))) false))) (if (shen.pvar? V15160) (do (shen.bindv V15160 () V15359) (let Result (let V15162 (shen.lazyderef (tl V15151) V15359) (if (= () V15162) (let Hyp (tl V15142) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons vector (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15162) (do (shen.bindv V15162 () V15359) (let Result (let Hyp (tl V15142) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons vector (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15162 V15359) Result))) false))) (do (shen.unbindv V15160 V15359) Result))) false)))) (if (shen.pvar? V15159) (let A (shen.newpv V15359) (do (shen.bindv V15159 (cons A ()) V15359) (let Result (let V15163 (shen.lazyderef (tl V15151) V15359) (if (= () V15163) (let Hyp (tl V15142) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons vector (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15163) (do (shen.bindv V15163 () V15359) (let Result (let Hyp (tl V15142) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons vector (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15163 V15359) Result))) false))) (do (shen.unbindv V15159 V15359) Result)))) false))) (do (shen.unbindv V15153 V15359) Result))) false))) (if (shen.pvar? V15152) (let A (shen.newpv V15359) (do (shen.bindv V15152 (cons vector (cons A ())) V15359) (let Result (let V15164 (shen.lazyderef (tl V15151) V15359) (if (= () V15164) (let Hyp (tl V15142) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons vector (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15164) (do (shen.bindv V15164 () V15359) (let Result (let Hyp (tl V15142) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons (shen.lazyderef A V15359) ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons (cons vector (cons (shen.lazyderef A V15359) ())) ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15164 V15359) Result))) false))) (do (shen.unbindv V15152 V15359) Result)))) false))) false)) false)) false)) false))) false))) false)) false)) false)) false)) false)) (if (= Case false) (let Case (let V15165 (shen.lazyderef V15357 V15359) (if (cons? V15165) (let V15166 (shen.lazyderef (hd V15165) V15359) (if (cons? V15166) (let V15167 (shen.lazyderef (hd V15166) V15359) (if (cons? V15167) (let V15168 (shen.lazyderef (hd V15167) V15359) (if (= @s V15168) (let V15169 (shen.lazyderef (tl V15167) V15359) (if (cons? V15169) (let X (hd V15169) (let V15170 (shen.lazyderef (tl V15169) V15359) (if (cons? V15170) (let Y (hd V15170) (let V15171 (shen.lazyderef (tl V15170) V15359) (if (= () V15171) (let V15172 (shen.lazyderef (tl V15166) V15359) (if (cons? V15172) (let V15173 (shen.lazyderef (hd V15172) V15359) (if (= : V15173) (let V15174 (shen.lazyderef (tl V15172) V15359) (if (cons? V15174) (let V15175 (shen.lazyderef (hd V15174) V15359) (if (= string V15175) (let V15176 (shen.lazyderef (tl V15174) V15359) (if (= () V15176) (let Hyp (tl V15165) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons string ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons string ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15176) (do (shen.bindv V15176 () V15359) (let Result (let Hyp (tl V15165) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons string ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons string ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15176 V15359) Result))) false))) (if (shen.pvar? V15175) (do (shen.bindv V15175 string V15359) (let Result (let V15177 (shen.lazyderef (tl V15174) V15359) (if (= () V15177) (let Hyp (tl V15165) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons string ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons string ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (if (shen.pvar? V15177) (do (shen.bindv V15177 () V15359) (let Result (let Hyp (tl V15165) (do (shen.incinfs) (bind V15358 (cons (cons (shen.lazyderef X V15359) (cons : (cons string ()))) (cons (cons (shen.lazyderef Y V15359) (cons : (cons string ()))) (shen.lazyderef Hyp V15359))) V15359 V15360))) (do (shen.unbindv V15177 V15359) Result))) false))) (do (shen.unbindv V15175 V15359) Result))) false))) false)) false)) false)) false))) false))) false)) false)) false)) false)) false)) (if (= Case false) (let V15178 (shen.lazyderef V15357 V15359) (if (cons? V15178) (let X (hd V15178) (let Hyp (tl V15178) (let NewHyps (shen.newpv V15359) (do (shen.incinfs) (bind V15358 (cons (shen.lazyderef X V15359) (shen.lazyderef NewHyps V15359)) V15359 (freeze (shen.t*-hyps Hyp NewHyps V15359 V15360))))))) false)) Case)) Case)) Case)) Case)))
(defun shen.show (V15377 V15378 V15379 V15380) (cond ((value shen.*spy*) (do (shen.line) (do (shen.show-p (shen.deref V15377 V15379)) (do (nl 1) (do (nl 1) (do (shen.show-assumptions (shen.deref V15378 V15379) 1) (do (shen.prhush "
> " (stoutput)) (do (shen.pause-for-user) (thaw V15380))))))))) (true (thaw V15380))))
(defun shen.line () (let Infs (inferences) (shen.prhush (cn "____________________________________________________________ " (shen.app Infs (cn " inference" (shen.app (if (= 1 Infs) "" "s") " 
?- " shen.a)) shen.a)) (stoutput))))
(defun shen.show-p (V15382) (cond ((and (cons? V15382) (and (cons? (tl V15382)) (and (= : (hd (tl V15382))) (and (cons? (tl (tl V15382))) (= () (tl (tl (tl V15382)))))))) (shen.prhush (shen.app (hd V15382) (cn " : " (shen.app (hd (tl (tl V15382))) "" shen.r)) shen.r) (stoutput))) (true (shen.prhush (shen.app V15382 "" shen.r) (stoutput)))))
(defun shen.show-assumptions (V15387 V15388) (cond ((= () V15387) shen.skip) ((cons? V15387) (do (shen.prhush (shen.app V15388 ". " shen.a) (stoutput)) (do (shen.show-p (hd V15387)) (do (nl 1) (shen.show-assumptions (tl V15387) (+ V15388 1)))))) (true (shen.f_error shen.show-assumptions))))
(defun shen.pause-for-user () (let Byte (read-byte (stinput)) (if (= Byte 94) (simple-error "input aborted
") (nl 1))))
(defun shen.typedf? (V15390) (cons? (assoc V15390 (value shen.*signedfuncs*))))
(defun shen.sigf (V15392) (concat shen.type-signature-of- V15392))
(defun shen.placeholder () (gensym &&))
(defun shen.base (V15397 V15398 V15399 V15400) (let Case (let V15081 (shen.lazyderef V15398 V15399) (if (= number V15081) (do (shen.incinfs) (fwhen (number? (shen.lazyderef V15397 V15399)) V15399 V15400)) (if (shen.pvar? V15081) (do (shen.bindv V15081 number V15399) (let Result (do (shen.incinfs) (fwhen (number? (shen.lazyderef V15397 V15399)) V15399 V15400)) (do (shen.unbindv V15081 V15399) Result))) false))) (if (= Case false) (let Case (let V15082 (shen.lazyderef V15398 V15399) (if (= boolean V15082) (do (shen.incinfs) (fwhen (boolean? (shen.lazyderef V15397 V15399)) V15399 V15400)) (if (shen.pvar? V15082) (do (shen.bindv V15082 boolean V15399) (let Result (do (shen.incinfs) (fwhen (boolean? (shen.lazyderef V15397 V15399)) V15399 V15400)) (do (shen.unbindv V15082 V15399) Result))) false))) (if (= Case false) (let Case (let V15083 (shen.lazyderef V15398 V15399) (if (= string V15083) (do (shen.incinfs) (fwhen (string? (shen.lazyderef V15397 V15399)) V15399 V15400)) (if (shen.pvar? V15083) (do (shen.bindv V15083 string V15399) (let Result (do (shen.incinfs) (fwhen (string? (shen.lazyderef V15397 V15399)) V15399 V15400)) (do (shen.unbindv V15083 V15399) Result))) false))) (if (= Case false) (let Case (let V15084 (shen.lazyderef V15398 V15399) (if (= symbol V15084) (do (shen.incinfs) (fwhen (symbol? (shen.lazyderef V15397 V15399)) V15399 (freeze (fwhen (not (shen.ue? (shen.lazyderef V15397 V15399))) V15399 V15400)))) (if (shen.pvar? V15084) (do (shen.bindv V15084 symbol V15399) (let Result (do (shen.incinfs) (fwhen (symbol? (shen.lazyderef V15397 V15399)) V15399 (freeze (fwhen (not (shen.ue? (shen.lazyderef V15397 V15399))) V15399 V15400)))) (do (shen.unbindv V15084 V15399) Result))) false))) (if (= Case false) (let V15085 (shen.lazyderef V15397 V15399) (if (= () V15085) (let V15086 (shen.lazyderef V15398 V15399) (if (cons? V15086) (let V15087 (shen.lazyderef (hd V15086) V15399) (if (= list V15087) (let V15088 (shen.lazyderef (tl V15086) V15399) (if (cons? V15088) (let A (hd V15088) (let V15089 (shen.lazyderef (tl V15088) V15399) (if (= () V15089) (do (shen.incinfs) (thaw V15400)) (if (shen.pvar? V15089) (do (shen.bindv V15089 () V15399) (let Result (do (shen.incinfs) (thaw V15400)) (do (shen.unbindv V15089 V15399) Result))) false)))) (if (shen.pvar? V15088) (let A (shen.newpv V15399) (do (shen.bindv V15088 (cons A ()) V15399) (let Result (do (shen.incinfs) (thaw V15400)) (do (shen.unbindv V15088 V15399) Result)))) false))) (if (shen.pvar? V15087) (do (shen.bindv V15087 list V15399) (let Result (let V15090 (shen.lazyderef (tl V15086) V15399) (if (cons? V15090) (let A (hd V15090) (let V15091 (shen.lazyderef (tl V15090) V15399) (if (= () V15091) (do (shen.incinfs) (thaw V15400)) (if (shen.pvar? V15091) (do (shen.bindv V15091 () V15399) (let Result (do (shen.incinfs) (thaw V15400)) (do (shen.unbindv V15091 V15399) Result))) false)))) (if (shen.pvar? V15090) (let A (shen.newpv V15399) (do (shen.bindv V15090 (cons A ()) V15399) (let Result (do (shen.incinfs) (thaw V15400)) (do (shen.unbindv V15090 V15399) Result)))) false))) (do (shen.unbindv V15087 V15399) Result))) false))) (if (shen.pvar? V15086) (let A (shen.newpv V15399) (do (shen.bindv V15086 (cons list (cons A ())) V15399) (let Result (do (shen.incinfs) (thaw V15400)) (do (shen.unbindv V15086 V15399) Result)))) false))) false)) Case)) Case)) Case)) Case)))
(defun shen.by_hypothesis (V15406 V15407 V15408 V15409 V15410) (let Case (let V15072 (shen.lazyderef V15408 V15409) (if (cons? V15072) (let V15073 (shen.lazyderef (hd V15072) V15409) (if (cons? V15073) (let Y (hd V15073) (let V15074 (shen.lazyderef (tl V15073) V15409) (if (cons? V15074) (let V15075 (shen.lazyderef (hd V15074) V15409) (if (= : V15075) (let V15076 (shen.lazyderef (tl V15074) V15409) (if (cons? V15076) (let B (hd V15076) (let V15077 (shen.lazyderef (tl V15076) V15409) (if (= () V15077) (do (shen.incinfs) (identical V15406 Y V15409 (freeze (unify! V15407 B V15409 V15410)))) false))) false)) false)) false))) false)) false)) (if (= Case false) (let V15078 (shen.lazyderef V15408 V15409) (if (cons? V15078) (let Hyp (tl V15078) (do (shen.incinfs) (shen.by_hypothesis V15406 V15407 Hyp V15409 V15410))) false)) Case)))
(defun shen.t*-def (V15416 V15417 V15418 V15419 V15420) (let V15066 (shen.lazyderef V15416 V15419) (if (cons? V15066) (let V15067 (shen.lazyderef (hd V15066) V15419) (if (= define V15067) (let V15068 (shen.lazyderef (tl V15066) V15419) (if (cons? V15068) (let F (hd V15068) (let X (tl V15068) (let Y (shen.newpv V15419) (let E (shen.newpv V15419) (do (shen.incinfs) (shen.t*-defh (compile (lambda Y (shen.<sig+rules> Y)) X (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
")))) F V15417 V15418 V15419 V15420)))))) false)) false)) false)))
(defun shen.t*-defh (V15427 V15428 V15429 V15430 V15431 V15432) (let V15062 (shen.lazyderef V15427 V15431) (if (cons? V15062) (let Sig (hd V15062) (let Rules (tl V15062) (do (shen.incinfs) (shen.t*-defhh Sig (shen.ue-sig Sig) V15428 V15429 V15430 Rules V15431 V15432)))) false)))
(defun shen.t*-defhh (V15441 V15442 V15443 V15444 V15445 V15446 V15447 V15448) (do (shen.incinfs) (shen.t*-rules V15446 V15442 1 V15443 (cons (cons V15443 (cons : (cons V15442 ()))) V15445) V15447 (freeze (shen.memo V15443 V15441 V15444 V15447 V15448)))))
(defun shen.memo (V15454 V15455 V15456 V15457 V15458) (let Jnk (shen.newpv V15457) (do (shen.incinfs) (unify! V15456 V15455 V15457 (freeze (bind Jnk (declare (shen.lazyderef V15454 V15457) (shen.lazyderef V15456 V15457)) V15457 V15458))))))
(defun shen.<sig+rules> (V15460) (let Parse_shen.<signature> (shen.<signature> V15460) (if (not (= (fail) Parse_shen.<signature>)) (let Parse_shen.<non-ll-rules> (shen.<non-ll-rules> Parse_shen.<signature>) (if (not (= (fail) Parse_shen.<non-ll-rules>)) (shen.pair (hd Parse_shen.<non-ll-rules>) (cons (shen.hdtl Parse_shen.<signature>) (shen.hdtl Parse_shen.<non-ll-rules>))) (fail))) (fail))))
(defun shen.<non-ll-rules> (V15462) (let YaccParse (let Parse_shen.<rule> (shen.<rule> V15462) (if (not (= (fail) Parse_shen.<rule>)) (let Parse_shen.<non-ll-rules> (shen.<non-ll-rules> Parse_shen.<rule>) (if (not (= (fail) Parse_shen.<non-ll-rules>)) (shen.pair (hd Parse_shen.<non-ll-rules>) (cons (shen.hdtl Parse_shen.<rule>) (shen.hdtl Parse_shen.<non-ll-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<rule> (shen.<rule> V15462) (if (not (= (fail) Parse_shen.<rule>)) (shen.pair (hd Parse_shen.<rule>) (cons (shen.hdtl Parse_shen.<rule>) ())) (fail))) YaccParse)))
(defun shen.ue (V15464) (cond ((and (cons? V15464) (and (cons? (tl V15464)) (and (= () (tl (tl V15464))) (= (hd V15464) protect)))) V15464) ((cons? V15464) (map (lambda Z (shen.ue Z)) V15464)) ((variable? V15464) (concat && V15464)) (true V15464)))
(defun shen.ue-sig (V15466) (cond ((cons? V15466) (map (lambda Z (shen.ue-sig Z)) V15466)) ((variable? V15466) (concat &&& V15466)) (true V15466)))
(defun shen.ues (V15472) (cond ((shen.ue? V15472) (cons V15472 ())) ((cons? V15472) (union (shen.ues (hd V15472)) (shen.ues (tl V15472)))) (true ())))
(defun shen.ue? (V15474) (and (symbol? V15474) (shen.ue-h? (str V15474))))
(defun shen.ue-h? (V15482) (cond ((and (shen.+string? V15482) (and (= "&" (pos V15482 0)) (and (shen.+string? (tlstr V15482)) (= "&" (pos (tlstr V15482) 0))))) true) (true false)))
(defun shen.t*-rules (V15490 V15491 V15492 V15493 V15494 V15495 V15496) (let Throwcontrol (shen.catchpoint) (shen.cutpoint Throwcontrol (let Case (let V15046 (shen.lazyderef V15490 V15495) (if (= () V15046) (do (shen.incinfs) (thaw V15496)) false)) (if (= Case false) (let Case (let V15047 (shen.lazyderef V15490 V15495) (if (cons? V15047) (let Rule (hd V15047) (let Rules (tl V15047) (do (shen.incinfs) (shen.t*-rule (shen.ue Rule) V15491 V15494 V15495 (freeze (cut Throwcontrol V15495 (freeze (shen.t*-rules Rules V15491 (+ V15492 1) V15493 V15494 V15495 V15496)))))))) false)) (if (= Case false) (let Err (shen.newpv V15495) (do (shen.incinfs) (bind Err (simple-error (cn "type error in rule " (shen.app (shen.lazyderef V15492 V15495) (cn " of " (shen.app (shen.lazyderef V15493 V15495) "" shen.a)) shen.a))) V15495 V15496))) Case)) Case)))))
(defun shen.t*-rule (V15502 V15503 V15504 V15505 V15506) (let Throwcontrol (shen.catchpoint) (shen.cutpoint Throwcontrol (let V15038 (shen.lazyderef V15502 V15505) (if (cons? V15038) (let Patterns (hd V15038) (let V15039 (shen.lazyderef (tl V15038) V15505) (if (cons? V15039) (let Action (hd V15039) (let V15040 (shen.lazyderef (tl V15039) V15505) (if (= () V15040) (let NewHyps (shen.newpv V15505) (do (shen.incinfs) (shen.newhyps (shen.placeholders Patterns) V15504 NewHyps V15505 (freeze (shen.t*-patterns Patterns V15503 NewHyps V15505 (freeze (cut Throwcontrol V15505 (freeze (shen.t*-action (shen.curry (shen.ue Action)) (shen.result-type Patterns V15503) (shen.patthyps Patterns V15503 V15504) V15505 V15506))))))))) false))) false))) false)))))
(defun shen.placeholders (V15512) (cond ((shen.ue? V15512) (cons V15512 ())) ((cons? V15512) (union (shen.placeholders (hd V15512)) (shen.placeholders (tl V15512)))) (true ())))
(defun shen.newhyps (V15518 V15519 V15520 V15521 V15522) (let Case (let V15025 (shen.lazyderef V15518 V15521) (if (= () V15025) (do (shen.incinfs) (unify! V15520 V15519 V15521 V15522)) false)) (if (= Case false) (let V15026 (shen.lazyderef V15518 V15521) (if (cons? V15026) (let V15021 (hd V15026) (let Vs (tl V15026) (let V15027 (shen.lazyderef V15520 V15521) (if (cons? V15027) (let V15028 (shen.lazyderef (hd V15027) V15521) (if (cons? V15028) (let V (hd V15028) (let V15029 (shen.lazyderef (tl V15028) V15521) (if (cons? V15029) (let V15030 (shen.lazyderef (hd V15029) V15521) (if (= : V15030) (let V15031 (shen.lazyderef (tl V15029) V15521) (if (cons? V15031) (let A (hd V15031) (let V15032 (shen.lazyderef (tl V15031) V15521) (if (= () V15032) (let NewHyp (tl V15027) (do (shen.incinfs) (unify! V V15021 V15521 (freeze (shen.newhyps Vs V15519 NewHyp V15521 V15522))))) (if (shen.pvar? V15032) (do (shen.bindv V15032 () V15521) (let Result (let NewHyp (tl V15027) (do (shen.incinfs) (unify! V V15021 V15521 (freeze (shen.newhyps Vs V15519 NewHyp V15521 V15522))))) (do (shen.unbindv V15032 V15521) Result))) false)))) (if (shen.pvar? V15031) (let A (shen.newpv V15521) (do (shen.bindv V15031 (cons A ()) V15521) (let Result (let NewHyp (tl V15027) (do (shen.incinfs) (unify! V V15021 V15521 (freeze (shen.newhyps Vs V15519 NewHyp V15521 V15522))))) (do (shen.unbindv V15031 V15521) Result)))) false))) (if (shen.pvar? V15030) (do (shen.bindv V15030 : V15521) (let Result (let V15033 (shen.lazyderef (tl V15029) V15521) (if (cons? V15033) (let A (hd V15033) (let V15034 (shen.lazyderef (tl V15033) V15521) (if (= () V15034) (let NewHyp (tl V15027) (do (shen.incinfs) (unify! V V15021 V15521 (freeze (shen.newhyps Vs V15519 NewHyp V15521 V15522))))) (if (shen.pvar? V15034) (do (shen.bindv V15034 () V15521) (let Result (let NewHyp (tl V15027) (do (shen.incinfs) (unify! V V15021 V15521 (freeze (shen.newhyps Vs V15519 NewHyp V15521 V15522))))) (do (shen.unbindv V15034 V15521) Result))) false)))) (if (shen.pvar? V15033) (let A (shen.newpv V15521) (do (shen.bindv V15033 (cons A ()) V15521) (let Result (let NewHyp (tl V15027) (do (shen.incinfs) (unify! V V15021 V15521 (freeze (shen.newhyps Vs V15519 NewHyp V15521 V15522))))) (do (shen.unbindv V15033 V15521) Result)))) false))) (do (shen.unbindv V15030 V15521) Result))) false))) (if (shen.pvar? V15029) (let A (shen.newpv V15521) (do (shen.bindv V15029 (cons : (cons A ())) V15521) (let Result (let NewHyp (tl V15027) (do (shen.incinfs) (unify! V V15021 V15521 (freeze (shen.newhyps Vs V15519 NewHyp V15521 V15522))))) (do (shen.unbindv V15029 V15521) Result)))) false)))) (if (shen.pvar? V15028) (let V (shen.newpv V15521) (let A (shen.newpv V15521) (do (shen.bindv V15028 (cons V (cons : (cons A ()))) V15521) (let Result (let NewHyp (tl V15027) (do (shen.incinfs) (unify! V V15021 V15521 (freeze (shen.newhyps Vs V15519 NewHyp V15521 V15522))))) (do (shen.unbindv V15028 V15521) Result))))) false))) (if (shen.pvar? V15027) (let V (shen.newpv V15521) (let A (shen.newpv V15521) (let NewHyp (shen.newpv V15521) (do (shen.bindv V15027 (cons (cons V (cons : (cons A ()))) NewHyp) V15521) (let Result (do (shen.incinfs) (unify! V V15021 V15521 (freeze (shen.newhyps Vs V15519 NewHyp V15521 V15522)))) (do (shen.unbindv V15027 V15521) Result)))))) false))))) false)) Case)))
(defun shen.patthyps (V15528 V15529 V15530) (cond ((= () V15528) V15530) ((and (cons? V15528) (and (cons? V15529) (and (cons? (tl V15529)) (and (= --> (hd (tl V15529))) (and (cons? (tl (tl V15529))) (= () (tl (tl (tl V15529))))))))) (adjoin (cons (hd V15528) (cons : (cons (hd V15529) ()))) (shen.patthyps (tl V15528) (hd (tl (tl V15529))) V15530))) (true (shen.f_error shen.patthyps))))
(defun shen.result-type (V15537 V15538) (cond ((and (= () V15537) (and (cons? V15538) (and (= --> (hd V15538)) (and (cons? (tl V15538)) (= () (tl (tl V15538))))))) (hd (tl V15538))) ((= () V15537) V15538) ((and (cons? V15537) (and (cons? V15538) (and (cons? (tl V15538)) (and (= --> (hd (tl V15538))) (and (cons? (tl (tl V15538))) (= () (tl (tl (tl V15538))))))))) (shen.result-type (tl V15537) (hd (tl (tl V15538))))) (true (shen.f_error shen.result-type))))
(defun shen.t*-patterns (V15544 V15545 V15546 V15547 V15548) (let Case (let V15013 (shen.lazyderef V15544 V15547) (if (= () V15013) (do (shen.incinfs) (thaw V15548)) false)) (if (= Case false) (let V15014 (shen.lazyderef V15544 V15547) (if (cons? V15014) (let Pattern (hd V15014) (let Patterns (tl V15014) (let V15015 (shen.lazyderef V15545 V15547) (if (cons? V15015) (let A (hd V15015) (let V15016 (shen.lazyderef (tl V15015) V15547) (if (cons? V15016) (let V15017 (shen.lazyderef (hd V15016) V15547) (if (= --> V15017) (let V15018 (shen.lazyderef (tl V15016) V15547) (if (cons? V15018) (let B (hd V15018) (let V15019 (shen.lazyderef (tl V15018) V15547) (if (= () V15019) (do (shen.incinfs) (shen.t* (cons Pattern (cons : (cons A ()))) V15546 V15547 (freeze (shen.t*-patterns Patterns B V15546 V15547 V15548)))) false))) false)) false)) false))) false)))) false)) Case)))
(defun shen.t*-action (V15554 V15555 V15556 V15557 V15558) (let Throwcontrol (shen.catchpoint) (shen.cutpoint Throwcontrol (let Case (let V14990 (shen.lazyderef V15554 V15557) (if (cons? V14990) (let V14991 (shen.lazyderef (hd V14990) V15557) (if (= where V14991) (let V14992 (shen.lazyderef (tl V14990) V15557) (if (cons? V14992) (let P (hd V14992) (let V14993 (shen.lazyderef (tl V14992) V15557) (if (cons? V14993) (let Action (hd V14993) (let V14994 (shen.lazyderef (tl V14993) V15557) (if (= () V14994) (do (shen.incinfs) (cut Throwcontrol V15557 (freeze (shen.t* (cons P (cons : (cons boolean ()))) V15556 V15557 (freeze (cut Throwcontrol V15557 (freeze (shen.t*-action Action V15555 (cons (cons P (cons : (cons verified ()))) V15556) V15557 V15558)))))))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V14995 (shen.lazyderef V15554 V15557) (if (cons? V14995) (let V14996 (shen.lazyderef (hd V14995) V15557) (if (= shen.choicepoint! V14996) (let V14997 (shen.lazyderef (tl V14995) V15557) (if (cons? V14997) (let V14998 (shen.lazyderef (hd V14997) V15557) (if (cons? V14998) (let V14999 (shen.lazyderef (hd V14998) V15557) (if (cons? V14999) (let V15000 (shen.lazyderef (hd V14999) V15557) (if (= fail-if V15000) (let V15001 (shen.lazyderef (tl V14999) V15557) (if (cons? V15001) (let F (hd V15001) (let V15002 (shen.lazyderef (tl V15001) V15557) (if (= () V15002) (let V15003 (shen.lazyderef (tl V14998) V15557) (if (cons? V15003) (let Action (hd V15003) (let V15004 (shen.lazyderef (tl V15003) V15557) (if (= () V15004) (let V15005 (shen.lazyderef (tl V14997) V15557) (if (= () V15005) (do (shen.incinfs) (cut Throwcontrol V15557 (freeze (shen.t*-action (cons where (cons (cons not (cons (cons F (cons Action ())) ())) (cons Action ()))) V15555 V15556 V15557 V15558)))) false)) false))) false)) false))) false)) false)) false)) false)) false)) false)) false)) (if (= Case false) (let Case (let V15006 (shen.lazyderef V15554 V15557) (if (cons? V15006) (let V15007 (shen.lazyderef (hd V15006) V15557) (if (= shen.choicepoint! V15007) (let V15008 (shen.lazyderef (tl V15006) V15557) (if (cons? V15008) (let Action (hd V15008) (let V15009 (shen.lazyderef (tl V15008) V15557) (if (= () V15009) (do (shen.incinfs) (cut Throwcontrol V15557 (freeze (shen.t*-action (cons where (cons (cons not (cons (cons (cons = (cons Action ())) (cons (cons fail ()) ())) ())) (cons Action ()))) V15555 V15556 V15557 V15558)))) false))) false)) false)) false)) (if (= Case false) (do (shen.incinfs) (shen.t* (cons V15554 (cons : (cons V15555 ()))) V15556 V15557 V15558)) Case)) Case)) Case)))))
(defun findall (V15564 V15565 V15566 V15567 V15568) (let B (shen.newpv V15567) (let A (shen.newpv V15567) (do (shen.incinfs) (bind A (gensym shen.a) V15567 (freeze (bind B (set (shen.lazyderef A V15567) ()) V15567 (freeze (shen.findallhelp V15564 V15565 V15566 A V15567 V15568)))))))))
(defun shen.findallhelp (V15575 V15576 V15577 V15578 V15579 V15580) (let Case (do (shen.incinfs) (call V15576 V15579 (freeze (shen.remember V15578 V15575 V15579 (freeze (fwhen false V15579 V15580)))))) (if (= Case false) (do (shen.incinfs) (bind V15577 (value (shen.lazyderef V15578 V15579)) V15579 V15580)) Case)))
(defun shen.remember (V15585 V15586 V15587 V15588) (let B (shen.newpv V15587) (do (shen.incinfs) (bind B (set (shen.deref V15585 V15587) (cons (shen.deref V15586 V15587) (value (shen.deref V15585 V15587)))) V15587 V15588))))
(defun declare (V15776 V15777) (let Record (set shen.*signedfuncs* (cons (cons V15776 V15777) (value shen.*signedfuncs*))) (let Variancy (trap-error (shen.variancy-test V15776 V15777) (lambda E shen.skip)) (let Type (shen.rcons_form (shen.demodulate V15777)) (let F* (concat shen.type-signature-of- V15776) (let Parameters (shen.parameters 1) (let Clause (cons (cons F* (cons X ())) (cons :- (cons (cons (cons unify! (cons X (cons Type ()))) ()) ()))) (let AUM_instruction (shen.aum Clause Parameters) (let Code (shen.aum_to_shen AUM_instruction) (let ShenDef (cons define (cons F* (append Parameters (append (cons ProcessN (cons Continuation ())) (cons -> (cons Code ())))))) (let Eval (shen.eval-without-macros ShenDef) V15776)))))))))))
(defun shen.demodulate (V15779) (trap-error (let Demod (shen.walk (lambda Y (shen.demod Y)) V15779) (if (= Demod V15779) V15779 (shen.demodulate Demod))) (lambda E V15779)))
(defun shen.variancy-test (V15782 V15783) (let TypeF (shen.typecheck V15782 B) (let Check (if (= symbol TypeF) shen.skip (if (shen.variant? TypeF V15783) shen.skip (shen.prhush (cn "warning: changing the type of " (shen.app V15782 " may create errors
" shen.a)) (stoutput)))) shen.skip)))
(defun shen.variant? (V15796 V15797) (cond ((= V15797 V15796) true) ((and (cons? V15796) (and (cons? V15797) (= (hd V15797) (hd V15796)))) (shen.variant? (tl V15796) (tl V15797))) ((and (cons? V15796) (and (cons? V15797) (and (shen.pvar? (hd V15796)) (variable? (hd V15797))))) (shen.variant? (subst shen.a (hd V15796) (tl V15796)) (subst shen.a (hd V15797) (tl V15797)))) ((and (cons? V15796) (and (cons? (hd V15796)) (and (cons? V15797) (cons? (hd V15797))))) (shen.variant? (append (hd V15796) (tl V15796)) (append (hd V15797) (tl V15797)))) (true false)))
(defun shen.type-signature-of-absvector? (V220 V221 V222) (let A (shen.newpv V221) (do (shen.incinfs) (unify! V220 (cons A (cons --> (cons boolean ()))) V221 V222))))
(defun shen.type-signature-of-adjoin (V227 V228 V229) (let A (shen.newpv V228) (do (shen.incinfs) (unify! V227 (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ()))) V228 V229))))
(defun shen.type-signature-of-and (V234 V235 V236) (do (shen.incinfs) (unify! V234 (cons boolean (cons --> (cons (cons boolean (cons --> (cons boolean ()))) ()))) V235 V236)))
(defun shen.type-signature-of-shen.app (V241 V242 V243) (let A (shen.newpv V242) (do (shen.incinfs) (unify! V241 (cons A (cons --> (cons (cons string (cons --> (cons (cons symbol (cons --> (cons string ()))) ()))) ()))) V242 V243))))
(defun shen.type-signature-of-append (V248 V249 V250) (let A (shen.newpv V249) (do (shen.incinfs) (unify! V248 (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ()))) V249 V250))))
(defun shen.type-signature-of-arity (V255 V256 V257) (let A (shen.newpv V256) (do (shen.incinfs) (unify! V255 (cons A (cons --> (cons number ()))) V256 V257))))
(defun shen.type-signature-of-assoc (V262 V263 V264) (let A (shen.newpv V263) (do (shen.incinfs) (unify! V262 (cons A (cons --> (cons (cons (cons list (cons (cons list (cons A ())) ())) (cons --> (cons (cons list (cons A ())) ()))) ()))) V263 V264))))
(defun shen.type-signature-of-boolean? (V269 V270 V271) (let A (shen.newpv V270) (do (shen.incinfs) (unify! V269 (cons A (cons --> (cons boolean ()))) V270 V271))))
(defun shen.type-signature-of-bound? (V276 V277 V278) (do (shen.incinfs) (unify! V276 (cons symbol (cons --> (cons boolean ()))) V277 V278)))
(defun shen.type-signature-of-cd (V283 V284 V285) (do (shen.incinfs) (unify! V283 (cons string (cons --> (cons string ()))) V284 V285)))
(defun shen.type-signature-of-close (V290 V291 V292) (let A (shen.newpv V291) (let B (shen.newpv V291) (do (shen.incinfs) (unify! V290 (cons (cons stream (cons A ())) (cons --> (cons (cons list (cons B ())) ()))) V291 V292)))))
(defun shen.type-signature-of-cn (V297 V298 V299) (do (shen.incinfs) (unify! V297 (cons string (cons --> (cons (cons string (cons --> (cons string ()))) ()))) V298 V299)))
(defun shen.type-signature-of-compile (V304 V305 V306) (let A (shen.newpv V305) (let B (shen.newpv V305) (do (shen.incinfs) (unify! V304 (cons (cons A (cons shen.==> (cons B ()))) (cons --> (cons (cons A (cons --> (cons (cons (cons A (cons --> (cons B ()))) (cons --> (cons B ()))) ()))) ()))) V305 V306)))))
(defun shen.type-signature-of-cons? (V311 V312 V313) (let A (shen.newpv V312) (do (shen.incinfs) (unify! V311 (cons A (cons --> (cons boolean ()))) V312 V313))))
(defun shen.type-signature-of-destroy (V318 V319 V320) (let A (shen.newpv V319) (let B (shen.newpv V319) (do (shen.incinfs) (unify! V318 (cons (cons A (cons --> (cons B ()))) (cons --> (cons symbol ()))) V319 V320)))))
(defun shen.type-signature-of-difference (V325 V326 V327) (let A (shen.newpv V326) (do (shen.incinfs) (unify! V325 (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ()))) V326 V327))))
(defun shen.type-signature-of-do (V332 V333 V334) (let A (shen.newpv V333) (let B (shen.newpv V333) (do (shen.incinfs) (unify! V332 (cons A (cons --> (cons (cons B (cons --> (cons B ()))) ()))) V333 V334)))))
(defun shen.type-signature-of-<e> (V339 V340 V341) (let A (shen.newpv V340) (let B (shen.newpv V340) (do (shen.incinfs) (unify! V339 (cons (cons list (cons A ())) (cons shen.==> (cons (cons list (cons B ())) ()))) V340 V341)))))
(defun shen.type-signature-of-shen.<!> (V346 V347 V348) (let A (shen.newpv V347) (do (shen.incinfs) (unify! V346 (cons (cons list (cons A ())) (cons shen.==> (cons (cons list (cons A ())) ()))) V347 V348))))
(defun shen.type-signature-of-element? (V353 V354 V355) (let A (shen.newpv V354) (do (shen.incinfs) (unify! V353 (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons boolean ()))) ()))) V354 V355))))
(defun shen.type-signature-of-empty? (V360 V361 V362) (let A (shen.newpv V361) (do (shen.incinfs) (unify! V360 (cons A (cons --> (cons boolean ()))) V361 V362))))
(defun shen.type-signature-of-enable-type-theory (V367 V368 V369) (do (shen.incinfs) (unify! V367 (cons symbol (cons --> (cons boolean ()))) V368 V369)))
(defun shen.type-signature-of-external (V374 V375 V376) (do (shen.incinfs) (unify! V374 (cons symbol (cons --> (cons (cons list (cons symbol ())) ()))) V375 V376)))
(defun shen.type-signature-of-error-to-string (V381 V382 V383) (do (shen.incinfs) (unify! V381 (cons exception (cons --> (cons string ()))) V382 V383)))
(defun shen.type-signature-of-explode (V388 V389 V390) (let A (shen.newpv V389) (do (shen.incinfs) (unify! V388 (cons A (cons --> (cons (cons list (cons string ())) ()))) V389 V390))))
(defun shen.type-signature-of-fail (V395 V396 V397) (do (shen.incinfs) (unify! V395 (cons --> (cons symbol ())) V396 V397)))
(defun shen.type-signature-of-fail-if (V402 V403 V404) (do (shen.incinfs) (unify! V402 (cons (cons symbol (cons --> (cons boolean ()))) (cons --> (cons (cons symbol (cons --> (cons symbol ()))) ()))) V403 V404)))
(defun shen.type-signature-of-fix (V409 V410 V411) (let A (shen.newpv V410) (do (shen.incinfs) (unify! V409 (cons (cons A (cons --> (cons A ()))) (cons --> (cons (cons A (cons --> (cons A ()))) ()))) V410 V411))))
(defun shen.type-signature-of-freeze (V416 V417 V418) (let A (shen.newpv V417) (do (shen.incinfs) (unify! V416 (cons A (cons --> (cons (cons lazy (cons A ())) ()))) V417 V418))))
(defun shen.type-signature-of-fst (V423 V424 V425) (let B (shen.newpv V424) (let A (shen.newpv V424) (do (shen.incinfs) (unify! V423 (cons (cons A (cons * (cons B ()))) (cons --> (cons A ()))) V424 V425)))))
(defun shen.type-signature-of-function (V430 V431 V432) (let A (shen.newpv V431) (let B (shen.newpv V431) (do (shen.incinfs) (unify! V430 (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ()))) V431 V432)))))
(defun shen.type-signature-of-gensym (V437 V438 V439) (do (shen.incinfs) (unify! V437 (cons symbol (cons --> (cons symbol ()))) V438 V439)))
(defun shen.type-signature-of-<-vector (V444 V445 V446) (let A (shen.newpv V445) (do (shen.incinfs) (unify! V444 (cons (cons vector (cons A ())) (cons --> (cons (cons number (cons --> (cons A ()))) ()))) V445 V446))))
(defun shen.type-signature-of-vector-> (V451 V452 V453) (let A (shen.newpv V452) (do (shen.incinfs) (unify! V451 (cons (cons vector (cons A ())) (cons --> (cons (cons number (cons --> (cons (cons A (cons --> (cons (cons vector (cons A ())) ()))) ()))) ()))) V452 V453))))
(defun shen.type-signature-of-vector (V458 V459 V460) (let A (shen.newpv V459) (do (shen.incinfs) (unify! V458 (cons number (cons --> (cons (cons vector (cons A ())) ()))) V459 V460))))
(defun shen.type-signature-of-get-time (V465 V466 V467) (do (shen.incinfs) (unify! V465 (cons symbol (cons --> (cons number ()))) V466 V467)))
(defun shen.type-signature-of-hash (V472 V473 V474) (let A (shen.newpv V473) (do (shen.incinfs) (unify! V472 (cons A (cons --> (cons (cons number (cons --> (cons number ()))) ()))) V473 V474))))
(defun shen.type-signature-of-head (V479 V480 V481) (let A (shen.newpv V480) (do (shen.incinfs) (unify! V479 (cons (cons list (cons A ())) (cons --> (cons A ()))) V480 V481))))
(defun shen.type-signature-of-hdv (V486 V487 V488) (let A (shen.newpv V487) (do (shen.incinfs) (unify! V486 (cons (cons vector (cons A ())) (cons --> (cons A ()))) V487 V488))))
(defun shen.type-signature-of-hdstr (V493 V494 V495) (do (shen.incinfs) (unify! V493 (cons string (cons --> (cons string ()))) V494 V495)))
(defun shen.type-signature-of-if (V500 V501 V502) (let A (shen.newpv V501) (do (shen.incinfs) (unify! V500 (cons boolean (cons --> (cons (cons A (cons --> (cons (cons A (cons --> (cons A ()))) ()))) ()))) V501 V502))))
(defun shen.type-signature-of-it (V507 V508 V509) (do (shen.incinfs) (unify! V507 (cons --> (cons string ())) V508 V509)))
(defun shen.type-signature-of-implementation (V514 V515 V516) (do (shen.incinfs) (unify! V514 (cons --> (cons string ())) V515 V516)))
(defun shen.type-signature-of-include (V521 V522 V523) (do (shen.incinfs) (unify! V521 (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ()))) V522 V523)))
(defun shen.type-signature-of-include-all-but (V528 V529 V530) (do (shen.incinfs) (unify! V528 (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ()))) V529 V530)))
(defun shen.type-signature-of-inferences (V535 V536 V537) (do (shen.incinfs) (unify! V535 (cons --> (cons number ())) V536 V537)))
(defun shen.type-signature-of-shen.insert (V542 V543 V544) (let A (shen.newpv V543) (do (shen.incinfs) (unify! V542 (cons A (cons --> (cons (cons string (cons --> (cons string ()))) ()))) V543 V544))))
(defun shen.type-signature-of-integer? (V549 V550 V551) (let A (shen.newpv V550) (do (shen.incinfs) (unify! V549 (cons A (cons --> (cons boolean ()))) V550 V551))))
(defun shen.type-signature-of-internal (V556 V557 V558) (do (shen.incinfs) (unify! V556 (cons symbol (cons --> (cons (cons list (cons symbol ())) ()))) V557 V558)))
(defun shen.type-signature-of-intersection (V563 V564 V565) (let A (shen.newpv V564) (do (shen.incinfs) (unify! V563 (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ()))) V564 V565))))
(defun shen.type-signature-of-kill (V570 V571 V572) (let A (shen.newpv V571) (do (shen.incinfs) (unify! V570 (cons --> (cons A ())) V571 V572))))
(defun shen.type-signature-of-language (V577 V578 V579) (do (shen.incinfs) (unify! V577 (cons --> (cons string ())) V578 V579)))
(defun shen.type-signature-of-length (V584 V585 V586) (let A (shen.newpv V585) (do (shen.incinfs) (unify! V584 (cons (cons list (cons A ())) (cons --> (cons number ()))) V585 V586))))
(defun shen.type-signature-of-limit (V591 V592 V593) (let A (shen.newpv V592) (do (shen.incinfs) (unify! V591 (cons (cons vector (cons A ())) (cons --> (cons number ()))) V592 V593))))
(defun shen.type-signature-of-load (V598 V599 V600) (do (shen.incinfs) (unify! V598 (cons string (cons --> (cons symbol ()))) V599 V600)))
(defun shen.type-signature-of-map (V605 V606 V607) (let A (shen.newpv V606) (let B (shen.newpv V606) (do (shen.incinfs) (unify! V605 (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons B ())) ()))) ()))) V606 V607)))))
(defun shen.type-signature-of-mapcan (V612 V613 V614) (let A (shen.newpv V613) (let B (shen.newpv V613) (do (shen.incinfs) (unify! V612 (cons (cons A (cons --> (cons (cons list (cons B ())) ()))) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons B ())) ()))) ()))) V613 V614)))))
(defun shen.type-signature-of-maxinferences (V619 V620 V621) (do (shen.incinfs) (unify! V619 (cons number (cons --> (cons number ()))) V620 V621)))
(defun shen.type-signature-of-n->string (V626 V627 V628) (do (shen.incinfs) (unify! V626 (cons number (cons --> (cons string ()))) V627 V628)))
(defun shen.type-signature-of-nl (V633 V634 V635) (do (shen.incinfs) (unify! V633 (cons number (cons --> (cons number ()))) V634 V635)))
(defun shen.type-signature-of-not (V640 V641 V642) (do (shen.incinfs) (unify! V640 (cons boolean (cons --> (cons boolean ()))) V641 V642)))
(defun shen.type-signature-of-nth (V647 V648 V649) (let A (shen.newpv V648) (do (shen.incinfs) (unify! V647 (cons number (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons A ()))) ()))) V648 V649))))
(defun shen.type-signature-of-number? (V654 V655 V656) (let A (shen.newpv V655) (do (shen.incinfs) (unify! V654 (cons A (cons --> (cons boolean ()))) V655 V656))))
(defun shen.type-signature-of-occurrences (V661 V662 V663) (let A (shen.newpv V662) (let B (shen.newpv V662) (do (shen.incinfs) (unify! V661 (cons A (cons --> (cons (cons B (cons --> (cons number ()))) ()))) V662 V663)))))
(defun shen.type-signature-of-occurs-check (V668 V669 V670) (do (shen.incinfs) (unify! V668 (cons symbol (cons --> (cons boolean ()))) V669 V670)))
(defun shen.type-signature-of-optimise (V675 V676 V677) (do (shen.incinfs) (unify! V675 (cons symbol (cons --> (cons boolean ()))) V676 V677)))
(defun shen.type-signature-of-or (V682 V683 V684) (do (shen.incinfs) (unify! V682 (cons boolean (cons --> (cons (cons boolean (cons --> (cons boolean ()))) ()))) V683 V684)))
(defun shen.type-signature-of-os (V689 V690 V691) (do (shen.incinfs) (unify! V689 (cons --> (cons string ())) V690 V691)))
(defun shen.type-signature-of-package? (V696 V697 V698) (do (shen.incinfs) (unify! V696 (cons symbol (cons --> (cons boolean ()))) V697 V698)))
(defun shen.type-signature-of-port (V703 V704 V705) (do (shen.incinfs) (unify! V703 (cons --> (cons string ())) V704 V705)))
(defun shen.type-signature-of-porters (V710 V711 V712) (do (shen.incinfs) (unify! V710 (cons --> (cons string ())) V711 V712)))
(defun shen.type-signature-of-pos (V717 V718 V719) (do (shen.incinfs) (unify! V717 (cons string (cons --> (cons (cons number (cons --> (cons string ()))) ()))) V718 V719)))
(defun shen.type-signature-of-pr (V724 V725 V726) (do (shen.incinfs) (unify! V724 (cons string (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons string ()))) ()))) V725 V726)))
(defun shen.type-signature-of-print (V731 V732 V733) (let A (shen.newpv V732) (do (shen.incinfs) (unify! V731 (cons A (cons --> (cons A ()))) V732 V733))))
(defun shen.type-signature-of-profile (V738 V739 V740) (let A (shen.newpv V739) (let B (shen.newpv V739) (do (shen.incinfs) (unify! V738 (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ()))) V739 V740)))))
(defun shen.type-signature-of-preclude (V745 V746 V747) (do (shen.incinfs) (unify! V745 (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ()))) V746 V747)))
(defun shen.type-signature-of-shen.proc-nl (V752 V753 V754) (do (shen.incinfs) (unify! V752 (cons string (cons --> (cons string ()))) V753 V754)))
(defun shen.type-signature-of-profile-results (V759 V760 V761) (let A (shen.newpv V760) (let B (shen.newpv V760) (do (shen.incinfs) (unify! V759 (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons (cons A (cons --> (cons B ()))) (cons * (cons number ()))) ()))) V760 V761)))))
(defun shen.type-signature-of-protect (V766 V767 V768) (do (shen.incinfs) (unify! V766 (cons symbol (cons --> (cons symbol ()))) V767 V768)))
(defun shen.type-signature-of-preclude-all-but (V773 V774 V775) (do (shen.incinfs) (unify! V773 (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ()))) V774 V775)))
(defun shen.type-signature-of-shen.prhush (V780 V781 V782) (do (shen.incinfs) (unify! V780 (cons string (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons string ()))) ()))) V781 V782)))
(defun shen.type-signature-of-ps (V787 V788 V789) (do (shen.incinfs) (unify! V787 (cons symbol (cons --> (cons (cons list (cons unit ())) ()))) V788 V789)))
(defun shen.type-signature-of-read (V794 V795 V796) (do (shen.incinfs) (unify! V794 (cons (cons stream (cons in ())) (cons --> (cons unit ()))) V795 V796)))
(defun shen.type-signature-of-read-byte (V801 V802 V803) (do (shen.incinfs) (unify! V801 (cons (cons stream (cons in ())) (cons --> (cons number ()))) V802 V803)))
(defun shen.type-signature-of-read-file-as-bytelist (V808 V809 V810) (do (shen.incinfs) (unify! V808 (cons string (cons --> (cons (cons list (cons number ())) ()))) V809 V810)))
(defun shen.type-signature-of-read-file-as-string (V815 V816 V817) (do (shen.incinfs) (unify! V815 (cons string (cons --> (cons string ()))) V816 V817)))
(defun shen.type-signature-of-read-file (V822 V823 V824) (do (shen.incinfs) (unify! V822 (cons string (cons --> (cons (cons list (cons unit ())) ()))) V823 V824)))
(defun shen.type-signature-of-read-from-string (V829 V830 V831) (do (shen.incinfs) (unify! V829 (cons string (cons --> (cons (cons list (cons unit ())) ()))) V830 V831)))
(defun shen.type-signature-of-release (V836 V837 V838) (do (shen.incinfs) (unify! V836 (cons --> (cons string ())) V837 V838)))
(defun shen.type-signature-of-remove (V843 V844 V845) (let A (shen.newpv V844) (do (shen.incinfs) (unify! V843 (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ()))) V844 V845))))
(defun shen.type-signature-of-reverse (V850 V851 V852) (let A (shen.newpv V851) (do (shen.incinfs) (unify! V850 (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) V851 V852))))
(defun shen.type-signature-of-simple-error (V857 V858 V859) (let A (shen.newpv V858) (do (shen.incinfs) (unify! V857 (cons string (cons --> (cons A ()))) V858 V859))))
(defun shen.type-signature-of-snd (V864 V865 V866) (let A (shen.newpv V865) (let B (shen.newpv V865) (do (shen.incinfs) (unify! V864 (cons (cons A (cons * (cons B ()))) (cons --> (cons B ()))) V865 V866)))))
(defun shen.type-signature-of-specialise (V871 V872 V873) (do (shen.incinfs) (unify! V871 (cons symbol (cons --> (cons symbol ()))) V872 V873)))
(defun shen.type-signature-of-spy (V878 V879 V880) (do (shen.incinfs) (unify! V878 (cons symbol (cons --> (cons boolean ()))) V879 V880)))
(defun shen.type-signature-of-step (V885 V886 V887) (do (shen.incinfs) (unify! V885 (cons symbol (cons --> (cons boolean ()))) V886 V887)))
(defun shen.type-signature-of-stinput (V892 V893 V894) (do (shen.incinfs) (unify! V892 (cons --> (cons (cons stream (cons in ())) ())) V893 V894)))
(defun shen.type-signature-of-stoutput (V899 V900 V901) (do (shen.incinfs) (unify! V899 (cons --> (cons (cons stream (cons out ())) ())) V900 V901)))
(defun shen.type-signature-of-string? (V906 V907 V908) (let A (shen.newpv V907) (do (shen.incinfs) (unify! V906 (cons A (cons --> (cons boolean ()))) V907 V908))))
(defun shen.type-signature-of-str (V913 V914 V915) (let A (shen.newpv V914) (do (shen.incinfs) (unify! V913 (cons A (cons --> (cons string ()))) V914 V915))))
(defun shen.type-signature-of-string->n (V920 V921 V922) (do (shen.incinfs) (unify! V920 (cons string (cons --> (cons number ()))) V921 V922)))
(defun shen.type-signature-of-string->symbol (V927 V928 V929) (do (shen.incinfs) (unify! V927 (cons string (cons --> (cons symbol ()))) V928 V929)))
(defun shen.type-signature-of-sum (V934 V935 V936) (do (shen.incinfs) (unify! V934 (cons (cons list (cons number ())) (cons --> (cons number ()))) V935 V936)))
(defun shen.type-signature-of-symbol? (V941 V942 V943) (let A (shen.newpv V942) (do (shen.incinfs) (unify! V941 (cons A (cons --> (cons boolean ()))) V942 V943))))
(defun shen.type-signature-of-systemf (V948 V949 V950) (do (shen.incinfs) (unify! V948 (cons symbol (cons --> (cons symbol ()))) V949 V950)))
(defun shen.type-signature-of-tail (V955 V956 V957) (let A (shen.newpv V956) (do (shen.incinfs) (unify! V955 (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) V956 V957))))
(defun shen.type-signature-of-tlstr (V962 V963 V964) (do (shen.incinfs) (unify! V962 (cons string (cons --> (cons string ()))) V963 V964)))
(defun shen.type-signature-of-tlv (V969 V970 V971) (let A (shen.newpv V970) (do (shen.incinfs) (unify! V969 (cons (cons vector (cons A ())) (cons --> (cons (cons vector (cons A ())) ()))) V970 V971))))
(defun shen.type-signature-of-tc (V976 V977 V978) (do (shen.incinfs) (unify! V976 (cons symbol (cons --> (cons boolean ()))) V977 V978)))
(defun shen.type-signature-of-tc? (V983 V984 V985) (do (shen.incinfs) (unify! V983 (cons --> (cons boolean ())) V984 V985)))
(defun shen.type-signature-of-thaw (V990 V991 V992) (let A (shen.newpv V991) (do (shen.incinfs) (unify! V990 (cons (cons lazy (cons A ())) (cons --> (cons A ()))) V991 V992))))
(defun shen.type-signature-of-track (V997 V998 V999) (do (shen.incinfs) (unify! V997 (cons symbol (cons --> (cons symbol ()))) V998 V999)))
(defun shen.type-signature-of-trap-error (V1004 V1005 V1006) (let A (shen.newpv V1005) (do (shen.incinfs) (unify! V1004 (cons A (cons --> (cons (cons (cons exception (cons --> (cons A ()))) (cons --> (cons A ()))) ()))) V1005 V1006))))
(defun shen.type-signature-of-tuple? (V1011 V1012 V1013) (let A (shen.newpv V1012) (do (shen.incinfs) (unify! V1011 (cons A (cons --> (cons boolean ()))) V1012 V1013))))
(defun shen.type-signature-of-undefmacro (V1018 V1019 V1020) (do (shen.incinfs) (unify! V1018 (cons symbol (cons --> (cons symbol ()))) V1019 V1020)))
(defun shen.type-signature-of-union (V1025 V1026 V1027) (let A (shen.newpv V1026) (do (shen.incinfs) (unify! V1025 (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ()))) V1026 V1027))))
(defun shen.type-signature-of-unprofile (V1032 V1033 V1034) (let A (shen.newpv V1033) (let B (shen.newpv V1033) (do (shen.incinfs) (unify! V1032 (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ()))) V1033 V1034)))))
(defun shen.type-signature-of-untrack (V1039 V1040 V1041) (do (shen.incinfs) (unify! V1039 (cons symbol (cons --> (cons symbol ()))) V1040 V1041)))
(defun shen.type-signature-of-unspecialise (V1046 V1047 V1048) (do (shen.incinfs) (unify! V1046 (cons symbol (cons --> (cons symbol ()))) V1047 V1048)))
(defun shen.type-signature-of-variable? (V1053 V1054 V1055) (let A (shen.newpv V1054) (do (shen.incinfs) (unify! V1053 (cons A (cons --> (cons boolean ()))) V1054 V1055))))
(defun shen.type-signature-of-vector? (V1060 V1061 V1062) (let A (shen.newpv V1061) (do (shen.incinfs) (unify! V1060 (cons A (cons --> (cons boolean ()))) V1061 V1062))))
(defun shen.type-signature-of-version (V1067 V1068 V1069) (do (shen.incinfs) (unify! V1067 (cons --> (cons string ())) V1068 V1069)))
(defun shen.type-signature-of-write-to-file (V1074 V1075 V1076) (let A (shen.newpv V1075) (do (shen.incinfs) (unify! V1074 (cons string (cons --> (cons (cons A (cons --> (cons A ()))) ()))) V1075 V1076))))
(defun shen.type-signature-of-write-byte (V1081 V1082 V1083) (do (shen.incinfs) (unify! V1081 (cons number (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons number ()))) ()))) V1082 V1083)))
(defun shen.type-signature-of-y-or-n? (V1088 V1089 V1090) (do (shen.incinfs) (unify! V1088 (cons string (cons --> (cons boolean ()))) V1089 V1090)))
(defun shen.type-signature-of-> (V1095 V1096 V1097) (do (shen.incinfs) (unify! V1095 (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ()))) V1096 V1097)))
(defun shen.type-signature-of-< (V1102 V1103 V1104) (do (shen.incinfs) (unify! V1102 (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ()))) V1103 V1104)))
(defun shen.type-signature-of->= (V1109 V1110 V1111) (do (shen.incinfs) (unify! V1109 (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ()))) V1110 V1111)))
(defun shen.type-signature-of-<= (V1116 V1117 V1118) (do (shen.incinfs) (unify! V1116 (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ()))) V1117 V1118)))
(defun shen.type-signature-of-= (V1123 V1124 V1125) (let A (shen.newpv V1124) (do (shen.incinfs) (unify! V1123 (cons A (cons --> (cons (cons A (cons --> (cons boolean ()))) ()))) V1124 V1125))))
(defun shen.type-signature-of-+ (V1130 V1131 V1132) (do (shen.incinfs) (unify! V1130 (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ()))) V1131 V1132)))
(defun shen.type-signature-of-/ (V1137 V1138 V1139) (do (shen.incinfs) (unify! V1137 (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ()))) V1138 V1139)))
(defun shen.type-signature-of-- (V1144 V1145 V1146) (do (shen.incinfs) (unify! V1144 (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ()))) V1145 V1146)))
(defun shen.type-signature-of-* (V1151 V1152 V1153) (do (shen.incinfs) (unify! V1151 (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ()))) V1152 V1153)))
(defun shen.type-signature-of-== (V1158 V1159 V1160) (let A (shen.newpv V1159) (let B (shen.newpv V1159) (do (shen.incinfs) (unify! V1158 (cons A (cons --> (cons (cons B (cons --> (cons boolean ()))) ()))) V1159 V1160)))))
(set shen.*history* ())
(set shen.*step* false)
(set shen.*installing-kl* false)
(set shen.*tc* false)
(set *property-vector* (vector-builder 20000 shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons * (cons arity ())) 2) ()) (cons (cons (cons + (cons arity ())) 2) ()) shen.fail! (cons (cons (cons - (cons arity ())) 2) ()) shen.fail! (cons (cons (cons / (cons arity ())) 2) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons < (cons arity ())) 2) ()) (cons (cons (cons = (cons arity ())) 2) ()) (cons (cons (cons > (cons arity ())) 2) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons <= (cons arity ())) 2) ()) (cons (cons (cons == (cons arity ())) 2) ()) (cons (cons (cons >= (cons arity ())) 2) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons @p (cons arity ())) 2) ()) shen.fail! shen.fail! (cons (cons (cons @s (cons arity ())) 2) ()) shen.fail! shen.fail! (cons (cons (cons @v (cons arity ())) 2) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons cd (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons hd (cons arity ())) 1) ()) shen.fail! shen.fail! (cons (cons (cons if (cons arity ())) 3) ()) shen.fail! (cons (cons (cons cn (cons arity ())) 2) ()) shen.fail! (cons (cons (cons do (cons arity ())) 2) ()) shen.fail! shen.fail! shen.fail! (cons (cons (cons tc (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons it (cons arity ())) 0) ()) shen.fail! (cons (cons (cons <e> (cons arity ())) 1) ()) (cons (cons (cons tl (cons arity ())) 1) ()) (cons (cons (cons or (cons arity ())) 2) ()) (cons (cons (cons os (cons arity ())) 0) (cons (cons (cons pr (cons arity ())) 2) ())) (cons (cons (cons ps (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons tc? (cons arity ())) 0) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons and (cons arity ())) 2) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons map (cons arity ())) 2) ()) shen.fail! (cons (cons (cons get (cons arity ())) 3) ()) shen.fail! (cons (cons (cons hdv (cons arity ())) 1) ()) shen.fail! shen.fail! (cons (cons (cons snd (cons arity ())) 1) ()) shen.fail! (cons (cons (cons fix (cons arity ())) 2) ()) shen.fail! shen.fail! (cons (cons (cons nth (cons arity ())) 2) ()) shen.fail! (cons (cons (cons set (cons arity ())) 2) ()) (cons (cons (cons fst (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! (cons (cons (cons not (cons arity ())) 1) ()) (cons (cons (cons pos (cons arity ())) 2) ()) shen.fail! shen.fail! (cons (cons (cons sum (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! (cons (cons (cons put (cons arity ())) 4) ()) shen.fail! shen.fail! (cons (cons (cons spy (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons head (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons fail (cons arity ())) 0) (cons (cons (cons read (cons arity ())) 1) ())) shen.fail! shen.fail! shen.fail! (cons (cons (cons load (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons eval (cons arity ())) 1) ()) shen.fail! (cons (cons (cons tail (cons arity ())) 1) ()) shen.fail! (cons (cons (cons kill (cons arity ())) 0) ()) shen.fail! (cons (cons (cons shen (cons shen.external-symbols ())) (cons ! (cons } (cons { (cons --> (cons <-- (cons && (cons : (cons ; (cons :- (cons := (cons _ (cons *language* (cons *implementation* (cons *stinput* (cons *stoutput* (cons *home-directory* (cons *version* (cons *maximum-print-sequence-size* (cons *macros* (cons *os* (cons *release* (cons *property-vector* (cons @v (cons @p (cons @s (cons *port* (cons *porters* (cons *hush* (cons <- (cons -> (cons <e> (cons == (cons = (cons >= (cons > (cons /. (cons =! (cons $ (cons - (cons / (cons * (cons + (cons <= (cons < (cons >> (cons (vector-builder 0) (cons y-or-n? (cons write-to-file (cons write-byte (cons where (cons when (cons warn (cons version (cons verified (cons variable? (cons value (cons vector-> (cons <-vector (cons vector (cons vector? (cons unspecialise (cons untrack (cons unit (cons shen.unix (cons union (cons unify (cons unify! (cons unput (cons unprofile (cons undefmacro (cons return (cons type (cons tuple? (cons true (cons trap-error (cons track (cons time (cons thaw (cons tc? (cons tc (cons tl (cons tlstr (cons tlv (cons tail (cons systemf (cons synonyms (cons symbol (cons symbol? (cons string->symbol (cons sum (cons subst (cons string? (cons string->n (cons stream (cons string (cons stinput (cons stoutput (cons step (cons spy (cons specialise (cons snd (cons simple-error (cons set (cons save (cons str (cons run (cons reverse (cons remove (cons release (cons read (cons receive (cons read-file (cons read-file-as-bytelist (cons read-file-as-string (cons read-byte (cons read-from-string (cons package? (cons put (cons preclude (cons preclude-all-but (cons ps (cons prolog? (cons protect (cons profile-results (cons profile (cons print (cons pr (cons pos (cons porters (cons port (cons package (cons output (cons out (cons os (cons or (cons optimise (cons open (cons occurrences (cons occurs-check (cons n->string (cons number? (cons number (cons null (cons nth (cons not (cons nl (cons mode (cons macroexpand (cons maxinferences (cons mapcan (cons map (cons make-string (cons load (cons loaded (cons list (cons lineread (cons limit (cons length (cons let (cons lazy (cons lambda (cons language (cons kill (cons is (cons intersection (cons inferences (cons intern (cons integer? (cons input (cons input+ (cons include (cons include-all-but (cons it (cons in (cons internal (cons implementation (cons if (cons identical (cons head (cons hd (cons hdv (cons hdstr (cons hash (cons get (cons get-time (cons gensym (cons function (cons fst (cons freeze (cons fix (cons file (cons fail (cons fail-if (cons fwhen (cons findall (cons false (cons enable-type-theory (cons explode (cons external (cons exception (cons eval-kl (cons eval (cons error-to-string (cons error (cons empty? (cons element? (cons do (cons difference (cons destroy (cons defun (cons define (cons defmacro (cons defcc (cons defprolog (cons declare (cons datatype (cons cut (cons cn (cons cons? (cons cons (cons cond (cons concat (cons compile (cons cd (cons cases (cons call (cons close (cons bind (cons bound? (cons boolean? (cons boolean (cons bar! (cons assoc (cons arity (cons append (cons and (cons adjoin (cons <-address (cons address-> (cons absvector? (cons absvector (cons abort ()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ()) shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons cons (cons arity ())) 2) ()) (cons (cons (cons thaw (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons step (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons type (cons arity ())) 2) ()) shen.fail! shen.fail! (cons (cons (cons port (cons arity ())) 0) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons cons? (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons track (cons arity ())) 1) ()) shen.fail! shen.fail! (cons (cons (cons abort (cons arity ())) 0) ()) (cons (cons (cons assoc (cons arity ())) 2) ()) shen.fail! shen.fail! shen.fail! (cons (cons (cons value (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons hdstr (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! (cons (cons (cons arity (cons arity ())) 1) (cons (cons (cons union (cons arity ())) 2) ())) shen.fail! (cons (cons (cons unify (cons arity ())) 4) ()) shen.fail! (cons (cons (cons print (cons arity ())) 1) ()) shen.fail! shen.fail! (cons (cons (cons input (cons arity ())) 1) ()) (cons (cons (cons subst (cons arity ())) 3) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons tlstr (cons arity ())) 1) ()) shen.fail! shen.fail! (cons (cons (cons unput (cons arity ())) 3) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons unify! (cons arity ())) 4) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons input+ (cons arity ())) 2) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons y-or-n? (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons tuple? (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons empty? (cons arity ())) 1) ()) shen.fail! (cons (cons (cons mapcan (cons arity ())) 2) ()) shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons adjoin (cons arity ())) 2) ()) shen.fail! shen.fail! (cons (cons (cons append (cons arity ())) 2) (cons (cons (cons concat (cons arity ())) 2) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons freeze (cons arity ())) 1) ()) (cons (cons (cons length (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons remove (cons arity ())) 2) ()) shen.fail! (cons (cons (cons intern (cons arity ())) 1) ()) shen.fail! shen.fail! (cons (cons (cons gensym (cons arity ())) 1) (cons (cons (cons vector (cons arity ())) 1) ())) shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons fail-if (cons arity ())) 2) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons return (cons arity ())) 3) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons eval-kl (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons number? (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! (cons (cons (cons package (cons arity ())) 3) ()) shen.fail! shen.fail! shen.fail! (cons (cons (cons declare (cons arity ())) 2) ()) shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons symbol? (cons arity ())) 1) ()) (cons (cons (cons string? (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! (cons (cons (cons findall (cons arity ())) 5) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons release (cons arity ())) 0) ()) shen.fail! (cons (cons (cons receive (cons arity ())) 1) ()) (cons (cons (cons include (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons compile (cons arity ())) 3) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons explode (cons arity ())) 1) (cons (cons (cons profile (cons arity ())) 1) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons untrack (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! (cons (cons (cons <-vector (cons arity ())) 2) (cons (cons (cons reverse (cons arity ())) 1) ())) (cons (cons (cons require (cons arity ())) 3) ()) (cons (cons (cons vector-> (cons arity ())) 3) ()) shen.fail! shen.fail! (cons (cons (cons protect (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons version (cons arity ())) 0) ()) shen.fail! shen.fail! shen.fail! (cons (cons (cons destroy (cons arity ())) 1) ()) (cons (cons (cons package? (cons arity ())) 1) (cons (cons (cons systemf (cons arity ())) 1) ())) shen.fail! shen.fail! shen.fail! (cons (cons (cons porters (cons arity ())) 0) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons stinput (cons arity ())) 0) ()) shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons get-time (cons arity ())) 1) ()) shen.fail! shen.fail! (cons (cons (cons boolean? (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons element? (cons arity ())) 2) ()) shen.fail! shen.fail! shen.fail! (cons (cons (cons integer? (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons language (cons arity ())) 0) (cons (cons (cons lineread (cons arity ())) 1) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons <-address (cons arity ())) 2) ()) shen.fail! (cons (cons (cons address-> (cons arity ())) 3) ()) shen.fail! shen.fail! (cons (cons (cons preclude (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons internal (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons external (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons read-file (cons arity ())) 1) ()) (cons (cons (cons optimise (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons n->string (cons arity ())) 1) (cons (cons (cons string->n (cons arity ())) 1) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons read-byte (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons variable? (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons stoutput (cons arity ())) 0) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons identical (cons arity ())) 4) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons absvector (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons unprofile (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons absvector? (cons arity ())) 1) ()) shen.fail! shen.fail! (cons (cons (cons difference (cons arity ())) 2) ()) (cons (cons (cons write-byte (cons arity ())) 2) ()) shen.fail! (cons (cons (cons trap-error (cons arity ())) 2) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons inferences (cons arity ())) 0) (cons (cons (cons specialise (cons arity ())) 1) ())) shen.fail! (cons (cons (cons undefmacro (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons macroexpand (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons occurrences (cons arity ())) 2) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons occurs-check (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons simple-error (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons unspecialise (cons arity ())) 1) ()) shen.fail! shen.fail! (cons (cons (cons write-to-file (cons arity ())) 2) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons intersection (cons arity ())) 2) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.interror (cons arity ())) 2) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons maxinferences (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons string->symbol (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons include-all-but (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons implementation (cons arity ())) 0) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.reassemble (cons arity ())) 2) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons profile-results (cons arity ())) 1) ()) shen.fail! (cons (cons (cons preclude-all-but (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons read-from-string (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons enable-type-theory (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons read-file-as-string (cons arity ())) 1) ()) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-* (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-* (cons shen.source ())) (cons defun (cons shen.type-signature-of-* (cons (cons V1151 (cons V1152 (cons V1153 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1151 (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons number (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V1152 (cons V1153 ()))))) ()))) ()))))) ())) (cons (cons (cons shen.type-signature-of-+ (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-+ (cons shen.source ())) (cons defun (cons shen.type-signature-of-+ (cons (cons V1130 (cons V1131 (cons V1132 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1130 (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons number (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V1131 (cons V1132 ()))))) ()))) ()))))) ())) shen.fail! (cons (cons (cons shen.type-signature-of-- (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-- (cons shen.source ())) (cons defun (cons shen.type-signature-of-- (cons (cons V1144 (cons V1145 (cons V1146 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1144 (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons number (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V1145 (cons V1146 ()))))) ()))) ()))))) ())) shen.fail! (cons (cons (cons shen.type-signature-of-/ (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-/ (cons shen.source ())) (cons defun (cons shen.type-signature-of-/ (cons (cons V1137 (cons V1138 (cons V1139 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1137 (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons number (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V1138 (cons V1139 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-< (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-< (cons shen.source ())) (cons defun (cons shen.type-signature-of-< (cons (cons V1102 (cons V1103 (cons V1104 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1102 (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V1103 (cons V1104 ()))))) ()))) ()))))) ())) (cons (cons (cons shen.type-signature-of-= (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-= (cons shen.source ())) (cons defun (cons shen.type-signature-of-= (cons (cons V1123 (cons V1124 (cons V1125 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V1124 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1123 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V1124 (cons V1125 ()))))) ()))) ())))) ()))))) ())) (cons (cons (cons shen.type-signature-of-> (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-> (cons shen.source ())) (cons defun (cons shen.type-signature-of-> (cons (cons V1095 (cons V1096 (cons V1097 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1095 (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V1096 (cons V1097 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-<= (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-<= (cons shen.source ())) (cons defun (cons shen.type-signature-of-<= (cons (cons V1116 (cons V1117 (cons V1118 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1116 (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V1117 (cons V1118 ()))))) ()))) ()))))) ())) (cons (cons (cons shen.type-signature-of-== (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-== (cons shen.source ())) (cons defun (cons shen.type-signature-of-== (cons (cons V1158 (cons V1159 (cons V1160 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V1159 ())) (cons (cons let (cons B (cons (cons shen.newpv (cons V1159 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1158 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons B (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V1159 (cons V1160 ()))))) ()))) ())))) ())))) ()))))) ())) (cons (cons (cons shen.type-signature-of->= (cons arity ())) 3) (cons (cons (cons shen.type-signature-of->= (cons shen.source ())) (cons defun (cons shen.type-signature-of->= (cons (cons V1109 (cons V1110 (cons V1111 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1109 (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V1110 (cons V1111 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-cd (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-cd (cons shen.source ())) (cons defun (cons shen.type-signature-of-cd (cons (cons V283 (cons V284 (cons V285 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V283 (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) ()))) (cons V284 (cons V285 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-if (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-if (cons shen.source ())) (cons defun (cons shen.type-signature-of-if (cons (cons V500 (cons V501 (cons V502 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V501 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V500 (cons (cons cons (cons boolean (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons A (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V501 (cons V502 ()))))) ()))) ())))) ()))))) ())) shen.fail! (cons (cons (cons shen.type-signature-of-cn (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-cn (cons shen.source ())) (cons defun (cons shen.type-signature-of-cn (cons (cons V297 (cons V298 (cons V299 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V297 (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V298 (cons V299 ()))))) ()))) ()))))) ())) shen.fail! (cons (cons (cons shen.type-signature-of-do (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-do (cons shen.source ())) (cons defun (cons shen.type-signature-of-do (cons (cons V332 (cons V333 (cons V334 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V333 ())) (cons (cons let (cons B (cons (cons shen.newpv (cons V333 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V332 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons B (cons (cons cons (cons --> (cons (cons cons (cons B (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V333 (cons V334 ()))))) ()))) ())))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-tc (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-tc (cons shen.source ())) (cons defun (cons shen.type-signature-of-tc (cons (cons V976 (cons V977 (cons V978 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V976 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V977 (cons V978 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-nl (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-nl (cons shen.source ())) (cons defun (cons shen.type-signature-of-nl (cons (cons V633 (cons V634 (cons V635 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V633 (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons number (cons () ()))) ()))) ()))) (cons V634 (cons V635 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-it (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-it (cons shen.source ())) (cons defun (cons shen.type-signature-of-it (cons (cons V507 (cons V508 (cons V509 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V507 (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) (cons V508 (cons V509 ()))))) ()))) ()))))) ())) shen.fail! (cons (cons (cons shen.type-signature-of-<e> (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-<e> (cons shen.source ())) (cons defun (cons shen.type-signature-of-<e> (cons (cons V339 (cons V340 (cons V341 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V340 ())) (cons (cons let (cons B (cons (cons shen.newpv (cons V340 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V339 (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons shen.==> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons B (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons V340 (cons V341 ()))))) ()))) ())))) ())))) ()))))) ())) shen.fail! (cons (cons (cons shen.type-signature-of-or (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-or (cons shen.source ())) (cons defun (cons shen.type-signature-of-or (cons (cons V682 (cons V683 (cons V684 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V682 (cons (cons cons (cons boolean (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons boolean (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V683 (cons V684 ()))))) ()))) ()))))) ())) (cons (cons (cons shen.type-signature-of-os (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-os (cons shen.source ())) (cons defun (cons shen.type-signature-of-os (cons (cons V689 (cons V690 (cons V691 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V689 (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) (cons V690 (cons V691 ()))))) ()))) ()))))) (cons (cons (cons shen.type-signature-of-pr (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-pr (cons shen.source ())) (cons defun (cons shen.type-signature-of-pr (cons (cons V724 (cons V725 (cons V726 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V724 (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons (cons cons (cons stream (cons (cons cons (cons out (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V725 (cons V726 ()))))) ()))) ()))))) ())))) (cons (cons (cons shen.type-signature-of-ps (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-ps (cons shen.source ())) (cons defun (cons shen.type-signature-of-ps (cons (cons V787 (cons V788 (cons V789 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V787 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons unit (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons V788 (cons V789 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-tc? (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-tc? (cons shen.source ())) (cons defun (cons shen.type-signature-of-tc? (cons (cons V983 (cons V984 (cons V985 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V983 (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) (cons V984 (cons V985 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-and (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-and (cons shen.source ())) (cons defun (cons shen.type-signature-of-and (cons (cons V234 (cons V235 (cons V236 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V234 (cons (cons cons (cons boolean (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons boolean (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V235 (cons V236 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-map (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-map (cons shen.source ())) (cons defun (cons shen.type-signature-of-map (cons (cons V605 (cons V606 (cons V607 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V606 ())) (cons (cons let (cons B (cons (cons shen.newpv (cons V606 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V605 (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons B (cons () ()))) ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons B (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V606 (cons V607 ()))))) ()))) ())))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-hdv (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-hdv (cons shen.source ())) (cons defun (cons shen.type-signature-of-hdv (cons (cons V486 (cons V487 (cons V488 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V487 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V486 (cons (cons cons (cons (cons cons (cons vector (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons A (cons () ()))) ()))) ()))) (cons V487 (cons V488 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-snd (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-snd (cons shen.source ())) (cons defun (cons shen.type-signature-of-snd (cons (cons V864 (cons V865 (cons V866 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V865 ())) (cons (cons let (cons B (cons (cons shen.newpv (cons V865 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V864 (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons * (cons (cons cons (cons B (cons () ()))) ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons B (cons () ()))) ()))) ()))) (cons V865 (cons V866 ()))))) ()))) ())))) ())))) ()))))) ())) shen.fail! (cons (cons (cons shen.type-signature-of-fix (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-fix (cons shen.source ())) (cons defun (cons shen.type-signature-of-fix (cons (cons V409 (cons V410 (cons V411 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V410 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V409 (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons A (cons () ()))) ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons A (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V410 (cons V411 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-nth (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-nth (cons shen.source ())) (cons defun (cons shen.type-signature-of-nth (cons (cons V647 (cons V648 (cons V649 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V648 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V647 (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons A (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V648 (cons V649 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-fst (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-fst (cons shen.source ())) (cons defun (cons shen.type-signature-of-fst (cons (cons V423 (cons V424 (cons V425 ()))) (cons (cons let (cons B (cons (cons shen.newpv (cons V424 ())) (cons (cons let (cons A (cons (cons shen.newpv (cons V424 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V423 (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons * (cons (cons cons (cons B (cons () ()))) ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons A (cons () ()))) ()))) ()))) (cons V424 (cons V425 ()))))) ()))) ())))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-not (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-not (cons shen.source ())) (cons defun (cons shen.type-signature-of-not (cons (cons V640 (cons V641 (cons V642 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V640 (cons (cons cons (cons boolean (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V641 (cons V642 ()))))) ()))) ()))))) ())) (cons (cons (cons shen.type-signature-of-pos (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-pos (cons shen.source ())) (cons defun (cons shen.type-signature-of-pos (cons (cons V717 (cons V718 (cons V719 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V717 (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V718 (cons V719 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-sum (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-sum (cons shen.source ())) (cons defun (cons shen.type-signature-of-sum (cons (cons V934 (cons V935 (cons V936 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V934 (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons number (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons number (cons () ()))) ()))) ()))) (cons V935 (cons V936 ()))))) ()))) ()))))) ())) (cons (cons (cons shen.type-signature-of-tlv (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-tlv (cons shen.source ())) (cons defun (cons shen.type-signature-of-tlv (cons (cons V969 (cons V970 (cons V971 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V970 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V969 (cons (cons cons (cons (cons cons (cons vector (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons vector (cons (cons cons (cons A (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons V970 (cons V971 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-str (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-str (cons shen.source ())) (cons defun (cons shen.type-signature-of-str (cons (cons V913 (cons V914 (cons V915 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V914 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V913 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) ()))) (cons V914 (cons V915 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-spy (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-spy (cons shen.source ())) (cons defun (cons shen.type-signature-of-spy (cons (cons V878 (cons V879 (cons V880 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V878 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V879 (cons V880 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-head (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-head (cons shen.source ())) (cons defun (cons shen.type-signature-of-head (cons (cons V479 (cons V480 (cons V481 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V480 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V479 (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons A (cons () ()))) ()))) ()))) (cons V480 (cons V481 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-fail (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-fail (cons shen.source ())) (cons defun (cons shen.type-signature-of-fail (cons (cons V395 (cons V396 (cons V397 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V395 (cons (cons cons (cons --> (cons (cons cons (cons symbol (cons () ()))) ()))) (cons V396 (cons V397 ()))))) ()))) ()))))) (cons (cons (cons shen.type-signature-of-read (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-read (cons shen.source ())) (cons defun (cons shen.type-signature-of-read (cons (cons V794 (cons V795 (cons V796 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V794 (cons (cons cons (cons (cons cons (cons stream (cons (cons cons (cons in (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons unit (cons () ()))) ()))) ()))) (cons V795 (cons V796 ()))))) ()))) ()))))) ())))) shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-load (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-load (cons shen.source ())) (cons defun (cons shen.type-signature-of-load (cons (cons V598 (cons V599 (cons V600 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V598 (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons symbol (cons () ()))) ()))) ()))) (cons V599 (cons V600 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-hash (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-hash (cons shen.source ())) (cons defun (cons shen.type-signature-of-hash (cons (cons V472 (cons V473 (cons V474 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V473 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V472 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons number (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V473 (cons V474 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-tail (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-tail (cons shen.source ())) (cons defun (cons shen.type-signature-of-tail (cons (cons V955 (cons V956 (cons V957 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V956 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V955 (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons V956 (cons V957 ()))))) ()))) ())))) ()))))) ())) shen.fail! (cons (cons (cons shen.type-signature-of-kill (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-kill (cons shen.source ())) (cons defun (cons shen.type-signature-of-kill (cons (cons V570 (cons V571 (cons V572 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V571 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V570 (cons (cons cons (cons --> (cons (cons cons (cons A (cons () ()))) ()))) (cons V571 (cons V572 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-thaw (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-thaw (cons shen.source ())) (cons defun (cons shen.type-signature-of-thaw (cons (cons V990 (cons V991 (cons V992 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V991 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V990 (cons (cons cons (cons (cons cons (cons lazy (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons A (cons () ()))) ()))) ()))) (cons V991 (cons V992 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-step (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-step (cons shen.source ())) (cons defun (cons shen.type-signature-of-step (cons (cons V885 (cons V886 (cons V887 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V885 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V886 (cons V887 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-port (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-port (cons shen.source ())) (cons defun (cons shen.type-signature-of-port (cons (cons V703 (cons V704 (cons V705 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V703 (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) (cons V704 (cons V705 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-cons? (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-cons? (cons shen.source ())) (cons defun (cons shen.type-signature-of-cons? (cons (cons V311 (cons V312 (cons V313 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V312 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V311 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V312 (cons V313 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-track (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-track (cons shen.source ())) (cons defun (cons shen.type-signature-of-track (cons (cons V997 (cons V998 (cons V999 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V997 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons symbol (cons () ()))) ()))) ()))) (cons V998 (cons V999 ()))))) ()))) ()))))) ())) (cons (cons (cons shen.type-signature-of-close (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-close (cons shen.source ())) (cons defun (cons shen.type-signature-of-close (cons (cons V290 (cons V291 (cons V292 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V291 ())) (cons (cons let (cons B (cons (cons shen.newpv (cons V291 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V290 (cons (cons cons (cons (cons cons (cons stream (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons B (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons V291 (cons V292 ()))))) ()))) ())))) ())))) ()))))) ())) shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-assoc (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-assoc (cons shen.source ())) (cons defun (cons shen.type-signature-of-assoc (cons (cons V262 (cons V263 (cons V264 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V263 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V262 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V263 (cons V264 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-limit (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-limit (cons shen.source ())) (cons defun (cons shen.type-signature-of-limit (cons (cons V591 (cons V592 (cons V593 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V592 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V591 (cons (cons cons (cons (cons cons (cons vector (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons number (cons () ()))) ()))) ()))) (cons V592 (cons V593 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-hdstr (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-hdstr (cons shen.source ())) (cons defun (cons shen.type-signature-of-hdstr (cons (cons V493 (cons V494 (cons V495 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V493 (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) ()))) (cons V494 (cons V495 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-arity (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-arity (cons shen.source ())) (cons defun (cons shen.type-signature-of-arity (cons (cons V255 (cons V256 (cons V257 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V256 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V255 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons number (cons () ()))) ()))) ()))) (cons V256 (cons V257 ()))))) ()))) ())))) ()))))) (cons (cons (cons shen.type-signature-of-union (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-union (cons shen.source ())) (cons defun (cons shen.type-signature-of-union (cons (cons V1025 (cons V1026 (cons V1027 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V1026 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1025 (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V1026 (cons V1027 ()))))) ()))) ())))) ()))))) ())))) shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-print (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-print (cons shen.source ())) (cons defun (cons shen.type-signature-of-print (cons (cons V731 (cons V732 (cons V733 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V732 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V731 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons A (cons () ()))) ()))) ()))) (cons V732 (cons V733 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-tlstr (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-tlstr (cons shen.source ())) (cons defun (cons shen.type-signature-of-tlstr (cons (cons V962 (cons V963 (cons V964 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V962 (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) ()))) (cons V963 (cons V964 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-bound? (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-bound? (cons shen.source ())) (cons defun (cons shen.type-signature-of-bound? (cons (cons V276 (cons V277 (cons V278 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V276 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V277 (cons V278 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-y-or-n? (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-y-or-n? (cons shen.source ())) (cons defun (cons shen.type-signature-of-y-or-n? (cons (cons V1088 (cons V1089 (cons V1090 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1088 (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V1089 (cons V1090 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-tuple? (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-tuple? (cons shen.source ())) (cons defun (cons shen.type-signature-of-tuple? (cons (cons V1011 (cons V1012 (cons V1013 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V1012 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1011 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V1012 (cons V1013 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-empty? (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-empty? (cons shen.source ())) (cons defun (cons shen.type-signature-of-empty? (cons (cons V360 (cons V361 (cons V362 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V361 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V360 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V361 (cons V362 ()))))) ()))) ())))) ()))))) ())) shen.fail! (cons (cons (cons shen.type-signature-of-mapcan (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-mapcan (cons shen.source ())) (cons defun (cons shen.type-signature-of-mapcan (cons (cons V612 (cons V613 (cons V614 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V613 ())) (cons (cons let (cons B (cons (cons shen.newpv (cons V613 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V612 (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons B (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons B (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V613 (cons V614 ()))))) ()))) ())))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-adjoin (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-adjoin (cons shen.source ())) (cons defun (cons shen.type-signature-of-adjoin (cons (cons V227 (cons V228 (cons V229 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V228 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V227 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V228 (cons V229 ()))))) ()))) ())))) ()))))) ())) shen.fail! (cons (cons (cons shen.type-signature-of-shen.<!> (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-shen.<!> (cons shen.source ())) (cons defun (cons shen.type-signature-of-shen.<!> (cons (cons V346 (cons V347 (cons V348 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V347 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V346 (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons shen.==> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons V347 (cons V348 ()))))) ()))) ())))) ()))))) ())) (cons (cons (cons shen.type-signature-of-append (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-append (cons shen.source ())) (cons defun (cons shen.type-signature-of-append (cons (cons V248 (cons V249 (cons V250 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V249 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V248 (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V249 (cons V250 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-freeze (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-freeze (cons shen.source ())) (cons defun (cons shen.type-signature-of-freeze (cons (cons V416 (cons V417 (cons V418 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V417 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V416 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons lazy (cons (cons cons (cons A (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons V417 (cons V418 ()))))) ()))) ())))) ()))))) ())) (cons (cons (cons shen.type-signature-of-length (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-length (cons shen.source ())) (cons defun (cons shen.type-signature-of-length (cons (cons V584 (cons V585 (cons V586 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V585 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V584 (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons number (cons () ()))) ()))) ()))) (cons V585 (cons V586 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-remove (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-remove (cons shen.source ())) (cons defun (cons shen.type-signature-of-remove (cons (cons V843 (cons V844 (cons V845 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V844 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V843 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V844 (cons V845 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-gensym (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-gensym (cons shen.source ())) (cons defun (cons shen.type-signature-of-gensym (cons (cons V437 (cons V438 (cons V439 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V437 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons symbol (cons () ()))) ()))) ()))) (cons V438 (cons V439 ()))))) ()))) ()))))) (cons (cons (cons shen.type-signature-of-vector (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-vector (cons shen.source ())) (cons defun (cons shen.type-signature-of-vector (cons (cons V458 (cons V459 (cons V460 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V459 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V458 (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons vector (cons (cons cons (cons A (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons V459 (cons V460 ()))))) ()))) ())))) ()))))) ())))) shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-fail-if (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-fail-if (cons shen.source ())) (cons defun (cons shen.type-signature-of-fail-if (cons (cons V402 (cons V403 (cons V404 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V402 (cons (cons cons (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons symbol (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V403 (cons V404 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-number? (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-number? (cons shen.source ())) (cons defun (cons shen.type-signature-of-number? (cons (cons V654 (cons V655 (cons V656 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V655 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V654 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V655 (cons V656 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-vector? (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-vector? (cons shen.source ())) (cons defun (cons shen.type-signature-of-vector? (cons (cons V1060 (cons V1061 (cons V1062 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V1061 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1060 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V1061 (cons V1062 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-symbol? (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-symbol? (cons shen.source ())) (cons defun (cons shen.type-signature-of-symbol? (cons (cons V941 (cons V942 (cons V943 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V942 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V941 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V942 (cons V943 ()))))) ()))) ())))) ()))))) ())) (cons (cons (cons shen.type-signature-of-string? (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-string? (cons shen.source ())) (cons defun (cons shen.type-signature-of-string? (cons (cons V906 (cons V907 (cons V908 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V907 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V906 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V907 (cons V908 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-release (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-release (cons shen.source ())) (cons defun (cons shen.type-signature-of-release (cons (cons V836 (cons V837 (cons V838 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V836 (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) (cons V837 (cons V838 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-include (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-include (cons shen.source ())) (cons defun (cons shen.type-signature-of-include (cons (cons V521 (cons V522 (cons V523 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V521 (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons symbol (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons symbol (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons V522 (cons V523 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-compile (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-compile (cons shen.source ())) (cons defun (cons shen.type-signature-of-compile (cons (cons V304 (cons V305 (cons V306 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V305 ())) (cons (cons let (cons B (cons (cons shen.newpv (cons V305 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V304 (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons shen.==> (cons (cons cons (cons B (cons () ()))) ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons B (cons () ()))) ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons B (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V305 (cons V306 ()))))) ()))) ())))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-explode (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-explode (cons shen.source ())) (cons defun (cons shen.type-signature-of-explode (cons (cons V388 (cons V389 (cons V390 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V389 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V388 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons string (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons V389 (cons V390 ()))))) ()))) ())))) ()))))) (cons (cons (cons shen.type-signature-of-profile (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-profile (cons shen.source ())) (cons defun (cons shen.type-signature-of-profile (cons (cons V738 (cons V739 (cons V740 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V739 ())) (cons (cons let (cons B (cons (cons shen.newpv (cons V739 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V738 (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons B (cons () ()))) ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons B (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V739 (cons V740 ()))))) ()))) ())))) ())))) ()))))) ())))) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-untrack (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-untrack (cons shen.source ())) (cons defun (cons shen.type-signature-of-untrack (cons (cons V1039 (cons V1040 (cons V1041 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1039 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons symbol (cons () ()))) ()))) ()))) (cons V1040 (cons V1041 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-<-vector (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-<-vector (cons shen.source ())) (cons defun (cons shen.type-signature-of-<-vector (cons (cons V444 (cons V445 (cons V446 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V445 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V444 (cons (cons cons (cons (cons cons (cons vector (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons A (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V445 (cons V446 ()))))) ()))) ())))) ()))))) (cons (cons (cons shen.type-signature-of-reverse (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-reverse (cons shen.source ())) (cons defun (cons shen.type-signature-of-reverse (cons (cons V850 (cons V851 (cons V852 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V851 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V850 (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons V851 (cons V852 ()))))) ()))) ())))) ()))))) ())))) shen.fail! (cons (cons (cons shen.type-signature-of-vector-> (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-vector-> (cons shen.source ())) (cons defun (cons shen.type-signature-of-vector-> (cons (cons V451 (cons V452 (cons V453 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V452 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V451 (cons (cons cons (cons (cons cons (cons vector (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons vector (cons (cons cons (cons A (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V452 (cons V453 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-protect (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-protect (cons shen.source ())) (cons defun (cons shen.type-signature-of-protect (cons (cons V766 (cons V767 (cons V768 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V766 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons symbol (cons () ()))) ()))) ()))) (cons V767 (cons V768 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-version (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-version (cons shen.source ())) (cons defun (cons shen.type-signature-of-version (cons (cons V1067 (cons V1068 (cons V1069 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1067 (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) (cons V1068 (cons V1069 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-destroy (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-destroy (cons shen.source ())) (cons defun (cons shen.type-signature-of-destroy (cons (cons V318 (cons V319 (cons V320 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V319 ())) (cons (cons let (cons B (cons (cons shen.newpv (cons V319 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V318 (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons B (cons () ()))) ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons symbol (cons () ()))) ()))) ()))) (cons V319 (cons V320 ()))))) ()))) ())))) ())))) ()))))) ())) (cons (cons (cons shen.type-signature-of-package? (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-package? (cons shen.source ())) (cons defun (cons shen.type-signature-of-package? (cons (cons V696 (cons V697 (cons V698 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V696 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V697 (cons V698 ()))))) ()))) ()))))) (cons (cons (cons shen.type-signature-of-systemf (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-systemf (cons shen.source ())) (cons defun (cons shen.type-signature-of-systemf (cons (cons V948 (cons V949 (cons V950 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V948 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons symbol (cons () ()))) ()))) ()))) (cons V949 (cons V950 ()))))) ()))) ()))))) ())))) shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-porters (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-porters (cons shen.source ())) (cons defun (cons shen.type-signature-of-porters (cons (cons V710 (cons V711 (cons V712 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V710 (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) (cons V711 (cons V712 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-stinput (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-stinput (cons shen.source ())) (cons defun (cons shen.type-signature-of-stinput (cons (cons V892 (cons V893 (cons V894 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V892 (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons stream (cons (cons cons (cons in (cons () ()))) ()))) (cons () ()))) ()))) (cons V893 (cons V894 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-get-time (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-get-time (cons shen.source ())) (cons defun (cons shen.type-signature-of-get-time (cons (cons V465 (cons V466 (cons V467 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V465 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons number (cons () ()))) ()))) ()))) (cons V466 (cons V467 ()))))) ()))) ()))))) ())) (cons (cons (cons shen.type-signature-of-shen.app (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-shen.app (cons shen.source ())) (cons defun (cons shen.type-signature-of-shen.app (cons (cons V241 (cons V242 (cons V243 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V242 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V241 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V242 (cons V243 ()))))) ()))) ())))) ()))))) ())) shen.fail! (cons (cons (cons shen.type-signature-of-boolean? (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-boolean? (cons shen.source ())) (cons defun (cons shen.type-signature-of-boolean? (cons (cons V269 (cons V270 (cons V271 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V270 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V269 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V270 (cons V271 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-element? (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-element? (cons shen.source ())) (cons defun (cons shen.type-signature-of-element? (cons (cons V353 (cons V354 (cons V355 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V354 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V353 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V354 (cons V355 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-integer? (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-integer? (cons shen.source ())) (cons defun (cons shen.type-signature-of-integer? (cons (cons V549 (cons V550 (cons V551 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V550 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V549 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V550 (cons V551 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-language (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-language (cons shen.source ())) (cons defun (cons shen.type-signature-of-language (cons (cons V577 (cons V578 (cons V579 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V577 (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) (cons V578 (cons V579 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-preclude (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-preclude (cons shen.source ())) (cons defun (cons shen.type-signature-of-preclude (cons (cons V745 (cons V746 (cons V747 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V745 (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons symbol (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons symbol (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons V746 (cons V747 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-internal (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-internal (cons shen.source ())) (cons defun (cons shen.type-signature-of-internal (cons (cons V556 (cons V557 (cons V558 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V556 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons symbol (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons V557 (cons V558 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-external (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-external (cons shen.source ())) (cons defun (cons shen.type-signature-of-external (cons (cons V374 (cons V375 (cons V376 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V374 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons symbol (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons V375 (cons V376 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-function (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-function (cons shen.source ())) (cons defun (cons shen.type-signature-of-function (cons (cons V430 (cons V431 (cons V432 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V431 ())) (cons (cons let (cons B (cons (cons shen.newpv (cons V431 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V430 (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons B (cons () ()))) ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons B (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V431 (cons V432 ()))))) ()))) ())))) ())))) ()))))) ())) shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-read-file (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-read-file (cons shen.source ())) (cons defun (cons shen.type-signature-of-read-file (cons (cons V822 (cons V823 (cons V824 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V822 (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons unit (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons V823 (cons V824 ()))))) ()))) ()))))) ())) (cons (cons (cons shen.type-signature-of-optimise (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-optimise (cons shen.source ())) (cons defun (cons shen.type-signature-of-optimise (cons (cons V675 (cons V676 (cons V677 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V675 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V676 (cons V677 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-n->string (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-n->string (cons shen.source ())) (cons defun (cons shen.type-signature-of-n->string (cons (cons V626 (cons V627 (cons V628 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V626 (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) ()))) (cons V627 (cons V628 ()))))) ()))) ()))))) (cons (cons (cons shen.type-signature-of-string->n (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-string->n (cons shen.source ())) (cons defun (cons shen.type-signature-of-string->n (cons (cons V920 (cons V921 (cons V922 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V920 (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons number (cons () ()))) ()))) ()))) (cons V921 (cons V922 ()))))) ()))) ()))))) ())))) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-read-byte (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-read-byte (cons shen.source ())) (cons defun (cons shen.type-signature-of-read-byte (cons (cons V801 (cons V802 (cons V803 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V801 (cons (cons cons (cons (cons cons (cons stream (cons (cons cons (cons in (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons number (cons () ()))) ()))) ()))) (cons V802 (cons V803 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-variable? (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-variable? (cons shen.source ())) (cons defun (cons shen.type-signature-of-variable? (cons (cons V1053 (cons V1054 (cons V1055 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V1054 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1053 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V1054 (cons V1055 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-stoutput (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-stoutput (cons shen.source ())) (cons defun (cons shen.type-signature-of-stoutput (cons (cons V899 (cons V900 (cons V901 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V899 (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons stream (cons (cons cons (cons out (cons () ()))) ()))) (cons () ()))) ()))) (cons V900 (cons V901 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-unprofile (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-unprofile (cons shen.source ())) (cons defun (cons shen.type-signature-of-unprofile (cons (cons V1032 (cons V1033 (cons V1034 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V1033 ())) (cons (cons let (cons B (cons (cons shen.newpv (cons V1033 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1032 (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons B (cons () ()))) ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons B (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V1033 (cons V1034 ()))))) ()))) ())))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-absvector? (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-absvector? (cons shen.source ())) (cons defun (cons shen.type-signature-of-absvector? (cons (cons V220 (cons V221 (cons V222 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V221 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V220 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V221 (cons V222 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-difference (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-difference (cons shen.source ())) (cons defun (cons shen.type-signature-of-difference (cons (cons V325 (cons V326 (cons V327 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V326 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V325 (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V326 (cons V327 ()))))) ()))) ())))) ()))))) ())) (cons (cons (cons shen.type-signature-of-write-byte (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-write-byte (cons shen.source ())) (cons defun (cons shen.type-signature-of-write-byte (cons (cons V1081 (cons V1082 (cons V1083 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1081 (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons (cons cons (cons stream (cons (cons cons (cons out (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons number (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V1082 (cons V1083 ()))))) ()))) ()))))) ())) shen.fail! (cons (cons (cons shen.type-signature-of-trap-error (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-trap-error (cons shen.source ())) (cons defun (cons shen.type-signature-of-trap-error (cons (cons V1004 (cons V1005 (cons V1006 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V1005 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1004 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons (cons cons (cons exception (cons (cons cons (cons --> (cons (cons cons (cons A (cons () ()))) ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons A (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V1005 (cons V1006 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-inferences (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-inferences (cons shen.source ())) (cons defun (cons shen.type-signature-of-inferences (cons (cons V535 (cons V536 (cons V537 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V535 (cons (cons cons (cons --> (cons (cons cons (cons number (cons () ()))) ()))) (cons V536 (cons V537 ()))))) ()))) ()))))) (cons (cons (cons shen.type-signature-of-specialise (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-specialise (cons shen.source ())) (cons defun (cons shen.type-signature-of-specialise (cons (cons V871 (cons V872 (cons V873 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V871 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons symbol (cons () ()))) ()))) ()))) (cons V872 (cons V873 ()))))) ()))) ()))))) ())))) shen.fail! (cons (cons (cons shen.type-signature-of-undefmacro (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-undefmacro (cons shen.source ())) (cons defun (cons shen.type-signature-of-undefmacro (cons (cons V1018 (cons V1019 (cons V1020 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1018 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons symbol (cons () ()))) ()))) ()))) (cons V1019 (cons V1020 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-shen.insert (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-shen.insert (cons shen.source ())) (cons defun (cons shen.type-signature-of-shen.insert (cons (cons V542 (cons V543 (cons V544 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V543 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V542 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V543 (cons V544 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-shen.prhush (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-shen.prhush (cons shen.source ())) (cons defun (cons shen.type-signature-of-shen.prhush (cons (cons V780 (cons V781 (cons V782 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V780 (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons (cons cons (cons stream (cons (cons cons (cons out (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V781 (cons V782 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-shen.proc-nl (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-shen.proc-nl (cons shen.source ())) (cons defun (cons shen.type-signature-of-shen.proc-nl (cons (cons V752 (cons V753 (cons V754 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V752 (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) ()))) (cons V753 (cons V754 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-occurrences (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-occurrences (cons shen.source ())) (cons defun (cons shen.type-signature-of-occurrences (cons (cons V661 (cons V662 (cons V663 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V662 ())) (cons (cons let (cons B (cons (cons shen.newpv (cons V662 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V661 (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons B (cons (cons cons (cons --> (cons (cons cons (cons number (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V662 (cons V663 ()))))) ()))) ())))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-occurs-check (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-occurs-check (cons shen.source ())) (cons defun (cons shen.type-signature-of-occurs-check (cons (cons V668 (cons V669 (cons V670 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V668 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V669 (cons V670 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-simple-error (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-simple-error (cons shen.source ())) (cons defun (cons shen.type-signature-of-simple-error (cons (cons V857 (cons V858 (cons V859 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V858 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V857 (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons A (cons () ()))) ()))) ()))) (cons V858 (cons V859 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-unspecialise (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-unspecialise (cons shen.source ())) (cons defun (cons shen.type-signature-of-unspecialise (cons (cons V1046 (cons V1047 (cons V1048 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1046 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons symbol (cons () ()))) ()))) ()))) (cons V1047 (cons V1048 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-write-to-file (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-write-to-file (cons shen.source ())) (cons defun (cons shen.type-signature-of-write-to-file (cons (cons V1074 (cons V1075 (cons V1076 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V1075 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V1074 (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons A (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V1075 (cons V1076 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-intersection (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-intersection (cons shen.source ())) (cons defun (cons shen.type-signature-of-intersection (cons (cons V563 (cons V564 (cons V565 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V564 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V563 (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons A (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V564 (cons V565 ()))))) ()))) ())))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-maxinferences (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-maxinferences (cons shen.source ())) (cons defun (cons shen.type-signature-of-maxinferences (cons (cons V619 (cons V620 (cons V621 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V619 (cons (cons cons (cons number (cons (cons cons (cons --> (cons (cons cons (cons number (cons () ()))) ()))) ()))) (cons V620 (cons V621 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-string->symbol (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-string->symbol (cons shen.source ())) (cons defun (cons shen.type-signature-of-string->symbol (cons (cons V927 (cons V928 (cons V929 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V927 (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons symbol (cons () ()))) ()))) ()))) (cons V928 (cons V929 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-include-all-but (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-include-all-but (cons shen.source ())) (cons defun (cons shen.type-signature-of-include-all-but (cons (cons V528 (cons V529 (cons V530 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V528 (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons symbol (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons symbol (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons V529 (cons V530 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-implementation (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-implementation (cons shen.source ())) (cons defun (cons shen.type-signature-of-implementation (cons (cons V514 (cons V515 (cons V516 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V514 (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) (cons V515 (cons V516 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-error-to-string (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-error-to-string (cons shen.source ())) (cons defun (cons shen.type-signature-of-error-to-string (cons (cons V381 (cons V382 (cons V383 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V381 (cons (cons cons (cons exception (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) ()))) (cons V382 (cons V383 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-profile-results (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-profile-results (cons shen.source ())) (cons defun (cons shen.type-signature-of-profile-results (cons (cons V759 (cons V760 (cons V761 ()))) (cons (cons let (cons A (cons (cons shen.newpv (cons V760 ())) (cons (cons let (cons B (cons (cons shen.newpv (cons V760 ())) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V759 (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons B (cons () ()))) ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons (cons cons (cons A (cons (cons cons (cons --> (cons (cons cons (cons B (cons () ()))) ()))) ()))) (cons (cons cons (cons * (cons (cons cons (cons number (cons () ()))) ()))) ()))) (cons () ()))) ()))) ()))) (cons V760 (cons V761 ()))))) ()))) ())))) ())))) ()))))) ())) shen.fail! (cons (cons (cons shen.type-signature-of-preclude-all-but (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-preclude-all-but (cons shen.source ())) (cons defun (cons shen.type-signature-of-preclude-all-but (cons (cons V773 (cons V774 (cons V775 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V773 (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons symbol (cons () ()))) ()))) (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons symbol (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons V774 (cons V775 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-read-from-string (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-read-from-string (cons shen.source ())) (cons defun (cons shen.type-signature-of-read-from-string (cons (cons V829 (cons V830 (cons V831 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V829 (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons unit (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons V830 (cons V831 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-enable-type-theory (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-enable-type-theory (cons shen.source ())) (cons defun (cons shen.type-signature-of-enable-type-theory (cons (cons V367 (cons V368 (cons V369 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V367 (cons (cons cons (cons symbol (cons (cons cons (cons --> (cons (cons cons (cons boolean (cons () ()))) ()))) ()))) (cons V368 (cons V369 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-read-file-as-string (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-read-file-as-string (cons shen.source ())) (cons defun (cons shen.type-signature-of-read-file-as-string (cons (cons V815 (cons V816 (cons V817 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V815 (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons string (cons () ()))) ()))) ()))) (cons V816 (cons V817 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! (cons (cons (cons shen.type-signature-of-read-file-as-bytelist (cons arity ())) 3) (cons (cons (cons shen.type-signature-of-read-file-as-bytelist (cons shen.source ())) (cons defun (cons shen.type-signature-of-read-file-as-bytelist (cons (cons V808 (cons V809 (cons V810 ()))) (cons (cons do (cons (cons shen.incinfs ()) (cons (cons unify! (cons V808 (cons (cons cons (cons string (cons (cons cons (cons --> (cons (cons cons (cons (cons cons (cons list (cons (cons cons (cons number (cons () ()))) ()))) (cons () ()))) ()))) ()))) (cons V809 (cons V810 ()))))) ()))) ()))))) ())) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail!))
(set shen.*process-counter* 135)
(set shen.*varcounter* (vector-builder 1000 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail!))
(set shen.*prologvectors* (vector-builder 1000 (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-absvector? shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-adjoin shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-and shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-shen.app shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-append shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-arity shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-assoc shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-boolean? shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-bound? shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-cd shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-close shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-cn shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-compile shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-cons? shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-destroy shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-difference shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-do shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-<e> shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-shen.<!> shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-element? shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-empty? shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-enable-type-theory shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-external shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-error-to-string shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-explode shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-fail shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-fail-if shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-fix shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-freeze shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-fst shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-function shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-gensym shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-<-vector shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-vector-> shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-vector shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-get-time shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-hash shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-head shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-hdv shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-hdstr shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-if shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-it shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-implementation shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-include shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-include-all-but shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-inferences shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-shen.insert shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-integer? shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-internal shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-intersection shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-kill shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-language shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-length shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-limit shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-load shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-map shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-mapcan shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-maxinferences shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-n->string shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-nl shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-not shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-nth shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-number? shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-occurrences shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-occurs-check shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-optimise shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-or shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-os shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-package? shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-port shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-porters shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-pos shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-pr shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-print shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-profile shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-preclude shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-shen.proc-nl shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-profile-results shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-protect shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-preclude-all-but shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-shen.prhush shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-ps shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-read shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-read-byte shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-read-file-as-bytelist shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-read-file-as-string shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-read-file shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-read-from-string shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-release shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-remove shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-reverse shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-simple-error shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-snd shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-specialise shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-spy shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-step shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-stinput shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-stoutput shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-string? shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-str shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-string->n shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-string->symbol shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-sum shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-symbol? shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-systemf shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-tail shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-tlstr shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-tlv shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-tc shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-tc? shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-thaw shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-track shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-trap-error shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-tuple? shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-undefmacro shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-union shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-unprofile shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-untrack shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-unspecialise shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-variable? shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-vector? shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-version shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-write-to-file shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-write-byte shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-y-or-n? shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-> shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-< shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of->= shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-<= shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-= shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-+ shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-/ shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-* shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) (vector-builder 10 shen.-null- shen.-null- shen.-null- shen.type-signature-of-== shen.-null- shen.-null- shen.-null- shen.-null- shen.-null- shen.-null-) shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail! shen.fail!))
(set shen.*macroreg* (cons shen.timer-macro (cons shen.cases-macro (cons shen.abs-macro (cons shen.put/get-macro (cons shen.compile-macro (cons shen.datatype-macro (cons shen.let-macro (cons shen.assoc-macro (cons shen.make-string-macro (cons shen.output-macro (cons shen.input-macro (cons shen.error-macro (cons shen.prolog-macro (cons shen.synonyms-macro (cons shen.nl-macro (cons shen.@s-macro (cons shen.defprolog-macro (cons shen.function-macro ())))))))))))))))))))
(set *macros* (cons (lambda-closure (vector-builder) (lambda X (shen.timer-macro X))) (cons (lambda-closure (vector-builder) (lambda X (shen.cases-macro X))) (cons (lambda-closure (vector-builder) (lambda X (shen.abs-macro X))) (cons (lambda-closure (vector-builder) (lambda X (shen.put/get-macro X))) (cons (lambda-closure (vector-builder) (lambda X (shen.compile-macro X))) (cons (lambda-closure (vector-builder) (lambda X (shen.datatype-macro X))) (cons (lambda-closure (vector-builder) (lambda X (shen.let-macro X))) (cons (lambda-closure (vector-builder) (lambda X (shen.assoc-macro X))) (cons (lambda-closure (vector-builder) (lambda X (shen.make-string-macro X))) (cons (lambda-closure (vector-builder) (lambda X (shen.output-macro X))) (cons (lambda-closure (vector-builder) (lambda X (shen.input-macro X))) (cons (lambda-closure (vector-builder) (lambda X (shen.error-macro X))) (cons (lambda-closure (vector-builder) (lambda X (shen.prolog-macro X))) (cons (lambda-closure (vector-builder) (lambda X (shen.synonyms-macro X))) (cons (lambda-closure (vector-builder) (lambda X (shen.nl-macro X))) (cons (lambda-closure (vector-builder) (lambda X (shen.@s-macro X))) (cons (lambda-closure (vector-builder) (lambda X (shen.defprolog-macro X))) (cons (lambda-closure (vector-builder) (lambda X (shen.function-macro X))) ())))))))))))))))))))
(set *home-directory* "")
(set shen.*gensym* 1160)
(set shen.*tracking* ())
(set shen.*alphabet* (cons A (cons B (cons C (cons D (cons E (cons F (cons G (cons H (cons I (cons J (cons K (cons L (cons M (cons N (cons O (cons P (cons Q (cons R (cons S (cons T (cons U (cons V (cons W (cons X (cons Y (cons Z ())))))))))))))))))))))))))))
(set shen.*special* (cons @p (cons @s (cons @v (cons cons (cons lambda (cons let (cons where (cons set (cons open ()))))))))))
(set shen.*extraspecial* (cons define (cons shen.process-datatype (cons input+ (cons defcc (cons shen.read+ (cons defmacro ())))))))
(set shen.*spy* false)
(set shen.*datatypes* ())
(set shen.*alldatatypes* ())
(set shen.*shen-type-theory-enabled?* true)
(set shen.*synonyms* ())
(set shen.*system* ())
(set shen.*signedfuncs* (cons (cons == (cons A (cons --> (cons (cons B (cons --> (cons boolean ()))) ())))) (cons (cons * (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (cons (cons - (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (cons (cons / (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (cons (cons + (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (cons (cons = (cons A (cons --> (cons (cons A (cons --> (cons boolean ()))) ())))) (cons (cons <= (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (cons (cons >= (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (cons (cons < (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (cons (cons > (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (cons (cons y-or-n? (cons string (cons --> (cons boolean ())))) (cons (cons write-byte (cons number (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons number ()))) ())))) (cons (cons write-to-file (cons string (cons --> (cons (cons A (cons --> (cons A ()))) ())))) (cons (cons version (cons --> (cons string ()))) (cons (cons vector? (cons A (cons --> (cons boolean ())))) (cons (cons variable? (cons A (cons --> (cons boolean ())))) (cons (cons unspecialise (cons symbol (cons --> (cons symbol ())))) (cons (cons untrack (cons symbol (cons --> (cons symbol ())))) (cons (cons unprofile (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ())))) (cons (cons union (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (cons (cons undefmacro (cons symbol (cons --> (cons symbol ())))) (cons (cons tuple? (cons A (cons --> (cons boolean ())))) (cons (cons trap-error (cons A (cons --> (cons (cons (cons exception (cons --> (cons A ()))) (cons --> (cons A ()))) ())))) (cons (cons track (cons symbol (cons --> (cons symbol ())))) (cons (cons thaw (cons (cons lazy (cons A ())) (cons --> (cons A ())))) (cons (cons tc? (cons --> (cons boolean ()))) (cons (cons tc (cons symbol (cons --> (cons boolean ())))) (cons (cons tlv (cons (cons vector (cons A ())) (cons --> (cons (cons vector (cons A ())) ())))) (cons (cons tlstr (cons string (cons --> (cons string ())))) (cons (cons tail (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ())))) (cons (cons systemf (cons symbol (cons --> (cons symbol ())))) (cons (cons symbol? (cons A (cons --> (cons boolean ())))) (cons (cons sum (cons (cons list (cons number ())) (cons --> (cons number ())))) (cons (cons string->symbol (cons string (cons --> (cons symbol ())))) (cons (cons string->n (cons string (cons --> (cons number ())))) (cons (cons str (cons A (cons --> (cons string ())))) (cons (cons string? (cons A (cons --> (cons boolean ())))) (cons (cons stoutput (cons --> (cons (cons stream (cons out ())) ()))) (cons (cons stinput (cons --> (cons (cons stream (cons in ())) ()))) (cons (cons step (cons symbol (cons --> (cons boolean ())))) (cons (cons spy (cons symbol (cons --> (cons boolean ())))) (cons (cons specialise (cons symbol (cons --> (cons symbol ())))) (cons (cons snd (cons (cons A (cons * (cons B ()))) (cons --> (cons B ())))) (cons (cons simple-error (cons string (cons --> (cons A ())))) (cons (cons reverse (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ())))) (cons (cons remove (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (cons (cons release (cons --> (cons string ()))) (cons (cons read-from-string (cons string (cons --> (cons (cons list (cons unit ())) ())))) (cons (cons read-file (cons string (cons --> (cons (cons list (cons unit ())) ())))) (cons (cons read-file-as-string (cons string (cons --> (cons string ())))) (cons (cons read-file-as-bytelist (cons string (cons --> (cons (cons list (cons number ())) ())))) (cons (cons read-byte (cons (cons stream (cons in ())) (cons --> (cons number ())))) (cons (cons read (cons (cons stream (cons in ())) (cons --> (cons unit ())))) (cons (cons ps (cons symbol (cons --> (cons (cons list (cons unit ())) ())))) (cons (cons shen.prhush (cons string (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons string ()))) ())))) (cons (cons preclude-all-but (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (cons (cons protect (cons symbol (cons --> (cons symbol ())))) (cons (cons profile-results (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons (cons A (cons --> (cons B ()))) (cons * (cons number ()))) ())))) (cons (cons shen.proc-nl (cons string (cons --> (cons string ())))) (cons (cons preclude (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (cons (cons profile (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ())))) (cons (cons print (cons A (cons --> (cons A ())))) (cons (cons pr (cons string (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons string ()))) ())))) (cons (cons pos (cons string (cons --> (cons (cons number (cons --> (cons string ()))) ())))) (cons (cons porters (cons --> (cons string ()))) (cons (cons port (cons --> (cons string ()))) (cons (cons package? (cons symbol (cons --> (cons boolean ())))) (cons (cons os (cons --> (cons string ()))) (cons (cons or (cons boolean (cons --> (cons (cons boolean (cons --> (cons boolean ()))) ())))) (cons (cons optimise (cons symbol (cons --> (cons boolean ())))) (cons (cons occurs-check (cons symbol (cons --> (cons boolean ())))) (cons (cons occurrences (cons A (cons --> (cons (cons B (cons --> (cons number ()))) ())))) (cons (cons number? (cons A (cons --> (cons boolean ())))) (cons (cons nth (cons number (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons A ()))) ())))) (cons (cons not (cons boolean (cons --> (cons boolean ())))) (cons (cons nl (cons number (cons --> (cons number ())))) (cons (cons n->string (cons number (cons --> (cons string ())))) (cons (cons maxinferences (cons number (cons --> (cons number ())))) (cons (cons mapcan (cons (cons A (cons --> (cons (cons list (cons B ())) ()))) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons B ())) ()))) ())))) (cons (cons map (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons B ())) ()))) ())))) (cons (cons load (cons string (cons --> (cons symbol ())))) (cons (cons limit (cons (cons vector (cons A ())) (cons --> (cons number ())))) (cons (cons length (cons (cons list (cons A ())) (cons --> (cons number ())))) (cons (cons language (cons --> (cons string ()))) (cons (cons kill (cons --> (cons A ()))) (cons (cons intersection (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (cons (cons internal (cons symbol (cons --> (cons (cons list (cons symbol ())) ())))) (cons (cons integer? (cons A (cons --> (cons boolean ())))) (cons (cons shen.insert (cons A (cons --> (cons (cons string (cons --> (cons string ()))) ())))) (cons (cons inferences (cons --> (cons number ()))) (cons (cons include-all-but (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (cons (cons include (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (cons (cons implementation (cons --> (cons string ()))) (cons (cons it (cons --> (cons string ()))) (cons (cons if (cons boolean (cons --> (cons (cons A (cons --> (cons (cons A (cons --> (cons A ()))) ()))) ())))) (cons (cons hdstr (cons string (cons --> (cons string ())))) (cons (cons hdv (cons (cons vector (cons A ())) (cons --> (cons A ())))) (cons (cons head (cons (cons list (cons A ())) (cons --> (cons A ())))) (cons (cons hash (cons A (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (cons (cons get-time (cons symbol (cons --> (cons number ())))) (cons (cons vector (cons number (cons --> (cons (cons vector (cons A ())) ())))) (cons (cons vector-> (cons (cons vector (cons A ())) (cons --> (cons (cons number (cons --> (cons (cons A (cons --> (cons (cons vector (cons A ())) ()))) ()))) ())))) (cons (cons <-vector (cons (cons vector (cons A ())) (cons --> (cons (cons number (cons --> (cons A ()))) ())))) (cons (cons gensym (cons symbol (cons --> (cons symbol ())))) (cons (cons function (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ())))) (cons (cons fst (cons (cons A (cons * (cons B ()))) (cons --> (cons A ())))) (cons (cons freeze (cons A (cons --> (cons (cons lazy (cons A ())) ())))) (cons (cons fix (cons (cons A (cons --> (cons A ()))) (cons --> (cons (cons A (cons --> (cons A ()))) ())))) (cons (cons fail-if (cons (cons symbol (cons --> (cons boolean ()))) (cons --> (cons (cons symbol (cons --> (cons symbol ()))) ())))) (cons (cons fail (cons --> (cons symbol ()))) (cons (cons explode (cons A (cons --> (cons (cons list (cons string ())) ())))) (cons (cons error-to-string (cons exception (cons --> (cons string ())))) (cons (cons external (cons symbol (cons --> (cons (cons list (cons symbol ())) ())))) (cons (cons enable-type-theory (cons symbol (cons --> (cons boolean ())))) (cons (cons empty? (cons A (cons --> (cons boolean ())))) (cons (cons element? (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons boolean ()))) ())))) (cons (cons shen.<!> (cons (cons list (cons A ())) (cons shen.==> (cons (cons list (cons A ())) ())))) (cons (cons <e> (cons (cons list (cons A ())) (cons shen.==> (cons (cons list (cons B ())) ())))) (cons (cons do (cons A (cons --> (cons (cons B (cons --> (cons B ()))) ())))) (cons (cons difference (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (cons (cons destroy (cons (cons A (cons --> (cons B ()))) (cons --> (cons symbol ())))) (cons (cons cons? (cons A (cons --> (cons boolean ())))) (cons (cons compile (cons (cons A (cons shen.==> (cons B ()))) (cons --> (cons (cons A (cons --> (cons (cons (cons A (cons --> (cons B ()))) (cons --> (cons B ()))) ()))) ())))) (cons (cons cn (cons string (cons --> (cons (cons string (cons --> (cons string ()))) ())))) (cons (cons close (cons (cons stream (cons A ())) (cons --> (cons (cons list (cons B ())) ())))) (cons (cons cd (cons string (cons --> (cons string ())))) (cons (cons bound? (cons symbol (cons --> (cons boolean ())))) (cons (cons boolean? (cons A (cons --> (cons boolean ())))) (cons (cons assoc (cons A (cons --> (cons (cons (cons list (cons (cons list (cons A ())) ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (cons (cons arity (cons A (cons --> (cons number ())))) (cons (cons append (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (cons (cons shen.app (cons A (cons --> (cons (cons string (cons --> (cons (cons symbol (cons --> (cons string ()))) ()))) ())))) (cons (cons and (cons boolean (cons --> (cons (cons boolean (cons --> (cons boolean ()))) ())))) (cons (cons adjoin (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (cons (cons absvector? (cons A (cons --> (cons boolean ())))) ()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(set shen.*maxcomplexity* 128)
(set shen.*occurs* true)
(set shen.*maxinferences* 1000000)
(set *maximum-print-sequence-size* 20)
(set shen.*catch* 270)
(set shen.*call* 0)
(set shen.*infs* 540)
(set *hush* false)
(set shen.*optimise* false)
(set shen.*symbol-table* (cons (cons shen.type-signature-of-== (lambda-closure (vector-builder) (lambda V1155 (lambda V1156 (lambda V1157 (shen.type-signature-of-== V1155 V1156 V1157)))))) (cons (cons shen.type-signature-of-- (lambda-closure (vector-builder) (lambda V1141 (lambda V1142 (lambda V1143 (shen.type-signature-of-- V1141 V1142 V1143)))))) (cons (cons shen.type-signature-of-+ (lambda-closure (vector-builder) (lambda V1127 (lambda V1128 (lambda V1129 (shen.type-signature-of-+ V1127 V1128 V1129)))))) (cons (cons shen.type-signature-of-<= (lambda-closure (vector-builder) (lambda V1113 (lambda V1114 (lambda V1115 (shen.type-signature-of-<= V1113 V1114 V1115)))))) (cons (cons shen.type-signature-of-< (lambda-closure (vector-builder) (lambda V1099 (lambda V1100 (lambda V1101 (shen.type-signature-of-< V1099 V1100 V1101)))))) (cons (cons shen.type-signature-of-y-or-n? (lambda-closure (vector-builder) (lambda V1085 (lambda V1086 (lambda V1087 (shen.type-signature-of-y-or-n? V1085 V1086 V1087)))))) (cons (cons shen.type-signature-of-write-to-file (lambda-closure (vector-builder) (lambda V1071 (lambda V1072 (lambda V1073 (shen.type-signature-of-write-to-file V1071 V1072 V1073)))))) (cons (cons shen.type-signature-of-vector? (lambda-closure (vector-builder) (lambda V1057 (lambda V1058 (lambda V1059 (shen.type-signature-of-vector? V1057 V1058 V1059)))))) (cons (cons shen.type-signature-of-unspecialise (lambda-closure (vector-builder) (lambda V1043 (lambda V1044 (lambda V1045 (shen.type-signature-of-unspecialise V1043 V1044 V1045)))))) (cons (cons shen.type-signature-of-unprofile (lambda-closure (vector-builder) (lambda V1029 (lambda V1030 (lambda V1031 (shen.type-signature-of-unprofile V1029 V1030 V1031)))))) (cons (cons shen.type-signature-of-undefmacro (lambda-closure (vector-builder) (lambda V1015 (lambda V1016 (lambda V1017 (shen.type-signature-of-undefmacro V1015 V1016 V1017)))))) (cons (cons shen.type-signature-of-trap-error (lambda-closure (vector-builder) (lambda V1001 (lambda V1002 (lambda V1003 (shen.type-signature-of-trap-error V1001 V1002 V1003)))))) (cons (cons shen.type-signature-of-thaw (lambda-closure (vector-builder) (lambda V987 (lambda V988 (lambda V989 (shen.type-signature-of-thaw V987 V988 V989)))))) (cons (cons shen.type-signature-of-tc (lambda-closure (vector-builder) (lambda V973 (lambda V974 (lambda V975 (shen.type-signature-of-tc V973 V974 V975)))))) (cons (cons shen.type-signature-of-tlstr (lambda-closure (vector-builder) (lambda V959 (lambda V960 (lambda V961 (shen.type-signature-of-tlstr V959 V960 V961)))))) (cons (cons shen.type-signature-of-systemf (lambda-closure (vector-builder) (lambda V945 (lambda V946 (lambda V947 (shen.type-signature-of-systemf V945 V946 V947)))))) (cons (cons shen.type-signature-of-sum (lambda-closure (vector-builder) (lambda V931 (lambda V932 (lambda V933 (shen.type-signature-of-sum V931 V932 V933)))))) (cons (cons shen.type-signature-of-string->n (lambda-closure (vector-builder) (lambda V917 (lambda V918 (lambda V919 (shen.type-signature-of-string->n V917 V918 V919)))))) (cons (cons shen.type-signature-of-string? (lambda-closure (vector-builder) (lambda V903 (lambda V904 (lambda V905 (shen.type-signature-of-string? V903 V904 V905)))))) (cons (cons shen.type-signature-of-stinput (lambda-closure (vector-builder) (lambda V889 (lambda V890 (lambda V891 (shen.type-signature-of-stinput V889 V890 V891)))))) (cons (cons shen.type-signature-of-spy (lambda-closure (vector-builder) (lambda V875 (lambda V876 (lambda V877 (shen.type-signature-of-spy V875 V876 V877)))))) (cons (cons shen.type-signature-of-snd (lambda-closure (vector-builder) (lambda V861 (lambda V862 (lambda V863 (shen.type-signature-of-snd V861 V862 V863)))))) (cons (cons shen.type-signature-of-reverse (lambda-closure (vector-builder) (lambda V847 (lambda V848 (lambda V849 (shen.type-signature-of-reverse V847 V848 V849)))))) (cons (cons shen.type-signature-of-release (lambda-closure (vector-builder) (lambda V833 (lambda V834 (lambda V835 (shen.type-signature-of-release V833 V834 V835)))))) (cons (cons shen.type-signature-of-read-file (lambda-closure (vector-builder) (lambda V819 (lambda V820 (lambda V821 (shen.type-signature-of-read-file V819 V820 V821)))))) (cons (cons shen.type-signature-of-read-file-as-bytelist (lambda-closure (vector-builder) (lambda V805 (lambda V806 (lambda V807 (shen.type-signature-of-read-file-as-bytelist V805 V806 V807)))))) (cons (cons shen.type-signature-of-read (lambda-closure (vector-builder) (lambda V791 (lambda V792 (lambda V793 (shen.type-signature-of-read V791 V792 V793)))))) (cons (cons shen.type-signature-of-shen.prhush (lambda-closure (vector-builder) (lambda V777 (lambda V778 (lambda V779 (shen.type-signature-of-shen.prhush V777 V778 V779)))))) (cons (cons shen.type-signature-of-protect (lambda-closure (vector-builder) (lambda V763 (lambda V764 (lambda V765 (shen.type-signature-of-protect V763 V764 V765)))))) (cons (cons shen.type-signature-of-shen.proc-nl (lambda-closure (vector-builder) (lambda V749 (lambda V750 (lambda V751 (shen.type-signature-of-shen.proc-nl V749 V750 V751)))))) (cons (cons shen.type-signature-of-profile (lambda-closure (vector-builder) (lambda V735 (lambda V736 (lambda V737 (shen.type-signature-of-profile V735 V736 V737)))))) (cons (cons shen.type-signature-of-pr (lambda-closure (vector-builder) (lambda V721 (lambda V722 (lambda V723 (shen.type-signature-of-pr V721 V722 V723)))))) (cons (cons shen.type-signature-of-porters (lambda-closure (vector-builder) (lambda V707 (lambda V708 (lambda V709 (shen.type-signature-of-porters V707 V708 V709)))))) (cons (cons shen.type-signature-of-package? (lambda-closure (vector-builder) (lambda V693 (lambda V694 (lambda V695 (shen.type-signature-of-package? V693 V694 V695)))))) (cons (cons shen.type-signature-of-or (lambda-closure (vector-builder) (lambda V679 (lambda V680 (lambda V681 (shen.type-signature-of-or V679 V680 V681)))))) (cons (cons shen.type-signature-of-occurs-check (lambda-closure (vector-builder) (lambda V665 (lambda V666 (lambda V667 (shen.type-signature-of-occurs-check V665 V666 V667)))))) (cons (cons shen.type-signature-of-number? (lambda-closure (vector-builder) (lambda V651 (lambda V652 (lambda V653 (shen.type-signature-of-number? V651 V652 V653)))))) (cons (cons shen.type-signature-of-not (lambda-closure (vector-builder) (lambda V637 (lambda V638 (lambda V639 (shen.type-signature-of-not V637 V638 V639)))))) (cons (cons shen.type-signature-of-n->string (lambda-closure (vector-builder) (lambda V623 (lambda V624 (lambda V625 (shen.type-signature-of-n->string V623 V624 V625)))))) (cons (cons shen.type-signature-of-mapcan (lambda-closure (vector-builder) (lambda V609 (lambda V610 (lambda V611 (shen.type-signature-of-mapcan V609 V610 V611)))))) (cons (cons shen.type-signature-of-load (lambda-closure (vector-builder) (lambda V595 (lambda V596 (lambda V597 (shen.type-signature-of-load V595 V596 V597)))))) (cons (cons shen.type-signature-of-length (lambda-closure (vector-builder) (lambda V581 (lambda V582 (lambda V583 (shen.type-signature-of-length V581 V582 V583)))))) (cons (cons shen.type-signature-of-kill (lambda-closure (vector-builder) (lambda V567 (lambda V568 (lambda V569 (shen.type-signature-of-kill V567 V568 V569)))))) (cons (cons shen.type-signature-of-internal (lambda-closure (vector-builder) (lambda V553 (lambda V554 (lambda V555 (shen.type-signature-of-internal V553 V554 V555)))))) (cons (cons shen.type-signature-of-shen.insert (lambda-closure (vector-builder) (lambda V539 (lambda V540 (lambda V541 (shen.type-signature-of-shen.insert V539 V540 V541)))))) (cons (cons shen.type-signature-of-include-all-but (lambda-closure (vector-builder) (lambda V525 (lambda V526 (lambda V527 (shen.type-signature-of-include-all-but V525 V526 V527)))))) (cons (cons shen.type-signature-of-implementation (lambda-closure (vector-builder) (lambda V511 (lambda V512 (lambda V513 (shen.type-signature-of-implementation V511 V512 V513)))))) (cons (cons shen.type-signature-of-if (lambda-closure (vector-builder) (lambda V497 (lambda V498 (lambda V499 (shen.type-signature-of-if V497 V498 V499)))))) (cons (cons shen.type-signature-of-hdv (lambda-closure (vector-builder) (lambda V483 (lambda V484 (lambda V485 (shen.type-signature-of-hdv V483 V484 V485)))))) (cons (cons shen.type-signature-of-hash (lambda-closure (vector-builder) (lambda V469 (lambda V470 (lambda V471 (shen.type-signature-of-hash V469 V470 V471)))))) (cons (cons shen.type-signature-of-vector (lambda-closure (vector-builder) (lambda V455 (lambda V456 (lambda V457 (shen.type-signature-of-vector V455 V456 V457)))))) (cons (cons shen.type-signature-of-<-vector (lambda-closure (vector-builder) (lambda V441 (lambda V442 (lambda V443 (shen.type-signature-of-<-vector V441 V442 V443)))))) (cons (cons shen.type-signature-of-function (lambda-closure (vector-builder) (lambda V427 (lambda V428 (lambda V429 (shen.type-signature-of-function V427 V428 V429)))))) (cons (cons shen.type-signature-of-freeze (lambda-closure (vector-builder) (lambda V413 (lambda V414 (lambda V415 (shen.type-signature-of-freeze V413 V414 V415)))))) (cons (cons shen.type-signature-of-fail-if (lambda-closure (vector-builder) (lambda V399 (lambda V400 (lambda V401 (shen.type-signature-of-fail-if V399 V400 V401)))))) (cons (cons shen.type-signature-of-explode (lambda-closure (vector-builder) (lambda V385 (lambda V386 (lambda V387 (shen.type-signature-of-explode V385 V386 V387)))))) (cons (cons shen.type-signature-of-external (lambda-closure (vector-builder) (lambda V371 (lambda V372 (lambda V373 (shen.type-signature-of-external V371 V372 V373)))))) (cons (cons shen.type-signature-of-empty? (lambda-closure (vector-builder) (lambda V357 (lambda V358 (lambda V359 (shen.type-signature-of-empty? V357 V358 V359)))))) (cons (cons shen.type-signature-of-shen.<!> (lambda-closure (vector-builder) (lambda V343 (lambda V344 (lambda V345 (shen.type-signature-of-shen.<!> V343 V344 V345)))))) (cons (cons shen.type-signature-of-do (lambda-closure (vector-builder) (lambda V329 (lambda V330 (lambda V331 (shen.type-signature-of-do V329 V330 V331)))))) (cons (cons shen.type-signature-of-destroy (lambda-closure (vector-builder) (lambda V315 (lambda V316 (lambda V317 (shen.type-signature-of-destroy V315 V316 V317)))))) (cons (cons shen.type-signature-of-compile (lambda-closure (vector-builder) (lambda V301 (lambda V302 (lambda V303 (shen.type-signature-of-compile V301 V302 V303)))))) (cons (cons shen.type-signature-of-close (lambda-closure (vector-builder) (lambda V287 (lambda V288 (lambda V289 (shen.type-signature-of-close V287 V288 V289)))))) (cons (cons shen.type-signature-of-bound? (lambda-closure (vector-builder) (lambda V273 (lambda V274 (lambda V275 (shen.type-signature-of-bound? V273 V274 V275)))))) (cons (cons shen.type-signature-of-assoc (lambda-closure (vector-builder) (lambda V259 (lambda V260 (lambda V261 (shen.type-signature-of-assoc V259 V260 V261)))))) (cons (cons shen.type-signature-of-append (lambda-closure (vector-builder) (lambda V245 (lambda V246 (lambda V247 (shen.type-signature-of-append V245 V246 V247)))))) (cons (cons shen.type-signature-of-and (lambda-closure (vector-builder) (lambda V231 (lambda V232 (lambda V233 (shen.type-signature-of-and V231 V232 V233)))))) (cons (cons shen.type-signature-of-absvector? (lambda-closure (vector-builder) (lambda V217 (lambda V218 (lambda V219 (shen.type-signature-of-absvector? V217 V218 V219)))))) (cons (cons absvector (lambda-closure (vector-builder) (lambda V215 (absvector V215)))) (cons (cons absvector? (lambda-closure (vector-builder) (lambda V214 (absvector? V214)))) (cons (cons address-> (lambda-closure (vector-builder) (lambda V211 (lambda V212 (lambda V213 (address-> V211 V212 V213)))))) (cons (cons <-address (lambda-closure (vector-builder) (lambda V209 (lambda V210 (<-address V209 V210))))) (cons (cons adjoin (lambda-closure (vector-builder) (lambda V207 (lambda V208 (adjoin V207 V208))))) (cons (cons and (lambda-closure (vector-builder) (lambda V205 (lambda V206 (and V205 V206))))) (cons (cons append (lambda-closure (vector-builder) (lambda V203 (lambda V204 (append V203 V204))))) (cons (cons arity (lambda-closure (vector-builder) (lambda V202 (arity V202)))) (cons (cons assoc (lambda-closure (vector-builder) (lambda V200 (lambda V201 (assoc V200 V201))))) (cons (cons boolean? (lambda-closure (vector-builder) (lambda V199 (boolean? V199)))) (cons (cons cd (lambda-closure (vector-builder) (lambda V198 (cd V198)))) (cons (cons compile (lambda-closure (vector-builder) (lambda V195 (lambda V196 (lambda V197 (compile V195 V196 V197)))))) (cons (cons concat (lambda-closure (vector-builder) (lambda V193 (lambda V194 (concat V193 V194))))) (cons (cons cons (lambda-closure (vector-builder) (lambda V191 (lambda V192 (cons V191 V192))))) (cons (cons cons? (lambda-closure (vector-builder) (lambda V190 (cons? V190)))) (cons (cons cn (lambda-closure (vector-builder) (lambda V188 (lambda V189 (cn V188 V189))))) (cons (cons declare (lambda-closure (vector-builder) (lambda V186 (lambda V187 (declare V186 V187))))) (cons (cons destroy (lambda-closure (vector-builder) (lambda V185 (destroy V185)))) (cons (cons difference (lambda-closure (vector-builder) (lambda V183 (lambda V184 (difference V183 V184))))) (cons (cons do (lambda-closure (vector-builder) (lambda V181 (lambda V182 (do V181 V182))))) (cons (cons element? (lambda-closure (vector-builder) (lambda V179 (lambda V180 (element? V179 V180))))) (cons (cons empty? (lambda-closure (vector-builder) (lambda V178 (empty? V178)))) (cons (cons eval (lambda-closure (vector-builder) (lambda V177 (eval V177)))) (cons (cons eval-kl (lambda-closure (vector-builder) (lambda V176 (eval-kl V176)))) (cons (cons external (lambda-closure (vector-builder) (lambda V175 (external V175)))) (cons (cons explode (lambda-closure (vector-builder) (lambda V174 (explode V174)))) (cons (cons enable-type-theory (lambda-closure (vector-builder) (lambda V173 (enable-type-theory V173)))) (cons (cons findall (lambda-closure (vector-builder) (lambda V168 (lambda V169 (lambda V170 (lambda V171 (lambda V172 (findall V168 V169 V170 V171 V172)))))))) (cons (cons fail-if (lambda-closure (vector-builder) (lambda V166 (lambda V167 (fail-if V166 V167))))) (cons (cons fix (lambda-closure (vector-builder) (lambda V164 (lambda V165 (fix V164 V165))))) (cons (cons freeze (lambda-closure (vector-builder) (lambda V163 (freeze V163)))) (cons (cons fst (lambda-closure (vector-builder) (lambda V162 (fst V162)))) (cons (cons gensym (lambda-closure (vector-builder) (lambda V161 (gensym V161)))) (cons (cons get-time (lambda-closure (vector-builder) (lambda V160 (get-time V160)))) (cons (cons get (lambda-closure (vector-builder) (lambda V157 (lambda V158 (lambda V159 (get V157 V158 V159)))))) (cons (cons hdstr (lambda-closure (vector-builder) (lambda V156 (hdstr V156)))) (cons (cons hdv (lambda-closure (vector-builder) (lambda V155 (hdv V155)))) (cons (cons hd (lambda-closure (vector-builder) (lambda V154 (hd V154)))) (cons (cons head (lambda-closure (vector-builder) (lambda V153 (head V153)))) (cons (cons identical (lambda-closure (vector-builder) (lambda V149 (lambda V150 (lambda V151 (lambda V152 (identical V149 V150 V151 V152))))))) (cons (cons if (lambda-closure (vector-builder) (lambda V146 (lambda V147 (lambda V148 (if V146 V147 V148)))))) (cons (cons internal (lambda-closure (vector-builder) (lambda V145 (internal V145)))) (cons (cons include-all-but (lambda-closure (vector-builder) (lambda V144 (include-all-but V144)))) (cons (cons include (lambda-closure (vector-builder) (lambda V143 (include V143)))) (cons (cons input+ (lambda-closure (vector-builder) (lambda V141 (lambda V142 (input+ V141 V142))))) (cons (cons input (lambda-closure (vector-builder) (lambda V140 (input V140)))) (cons (cons integer? (lambda-closure (vector-builder) (lambda V139 (integer? V139)))) (cons (cons intern (lambda-closure (vector-builder) (lambda V138 (intern V138)))) (cons (cons intersection (lambda-closure (vector-builder) (lambda V136 (lambda V137 (intersection V136 V137))))) (cons (cons length (lambda-closure (vector-builder) (lambda V135 (length V135)))) (cons (cons lineread (lambda-closure (vector-builder) (lambda V134 (lineread V134)))) (cons (cons load (lambda-closure (vector-builder) (lambda V133 (load V133)))) (cons (cons map (lambda-closure (vector-builder) (lambda V131 (lambda V132 (map V131 V132))))) (cons (cons mapcan (lambda-closure (vector-builder) (lambda V129 (lambda V130 (mapcan V129 V130))))) (cons (cons maxinferences (lambda-closure (vector-builder) (lambda V128 (maxinferences V128)))) (cons (cons macroexpand (lambda-closure (vector-builder) (lambda V127 (macroexpand V127)))) (cons (cons not (lambda-closure (vector-builder) (lambda V126 (not V126)))) (cons (cons nth (lambda-closure (vector-builder) (lambda V124 (lambda V125 (nth V124 V125))))) (cons (cons number? (lambda-closure (vector-builder) (lambda V123 (number? V123)))) (cons (cons n->string (lambda-closure (vector-builder) (lambda V122 (n->string V122)))) (cons (cons occurs-check (lambda-closure (vector-builder) (lambda V121 (occurs-check V121)))) (cons (cons occurrences (lambda-closure (vector-builder) (lambda V119 (lambda V120 (occurrences V119 V120))))) (cons (cons optimise (lambda-closure (vector-builder) (lambda V118 (optimise V118)))) (cons (cons or (lambda-closure (vector-builder) (lambda V116 (lambda V117 (or V116 V117))))) (cons (cons package (lambda-closure (vector-builder) (lambda V113 (lambda V114 (lambda V115 (package V113 V114 V115)))))) (cons (cons pos (lambda-closure (vector-builder) (lambda V111 (lambda V112 (pos V111 V112))))) (cons (cons pr (lambda-closure (vector-builder) (lambda V109 (lambda V110 (pr V109 V110))))) (cons (cons print (lambda-closure (vector-builder) (lambda V108 (print V108)))) (cons (cons profile (lambda-closure (vector-builder) (lambda V107 (profile V107)))) (cons (cons profile-results (lambda-closure (vector-builder) (lambda V106 (profile-results V106)))) (cons (cons protect (lambda-closure (vector-builder) (lambda V105 (protect V105)))) (cons (cons ps (lambda-closure (vector-builder) (lambda V104 (ps V104)))) (cons (cons preclude-all-but (lambda-closure (vector-builder) (lambda V103 (preclude-all-but V103)))) (cons (cons preclude (lambda-closure (vector-builder) (lambda V102 (preclude V102)))) (cons (cons put (lambda-closure (vector-builder) (lambda V98 (lambda V99 (lambda V100 (lambda V101 (put V98 V99 V100 V101))))))) (cons (cons package? (lambda-closure (vector-builder) (lambda V97 (package? V97)))) (cons (cons read-from-string (lambda-closure (vector-builder) (lambda V96 (read-from-string V96)))) (cons (cons read-byte (lambda-closure (vector-builder) (lambda V95 (read-byte V95)))) (cons (cons read-file-as-string (lambda-closure (vector-builder) (lambda V94 (read-file-as-string V94)))) (cons (cons read-file (lambda-closure (vector-builder) (lambda V93 (read-file V93)))) (cons (cons receive (lambda-closure (vector-builder) (lambda V92 (receive V92)))) (cons (cons read (lambda-closure (vector-builder) (lambda V91 (read V91)))) (cons (cons remove (lambda-closure (vector-builder) (lambda V89 (lambda V90 (remove V89 V90))))) (cons (cons reverse (lambda-closure (vector-builder) (lambda V88 (reverse V88)))) (cons (cons set (lambda-closure (vector-builder) (lambda V86 (lambda V87 (set V86 V87))))) (cons (cons simple-error (lambda-closure (vector-builder) (lambda V85 (simple-error V85)))) (cons (cons snd (lambda-closure (vector-builder) (lambda V84 (snd V84)))) (cons (cons specialise (lambda-closure (vector-builder) (lambda V83 (specialise V83)))) (cons (cons spy (lambda-closure (vector-builder) (lambda V82 (spy V82)))) (cons (cons step (lambda-closure (vector-builder) (lambda V81 (step V81)))) (cons (cons string->n (lambda-closure (vector-builder) (lambda V80 (string->n V80)))) (cons (cons string? (lambda-closure (vector-builder) (lambda V79 (string? V79)))) (cons (cons subst (lambda-closure (vector-builder) (lambda V76 (lambda V77 (lambda V78 (subst V76 V77 V78)))))) (cons (cons sum (lambda-closure (vector-builder) (lambda V75 (sum V75)))) (cons (cons string->symbol (lambda-closure (vector-builder) (lambda V74 (string->symbol V74)))) (cons (cons symbol? (lambda-closure (vector-builder) (lambda V73 (symbol? V73)))) (cons (cons systemf (lambda-closure (vector-builder) (lambda V72 (systemf V72)))) (cons (cons tail (lambda-closure (vector-builder) (lambda V71 (tail V71)))) (cons (cons tlstr (lambda-closure (vector-builder) (lambda V70 (tlstr V70)))) (cons (cons tl (lambda-closure (vector-builder) (lambda V69 (tl V69)))) (cons (cons tc (lambda-closure (vector-builder) (lambda V68 (tc V68)))) (cons (cons thaw (lambda-closure (vector-builder) (lambda V67 (thaw V67)))) (cons (cons track (lambda-closure (vector-builder) (lambda V66 (track V66)))) (cons (cons trap-error (lambda-closure (vector-builder) (lambda V64 (lambda V65 (trap-error V64 V65))))) (cons (cons tuple? (lambda-closure (vector-builder) (lambda V63 (tuple? V63)))) (cons (cons type (lambda-closure (vector-builder) (lambda V61 (lambda V62 (type V61 V62))))) (cons (cons return (lambda-closure (vector-builder) (lambda V58 (lambda V59 (lambda V60 (return V58 V59 V60)))))) (cons (cons undefmacro (lambda-closure (vector-builder) (lambda V57 (undefmacro V57)))) (cons (cons unprofile (lambda-closure (vector-builder) (lambda V56 (unprofile V56)))) (cons (cons unput (lambda-closure (vector-builder) (lambda V53 (lambda V54 (lambda V55 (unput V53 V54 V55)))))) (cons (cons unify! (lambda-closure (vector-builder) (lambda V49 (lambda V50 (lambda V51 (lambda V52 (unify! V49 V50 V51 V52))))))) (cons (cons unify (lambda-closure (vector-builder) (lambda V45 (lambda V46 (lambda V47 (lambda V48 (unify V45 V46 V47 V48))))))) (cons (cons union (lambda-closure (vector-builder) (lambda V43 (lambda V44 (union V43 V44))))) (cons (cons untrack (lambda-closure (vector-builder) (lambda V42 (untrack V42)))) (cons (cons unspecialise (lambda-closure (vector-builder) (lambda V41 (unspecialise V41)))) (cons (cons vector (lambda-closure (vector-builder) (lambda V40 (vector V40)))) (cons (cons <-vector (lambda-closure (vector-builder) (lambda V38 (lambda V39 (<-vector V38 V39))))) (cons (cons vector-> (lambda-closure (vector-builder) (lambda V35 (lambda V36 (lambda V37 (vector-> V35 V36 V37)))))) (cons (cons value (lambda-closure (vector-builder) (lambda V34 (value V34)))) (cons (cons variable? (lambda-closure (vector-builder) (lambda V33 (variable? V33)))) (cons (cons write-byte (lambda-closure (vector-builder) (lambda V31 (lambda V32 (write-byte V31 V32))))) (cons (cons write-to-file (lambda-closure (vector-builder) (lambda V29 (lambda V30 (write-to-file V29 V30))))) (cons (cons y-or-n? (lambda-closure (vector-builder) (lambda V28 (y-or-n? V28)))) (cons (cons < (lambda-closure (vector-builder) (lambda V26 (lambda V27 (< V26 V27))))) (cons (cons <= (lambda-closure (vector-builder) (lambda V24 (lambda V25 (<= V24 V25))))) (cons (cons + (lambda-closure (vector-builder) (lambda V22 (lambda V23 (+ V22 V23))))) (cons (cons * (lambda-closure (vector-builder) (lambda V20 (lambda V21 (* V20 V21))))) (cons (cons / (lambda-closure (vector-builder) (lambda V18 (lambda V19 (/ V18 V19))))) (cons (cons - (lambda-closure (vector-builder) (lambda V16 (lambda V17 (- V16 V17))))) (cons (cons > (lambda-closure (vector-builder) (lambda V14 (lambda V15 (> V14 V15))))) (cons (cons >= (lambda-closure (vector-builder) (lambda V12 (lambda V13 (>= V12 V13))))) (cons (cons = (lambda-closure (vector-builder) (lambda V10 (lambda V11 (= V10 V11))))) (cons (cons == (lambda-closure (vector-builder) (lambda V8 (lambda V9 (== V8 V9))))) (cons (cons <e> (lambda-closure (vector-builder) (lambda V7 (<e> V7)))) (cons (cons @s (lambda-closure (vector-builder) (lambda V5 (lambda V6 (@s V5 V6))))) (cons (cons @p (lambda-closure (vector-builder) (lambda V3 (lambda V4 (@p V3 V4))))) (cons (cons @v (lambda-closure (vector-builder) (lambda V1 (lambda V2 (@v V1 V2))))) (cons (cons shen.pvar (lambda-closure (vector-builder) (lambda X (shen.pvar X)))) (cons (cons shen.tuple (lambda-closure (vector-builder) (lambda X (shen.tuple X)))) (cons (cons shen.datatype-error (lambda-closure (vector-builder) (lambda X (shen.datatype-error X)))) (cons (cons shen.type-signature-of-adjoin (lambda-closure (vector-builder) (lambda V224 (lambda V225 (lambda V226 (shen.type-signature-of-adjoin V224 V225 V226)))))) (cons (cons shen.type-signature-of-shen.app (lambda-closure (vector-builder) (lambda V238 (lambda V239 (lambda V240 (shen.type-signature-of-shen.app V238 V239 V240)))))) (cons (cons shen.type-signature-of-arity (lambda-closure (vector-builder) (lambda V252 (lambda V253 (lambda V254 (shen.type-signature-of-arity V252 V253 V254)))))) (cons (cons shen.type-signature-of-boolean? (lambda-closure (vector-builder) (lambda V266 (lambda V267 (lambda V268 (shen.type-signature-of-boolean? V266 V267 V268)))))) (cons (cons shen.type-signature-of-cd (lambda-closure (vector-builder) (lambda V280 (lambda V281 (lambda V282 (shen.type-signature-of-cd V280 V281 V282)))))) (cons (cons shen.type-signature-of-cn (lambda-closure (vector-builder) (lambda V294 (lambda V295 (lambda V296 (shen.type-signature-of-cn V294 V295 V296)))))) (cons (cons shen.type-signature-of-cons? (lambda-closure (vector-builder) (lambda V308 (lambda V309 (lambda V310 (shen.type-signature-of-cons? V308 V309 V310)))))) (cons (cons shen.type-signature-of-difference (lambda-closure (vector-builder) (lambda V322 (lambda V323 (lambda V324 (shen.type-signature-of-difference V322 V323 V324)))))) (cons (cons shen.type-signature-of-<e> (lambda-closure (vector-builder) (lambda V336 (lambda V337 (lambda V338 (shen.type-signature-of-<e> V336 V337 V338)))))) (cons (cons shen.type-signature-of-element? (lambda-closure (vector-builder) (lambda V350 (lambda V351 (lambda V352 (shen.type-signature-of-element? V350 V351 V352)))))) (cons (cons shen.type-signature-of-enable-type-theory (lambda-closure (vector-builder) (lambda V364 (lambda V365 (lambda V366 (shen.type-signature-of-enable-type-theory V364 V365 V366)))))) (cons (cons shen.type-signature-of-error-to-string (lambda-closure (vector-builder) (lambda V378 (lambda V379 (lambda V380 (shen.type-signature-of-error-to-string V378 V379 V380)))))) (cons (cons shen.type-signature-of-fail (lambda-closure (vector-builder) (lambda V392 (lambda V393 (lambda V394 (shen.type-signature-of-fail V392 V393 V394)))))) (cons (cons shen.type-signature-of-fix (lambda-closure (vector-builder) (lambda V406 (lambda V407 (lambda V408 (shen.type-signature-of-fix V406 V407 V408)))))) (cons (cons shen.type-signature-of-fst (lambda-closure (vector-builder) (lambda V420 (lambda V421 (lambda V422 (shen.type-signature-of-fst V420 V421 V422)))))) (cons (cons shen.type-signature-of-gensym (lambda-closure (vector-builder) (lambda V434 (lambda V435 (lambda V436 (shen.type-signature-of-gensym V434 V435 V436)))))) (cons (cons shen.type-signature-of-vector-> (lambda-closure (vector-builder) (lambda V448 (lambda V449 (lambda V450 (shen.type-signature-of-vector-> V448 V449 V450)))))) (cons (cons shen.type-signature-of-get-time (lambda-closure (vector-builder) (lambda V462 (lambda V463 (lambda V464 (shen.type-signature-of-get-time V462 V463 V464)))))) (cons (cons shen.type-signature-of-head (lambda-closure (vector-builder) (lambda V476 (lambda V477 (lambda V478 (shen.type-signature-of-head V476 V477 V478)))))) (cons (cons shen.type-signature-of-hdstr (lambda-closure (vector-builder) (lambda V490 (lambda V491 (lambda V492 (shen.type-signature-of-hdstr V490 V491 V492)))))) (cons (cons shen.type-signature-of-it (lambda-closure (vector-builder) (lambda V504 (lambda V505 (lambda V506 (shen.type-signature-of-it V504 V505 V506)))))) (cons (cons shen.type-signature-of-include (lambda-closure (vector-builder) (lambda V518 (lambda V519 (lambda V520 (shen.type-signature-of-include V518 V519 V520)))))) (cons (cons shen.type-signature-of-inferences (lambda-closure (vector-builder) (lambda V532 (lambda V533 (lambda V534 (shen.type-signature-of-inferences V532 V533 V534)))))) (cons (cons shen.type-signature-of-integer? (lambda-closure (vector-builder) (lambda V546 (lambda V547 (lambda V548 (shen.type-signature-of-integer? V546 V547 V548)))))) (cons (cons shen.type-signature-of-intersection (lambda-closure (vector-builder) (lambda V560 (lambda V561 (lambda V562 (shen.type-signature-of-intersection V560 V561 V562)))))) (cons (cons shen.type-signature-of-language (lambda-closure (vector-builder) (lambda V574 (lambda V575 (lambda V576 (shen.type-signature-of-language V574 V575 V576)))))) (cons (cons shen.type-signature-of-limit (lambda-closure (vector-builder) (lambda V588 (lambda V589 (lambda V590 (shen.type-signature-of-limit V588 V589 V590)))))) (cons (cons shen.type-signature-of-map (lambda-closure (vector-builder) (lambda V602 (lambda V603 (lambda V604 (shen.type-signature-of-map V602 V603 V604)))))) (cons (cons shen.type-signature-of-maxinferences (lambda-closure (vector-builder) (lambda V616 (lambda V617 (lambda V618 (shen.type-signature-of-maxinferences V616 V617 V618)))))) (cons (cons shen.type-signature-of-nl (lambda-closure (vector-builder) (lambda V630 (lambda V631 (lambda V632 (shen.type-signature-of-nl V630 V631 V632)))))) (cons (cons shen.type-signature-of-nth (lambda-closure (vector-builder) (lambda V644 (lambda V645 (lambda V646 (shen.type-signature-of-nth V644 V645 V646)))))) (cons (cons shen.type-signature-of-occurrences (lambda-closure (vector-builder) (lambda V658 (lambda V659 (lambda V660 (shen.type-signature-of-occurrences V658 V659 V660)))))) (cons (cons shen.type-signature-of-optimise (lambda-closure (vector-builder) (lambda V672 (lambda V673 (lambda V674 (shen.type-signature-of-optimise V672 V673 V674)))))) (cons (cons shen.type-signature-of-os (lambda-closure (vector-builder) (lambda V686 (lambda V687 (lambda V688 (shen.type-signature-of-os V686 V687 V688)))))) (cons (cons shen.type-signature-of-port (lambda-closure (vector-builder) (lambda V700 (lambda V701 (lambda V702 (shen.type-signature-of-port V700 V701 V702)))))) (cons (cons shen.type-signature-of-pos (lambda-closure (vector-builder) (lambda V714 (lambda V715 (lambda V716 (shen.type-signature-of-pos V714 V715 V716)))))) (cons (cons shen.type-signature-of-print (lambda-closure (vector-builder) (lambda V728 (lambda V729 (lambda V730 (shen.type-signature-of-print V728 V729 V730)))))) (cons (cons shen.type-signature-of-preclude (lambda-closure (vector-builder) (lambda V742 (lambda V743 (lambda V744 (shen.type-signature-of-preclude V742 V743 V744)))))) (cons (cons shen.type-signature-of-profile-results (lambda-closure (vector-builder) (lambda V756 (lambda V757 (lambda V758 (shen.type-signature-of-profile-results V756 V757 V758)))))) (cons (cons shen.type-signature-of-preclude-all-but (lambda-closure (vector-builder) (lambda V770 (lambda V771 (lambda V772 (shen.type-signature-of-preclude-all-but V770 V771 V772)))))) (cons (cons shen.type-signature-of-ps (lambda-closure (vector-builder) (lambda V784 (lambda V785 (lambda V786 (shen.type-signature-of-ps V784 V785 V786)))))) (cons (cons shen.type-signature-of-read-byte (lambda-closure (vector-builder) (lambda V798 (lambda V799 (lambda V800 (shen.type-signature-of-read-byte V798 V799 V800)))))) (cons (cons shen.type-signature-of-read-file-as-string (lambda-closure (vector-builder) (lambda V812 (lambda V813 (lambda V814 (shen.type-signature-of-read-file-as-string V812 V813 V814)))))) (cons (cons shen.type-signature-of-read-from-string (lambda-closure (vector-builder) (lambda V826 (lambda V827 (lambda V828 (shen.type-signature-of-read-from-string V826 V827 V828)))))) (cons (cons shen.type-signature-of-remove (lambda-closure (vector-builder) (lambda V840 (lambda V841 (lambda V842 (shen.type-signature-of-remove V840 V841 V842)))))) (cons (cons shen.type-signature-of-simple-error (lambda-closure (vector-builder) (lambda V854 (lambda V855 (lambda V856 (shen.type-signature-of-simple-error V854 V855 V856)))))) (cons (cons shen.type-signature-of-specialise (lambda-closure (vector-builder) (lambda V868 (lambda V869 (lambda V870 (shen.type-signature-of-specialise V868 V869 V870)))))) (cons (cons shen.type-signature-of-step (lambda-closure (vector-builder) (lambda V882 (lambda V883 (lambda V884 (shen.type-signature-of-step V882 V883 V884)))))) (cons (cons shen.type-signature-of-stoutput (lambda-closure (vector-builder) (lambda V896 (lambda V897 (lambda V898 (shen.type-signature-of-stoutput V896 V897 V898)))))) (cons (cons shen.type-signature-of-str (lambda-closure (vector-builder) (lambda V910 (lambda V911 (lambda V912 (shen.type-signature-of-str V910 V911 V912)))))) (cons (cons shen.type-signature-of-string->symbol (lambda-closure (vector-builder) (lambda V924 (lambda V925 (lambda V926 (shen.type-signature-of-string->symbol V924 V925 V926)))))) (cons (cons shen.type-signature-of-symbol? (lambda-closure (vector-builder) (lambda V938 (lambda V939 (lambda V940 (shen.type-signature-of-symbol? V938 V939 V940)))))) (cons (cons shen.type-signature-of-tail (lambda-closure (vector-builder) (lambda V952 (lambda V953 (lambda V954 (shen.type-signature-of-tail V952 V953 V954)))))) (cons (cons shen.type-signature-of-tlv (lambda-closure (vector-builder) (lambda V966 (lambda V967 (lambda V968 (shen.type-signature-of-tlv V966 V967 V968)))))) (cons (cons shen.type-signature-of-tc? (lambda-closure (vector-builder) (lambda V980 (lambda V981 (lambda V982 (shen.type-signature-of-tc? V980 V981 V982)))))) (cons (cons shen.type-signature-of-track (lambda-closure (vector-builder) (lambda V994 (lambda V995 (lambda V996 (shen.type-signature-of-track V994 V995 V996)))))) (cons (cons shen.type-signature-of-tuple? (lambda-closure (vector-builder) (lambda V1008 (lambda V1009 (lambda V1010 (shen.type-signature-of-tuple? V1008 V1009 V1010)))))) (cons (cons shen.type-signature-of-union (lambda-closure (vector-builder) (lambda V1022 (lambda V1023 (lambda V1024 (shen.type-signature-of-union V1022 V1023 V1024)))))) (cons (cons shen.type-signature-of-untrack (lambda-closure (vector-builder) (lambda V1036 (lambda V1037 (lambda V1038 (shen.type-signature-of-untrack V1036 V1037 V1038)))))) (cons (cons shen.type-signature-of-variable? (lambda-closure (vector-builder) (lambda V1050 (lambda V1051 (lambda V1052 (shen.type-signature-of-variable? V1050 V1051 V1052)))))) (cons (cons shen.type-signature-of-version (lambda-closure (vector-builder) (lambda V1064 (lambda V1065 (lambda V1066 (shen.type-signature-of-version V1064 V1065 V1066)))))) (cons (cons shen.type-signature-of-write-byte (lambda-closure (vector-builder) (lambda V1078 (lambda V1079 (lambda V1080 (shen.type-signature-of-write-byte V1078 V1079 V1080)))))) (cons (cons shen.type-signature-of-> (lambda-closure (vector-builder) (lambda V1092 (lambda V1093 (lambda V1094 (shen.type-signature-of-> V1092 V1093 V1094)))))) (cons (cons shen.type-signature-of->= (lambda-closure (vector-builder) (lambda V1106 (lambda V1107 (lambda V1108 (shen.type-signature-of->= V1106 V1107 V1108)))))) (cons (cons shen.type-signature-of-= (lambda-closure (vector-builder) (lambda V1120 (lambda V1121 (lambda V1122 (shen.type-signature-of-= V1120 V1121 V1122)))))) (cons (cons shen.type-signature-of-/ (lambda-closure (vector-builder) (lambda V1134 (lambda V1135 (lambda V1136 (shen.type-signature-of-/ V1134 V1135 V1136)))))) (cons (cons shen.type-signature-of-* (lambda-closure (vector-builder) (lambda V1148 (lambda V1149 (lambda V1150 (shen.type-signature-of-* V1148 V1149 V1150)))))) ()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(set shen.*teststack* ())